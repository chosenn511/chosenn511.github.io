<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Development Note | Feed]]></title><description><![CDATA[Development Note Blog]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 17 Feb 2022 15:09:06 GMT</lastBuildDate><item><title><![CDATA[Google News Lab > 6. SSL 인증서 발급 <2편> kube-lego 이해하기]]></title><description><![CDATA[사이트를 배포하고 나서 반드시 해주어야 하는 작업이 있다. 바로 웹사이트 도메인에  인증서를 발급받는 일이다. 특히 크롬/사파리 브라우저는 앞으로 인증서가 없는 웹사이트에 접속 시 경고창을 띄울 것이라고 공지한 만큼 SSL인증서 발급은 웹사이트 배포…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy-6_02/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy-6_02/</guid><pubDate>Tue, 13 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사이트를 배포하고 나서 반드시 해주어야 하는 작업이 있다. 바로 웹사이트 도메인에 &lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt; 인증서를 발급받는 일이다. 특히 크롬/사파리 브라우저는 앞으로 인증서가 없는 웹사이트에 접속 시 경고창을 띄울 것이라고 공지한 만큼 &lt;strong&gt;SSL인증서 발급은 웹사이트 배포시 필수&lt;/strong&gt;
적인 작업이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ssltls-인증서란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ssltls-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%9E%80&quot; aria-label=&quot;ssltls 인증서란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SSL/TLS 인증서란?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt; 인증서는 신뢰할 수 있는 인증기관에서 사이트의 보안을 보증해준다. 사용자가 웹사이트에 접속하면 여러 형태의 인증 기능(회원가입, 로그인, 로그아웃, 결제 등)을 사용하게 되는데 이 때 여러 중요정보를 웹사이트의 서버로 전송할 수 밖에 없다.&lt;/p&gt;
&lt;p&gt;이러한 개인정보는 &lt;code class=&quot;language-text&quot;&gt;패킷&lt;/code&gt; 형태로 전송하는데, 인증서가 없는 사이트는 중요정보가 담긴 패킷을 제 3자가 언제라도 낚아채 가져갈 위험이 있다. 예전에는 인증 기능이 포함된 페이지 경로에만 부분적으로 &lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt;을 적용해도 괜찮았지만 요즘에는 웹사이트 전체에 &lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt;을 적용하도록 장려하고 있다.&lt;/p&gt;
&lt;p&gt;보통의 &lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt;은 유료로 구매하는 인증서지만, &lt;strong&gt;개인이 직접 생성한 키페어로 인증서를 발급&lt;/strong&gt;
해주는 &lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;Let&apos;s Encrypt&lt;/a&gt; 오픈소스 서비스를 사용하려고 한다. 해당 서비스는 3개월의 인증서 유효기간을 제공하고 있다. 만약 직접 &lt;code class=&quot;language-text&quot;&gt;Let&amp;#39;s Encrypt&lt;/code&gt;에서 인증서를 발급받아 사용하는 경우에는 유효기간을 넘지 않도록 조심해야한다. 인증서의 유효기간이 다가오면 사이트에 접속할 때 경고창이 뜨는 등 웹 접근성에 반하는 서비스를 할 우려가 있기 때문이다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;kube-lego-라이브러리-사용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#kube-lego-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;kube lego 라이브러리 사용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;kube-lego 라이브러리 사용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;는 Kubernetes 엔진으로 배포한 웹앱에 간단한 설정(?...튜토리얼에 의하면)으로 도메인을 할당할 수 있다. 또한, &lt;code class=&quot;language-text&quot;&gt;Let&amp;#39;s Encrypt&lt;/code&gt;로 직접 발급받은 인증서를 유효기간 걱정없이 갱신해준다.&lt;/p&gt;
&lt;p&gt;지난 포스트 시리즈까지는 구글 클라우드 플랫폼(Google Cloud Platform) 내 쿠버네트 엔진(GKE, Google Kubernetes Engine)을 사용하여 도커이미지로 만든 장고 앱을 배포하는 방법에 대해 소개했다.
이번 포스트에서는 Kubernete 엔진에 적용가능한 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;를 사용하여 도메인을 할당하고 인증서를 발급하여 사이트 접속시 &lt;code class=&quot;language-text&quot;&gt;https&lt;/code&gt;로 리다이렉트하는 방법을 소개하겠다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;준비물&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%80%EB%B9%84%EB%AC%BC&quot; aria-label=&quot;준비물 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;준비물&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인증서 발급용 &lt;code class=&quot;language-text&quot;&gt;.key&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.crt&lt;/code&gt; 파일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt;로 생성하여 안전한 곳에 저장해둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$  openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /path/to/tls.key -out /path/to/tls.crt -subj &amp;quot;/CN=DNS 이름&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위의 파일은 반드시! 반드시...!! 안전한 곳에 저장해둔다.&lt;/li&gt;
&lt;li&gt;키를 생성할 때 &lt;code class=&quot;language-text&quot;&gt;.srt&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;.key&lt;/code&gt;파일의 이름은 반드시 &lt;code class=&quot;language-text&quot;&gt;tls&lt;/code&gt;로 통일해준다. 그렇지 않으면 못찾더라 ㅠㅠ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;빌링이 허용된 계정으로 쿠버네트 엔진에 배포 중인 장고 앱 (&lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;쿠버네트엔진 배포에 대한 이전 포스팅&lt;/a&gt; 참고)&lt;/li&gt;
&lt;li&gt;앱에 할당할 수 있는, 직접 소유하고 있는 도메인&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;는 기본적으로 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt; 설정과 연동하여 사용하는 라이브러리다. &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;를 사용한 배포방식을 이해하지 못했다면 &lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;이전 글&lt;/a&gt;을 참고하자.&lt;/p&gt;
&lt;p&gt;위의 준비물이 준비됐다면 다음으로 넘어가자. &lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;kube-lego-작동원리-이해하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#kube-lego-%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;kube lego 작동원리 이해하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;kube-lego 작동원리 이해하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;는 일종의 지름길이다. SSL 인증서는 신뢰할 수 있는 인증기관에서 유료로 발급받아 유효기간이 다가오기 전에 미리 매번 갱신해 주어야하는 번거로움을 디폴트로 내장하고 있다. 하지만 앞에서도 설명했듯이 인증서 발급은 필수적인 작업이므로 개발자들은 직접 시크릿파일을 만들어 수동으로 SSL 인증서를 적용시켜 왔는데, &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;는 이러한 일련의 과정을 설정파일 몇 개로 단순화시켜 만들어놓은 라이브러리&lt;/strong&gt;다.&lt;/p&gt;
&lt;p&gt;배포를 하면서 깨닫게 된 사실인데, &lt;code class=&quot;language-text&quot;&gt;namespace&lt;/code&gt;는 매우 중요하다. 이왕이면 &lt;strong&gt;지금까지 모든 설정파일(&lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;설정파일부터~)의 &lt;code class=&quot;language-text&quot;&gt;namespace&lt;/code&gt;를 통일해주는 것이 좋은데, 쿠버네트 엔진같이 클러스터 내에 여러 포드를 생성하는 경우 명시해주지 않으면 파일이 엉뚱한 곳에 설정되는 경우도 있기 때문&lt;/strong&gt;이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# kube-lego.yaml&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Namespace
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ConfigMap, Deployment와 통일해준다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;kube-lego는 스스로 &lt;code class=&quot;language-text&quot;&gt;Let&amp;#39;s Encrypt&lt;/code&gt;에 계정을 생성해 인증서를 발급받아온다. 다음은 그에 해당하는 설정파일이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# modify this to specify your address&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;lego.email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &quot;Let&apos;s Encrypt 계정으로 사용할 이메일주소&quot;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# configure letsencrypt&apos;s production api&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;lego.url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://acme-v01.api.letsencrypt.org/directory&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ConfigMap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;p&gt;다음은 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt; 설정파일이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; extensions/v1beta1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deployment
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
        &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jetstack/kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0.1.5
        &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Always
        &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LEGO_EMAIL
          &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;configMapKeyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
              &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lego.email
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LEGO_URL
          &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;configMapKeyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kube&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lego
              &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lego.url
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LEGO_NAMESPACE
          &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;fieldRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;token key atrule&quot;&gt;fieldPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; metadata.namespace
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LEGO_POD_IP
          &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;fieldRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;token key atrule&quot;&gt;fieldPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; status.podIP
        &lt;span class=&quot;token key atrule&quot;&gt;readinessProbe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /healthz
            &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt; 설정이 끝나면 다음 명령어를 통해 지금까지의 모든 설정파일들을 적용시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl apply &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f &lt;span class=&quot;token string&quot;&gt;&quot;yaml 파일명&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;실제 pod가 동작하는 것을 보고싶다면 namespace 로 통일된 설정파일로 생성한 POD의 log를 찍어볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl get pods &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n &lt;span class=&quot;token string&quot;&gt;&quot;설정한 namespace명&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl logs &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f &lt;span class=&quot;token string&quot;&gt;&quot;kube-lego-0000&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n &lt;span class=&quot;token string&quot;&gt;&quot;설정한 namespace명&quot;&lt;/span&gt;

time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-10T17:44:12Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;requesting certificate for [설정 도메인]&quot;&lt;/span&gt; context=&lt;span class=&quot;token string&quot;&gt;&quot;ingress_tls&quot;&lt;/span&gt; name=myingress namespace=default
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-10T17:44:20Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;authorization successful&quot;&lt;/span&gt; context=acme domain=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;설정 도메인&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-10T17:44:21Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;successfully got certificate: domains=[설정 도메인] url=[let&apos;s encrypt acme 주소]&quot;&lt;/span&gt; context=acme
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-10T17:44:21Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;Secret successfully stored&quot;&lt;/span&gt; context=secret name=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;설정해준 시크릿 이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; namespace=default
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-11T01:34:36Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;Periodically check certificates at 2018-02-11 01:34:36.919178554 +0000 UTC&quot;&lt;/span&gt; context=kubelego  
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-11T01:34:36Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;process certificate requests for ingresses&quot;&lt;/span&gt; context=kubelego
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-11T01:34:36Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;cert expires in 89.6 days, no renewal needed&quot;&lt;/span&gt; context=&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; expire_time=2018&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;05&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;11 16:44:20 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;0000 UTC name=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;인그레스 이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; namespace=default
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-11T01:34:36Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;no cert request needed&quot;&lt;/span&gt; context=&lt;span class=&quot;token string&quot;&gt;&quot;[인그레스 tls 이름]&quot;&lt;/span&gt; name=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;인그레스 이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; namespace=default
time=&lt;span class=&quot;token string&quot;&gt;&quot;2018-02-11T09:34:36Z&quot;&lt;/span&gt; level=info msg=&lt;span class=&quot;token string&quot;&gt;&quot;Periodically check certificates at 2018-02-11 09:34:36.919211522 +0000 UTC&quot;&lt;/span&gt; context=kubelego&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 로그는 생성해놓은 시크릿 키파일로 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;Let&amp;#39;s Encrypt&lt;/code&gt;에 인증을 요청해서 인증서를 발급받아오는 과정을 보여준다. 이전 포스트에서 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;로 배포를 했다면 인증서 발급은 이렇게 간단하게 끝난다.&lt;/p&gt;
&lt;p&gt;콘솔을 확인해보면 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;용 설정파일에서 지정한 이름으로 url이 생성되는데, 다음 패턴을 따른다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ingress에 등록한 도메인주소/well-known/acme-challenge&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 도메인으로 접속해보면 이전 포스트에서 설치해준 &lt;code class=&quot;language-text&quot;&gt;http-default-backend&lt;/code&gt;에 의해 404 페이지가 뜨는 것을 확인할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;code-classlanguage-text주의code&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-text%EC%A3%BC%EC%9D%98code&quot; aria-label=&quot;code classlanguage text주의code permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;주의&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;인증서 발급에 시간이 걸리기 때문에 위의 로그가 찍혔더라도 브라우저로 도메인을 확인해보면 여전히 &lt;code class=&quot;language-text&quot;&gt;Not Secure&lt;/code&gt;가 뜰 가능성이 있다. 내 경우에는 10분 정도 기다리다가 창을 새로고침해보니 적용이 되었었다.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&quot;마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마치며&lt;/h2&gt;
&lt;p&gt;구글 클라우드 플랫폼에서 쿠버네트 엔진을 쓰고, 외부 호스팅 서비스(예를 들면 Cloudflare)를 쓰지 않을 경우 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;를 사용하자. 막상 적용할 때는 정말 어려웠지만 포스팅하면서 정리해보니 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;가 굉장히 간편한 툴이라는 것을 깨달았다...&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 6. SSL 인증서 발급 <1편> 배포방식에 대한 고찰]]></title><description><![CDATA[웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, 쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리
에 대해…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy-6_01/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy-6_01/</guid><pubDate>Sun, 11 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, &lt;strong&gt;쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리&lt;/strong&gt;
에 대해서 설명하고자 한다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;1-쿠버네트는-https-로드밸런싱을-선호한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8A%B8%EB%8A%94-https-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 쿠버네트는 https 로드밸런싱을 선호한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 쿠버네트는 HTTP(S) 로드밸런싱을 선호한다.&lt;/h2&gt;
&lt;p&gt;해당 부분은 설명이 여기저기 분산되어 있고 구글에서 제공하는 문서가 다소 빈약하므로 포괄적인 원리에 대해서 개인적으로 이해한 바대로 설명하겠다.&lt;/p&gt;
&lt;p&gt;쿠버네트 엔진 문서를 보면 다음과 같이 두 가지의 방식의 배포방법을 알려준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Kubernetes Engine offers integrated support for two types of cloud load balancing for a publicly accessible application:

	1. You can create TCP load balancers by specifying type: LoadBalancer on a Service resource manifest. Although a TCP load balancer works for HTTP web servers, they are not designed to terminate HTTP(S) traffic as they are not aware of individual HTTP(S) requests. Kubernetes Engine does not configure any health checks for TCP load balancers.

	2. You can create HTTP(S) load balancers by using an Ingress resource. HTTP(S) load balancers are designed to terminate HTTP(S) requests and can make better context-aware load balancing decisions. They offer features like customizable URL maps and TLS termination. Kubernetes Engine automatically configures health checks for HTTP(S) load balancers.

If you are exposing an HTTP(S) service hosted on Kubernetes Engine, HTTP(S) load balancing is the recommended method for load balancing.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 설명을 간략히 설명하면 &lt;strong&gt;쿠버네트 엔진을 사용하는 경우 HTTP(S) 로드 밸런싱 방식을 사용하는 것을 추천&lt;/strong&gt;
하고 있다. 이 방식은 도메인을 호스트명으로 두고 여러 개의 URL을 생성해 연결할 수 있다는 점과 TLS 인증서 발급을 커스터마이징할 수 있다는 관리 측면의 장점을 가지고 있다.&lt;/p&gt;
&lt;p&gt;1번에서 설명한 TCP 로드밸런싱 방식의 배포가 &lt;code class=&quot;language-text&quot;&gt;Service&lt;/code&gt; 설정으로 배포를 진행한다면
HTTP(S) 로드 밸런싱 기법은 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt; 설정을 사용한다. 그렇다면 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;는 무엇일까?&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;2-ingress-이해하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-ingress-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 ingress 이해하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Ingress 이해하기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot; target=&quot;_blank&quot;&gt;Ingress에 대한 문서&lt;/a&gt;가 처음 읽으면 어렵기도 하고 전체 개념을 설명해주지 않는 것 같아서 핵심적인 부분만 인용하여 설명하고자 한다.&lt;/p&gt;
&lt;p&gt;기존의 &lt;strong&gt;TCP 방식 로드밸런싱 방식&lt;/strong&gt;은 다음과 같다. 즉, 웹앱을 직접 연결하여 퍼블리싱하는 방식이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;    internet
        |
  ------------
  [ Services ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반면 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;internet&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;Service&lt;/code&gt;(배포한 클러스터) 사이에 위치해 외부에서 들어오는 복수 개의 인바운드 요청을 클러스터로 연결해주는 설정파일&lt;/strong&gt;이다. 즉, 다음과 같이 그려볼 수 있다.   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;    internet
        |
   [ Ingress ]
   --|-----|--
   [ Services ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;는 다음과 같은 설정을 가능케 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;외부로 연결되는 URL을 원하는 갯수만큼 설정 가능 == 들어오는 문을 여러 개 만드는 것&lt;/li&gt;
&lt;li&gt;로드밸런스 트래픽 처리 == 유연한 분산처리&lt;/li&gt;
&lt;li&gt;SSL 설정 가능 == 보안 처리&lt;/li&gt;
&lt;li&gt;이름 기반 가상호스팅 가능 == 도메인 호스팅이 별도로 필요없음&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;p&gt;위의 개념 설명을 바탕으로 매우 간략하게 짜여진 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt; 파일을 살펴보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; extensions/v1beta1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Ingress   &lt;span class=&quot;token comment&quot;&gt;# 파일형식&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress   &lt;span class=&quot;token comment&quot;&gt;# 해당 설정에 할당하는 이름&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;# 세부 설정(나중에 Ingress 컨트롤러, tls 관련 설정이 여기에 들어간다)&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /testpath    &lt;span class=&quot;token comment&quot;&gt;# Ingress를 적용하기 원하는 패스&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	   &lt;span class=&quot;token comment&quot;&gt;# 서브하고자 하는 백엔드 서비스 설정&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
          &lt;span class=&quot;token key atrule&quot;&gt;servicePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;는 설정파일이라고 했는데, 이 말인 즉슨 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt; 설정파일은 그 자체로 동작하지 않는다. 따라서 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;에 적힌대로 처리를 해주는 &lt;code class=&quot;language-text&quot;&gt;Ingress-Controller&lt;/code&gt;가 필요하다.&lt;/p&gt;
&lt;p&gt;보통 &lt;code class=&quot;language-text&quot;&gt;Nginx&lt;/code&gt;를 사용하는 편이고, Jay Gorrell의 문서&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;에 따르면 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%B2%84%EC%8A%A4_%ED%94%84%EB%A1%9D%EC%8B%9C&quot; target=&quot;_blank&quot;&gt;리버스 프록싱&lt;/a&gt;이 가능한 모든 시스템이면 된다고 한다. 예를 들면 &lt;code class=&quot;language-text&quot;&gt;Apache&lt;/code&gt; 웹서버나 &lt;code class=&quot;language-text&quot;&gt;Nginx&lt;/code&gt;와 같은 것들이다. 해당 역할은 보안을 위한 것인데, 클라이언트가 서버로 요청을 보낼 때 가운데에서 중개를 해주고 공격이 들어오더라도 내부서버로 침투하지 못하도록 하는 역할을 한다.&lt;/p&gt;
&lt;p&gt;나는 이 역할을 해주는 &lt;code class=&quot;language-text&quot;&gt;Nginx Ingress Controller&lt;/code&gt;를 사용했다. 만약 로드밸런서 서비스를 지원하지 않는 플랫폼에서 배포를 하는 경우에는 배포하고자 하는 앱을 &lt;code class=&quot;language-text&quot;&gt;NodePort&lt;/code&gt;로 배포한 후 해당 노드와 연결시켜주면 된다. 이렇게 하면 리버스 프록시 라우팅이 노출된 &lt;code class=&quot;language-text&quot;&gt;NodePort&lt;/code&gt; 내부 각 노드의 Ingress Controller로 연결된다.  &lt;/p&gt;
&lt;p&gt;내 Ingress Controller의 설정파일은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Service
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;service
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt; // &lt;span class=&quot;token comment&quot;&gt;# Deployment의 namespace와 통일해주자!&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LoadBalancer
  &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https
  &lt;span class=&quot;token key atrule&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller

&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; extensions/v1beta1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deployment
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller
      &lt;span class=&quot;token key atrule&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;prometheus.io/port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10254&apos;&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;prometheus.io/scrape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;true&apos;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller
          &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gcr.io/google_containers/nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0.9.0&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;beta.11
          &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; POD_NAME
              &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token key atrule&quot;&gt;fieldRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;token key atrule&quot;&gt;fieldPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; metadata.name
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; POD_NAMESPACE
              &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token key atrule&quot;&gt;fieldRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;token key atrule&quot;&gt;fieldPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; metadata.namespace
          &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http
            &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;hostPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https
            &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;hostPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;443&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /nginx&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ingress&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;controller
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--default-backend-service=$(POD_NAMESPACE)/default-http-backend&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;3-default-http-backend&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-default-http-backend&quot; aria-label=&quot;3 default http backend permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Default-http-backend?&lt;/h2&gt;
&lt;p&gt;자, 컨트롤러의 설정파일을 찬찬히 봤다면 또 다른 의문이 들 것이다. &lt;code class=&quot;language-text&quot;&gt;default-http-backend&lt;/code&gt;는 무엇일까?&lt;/p&gt;
&lt;p&gt;위의 Controller 설정 파일은 Ingress 설정에서 요청한 라우트를 서빙하기 위해 Ingress 리소스를 모니터링한다. 해당 파일은 실행시 &lt;code class=&quot;language-text&quot;&gt;--default-http-backend&lt;/code&gt;라는 아규먼트를 요청하는데, 이는 Nginx Ingress Controller를 사용할 경우에만 필요로 한다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;간단히 말하면 &lt;code class=&quot;language-text&quot;&gt;Default-http-backend&lt;/code&gt;는 Ingress Controller가 확인할 수 없는 Ingress 설정이 있을 경우 &lt;code class=&quot;language-text&quot;&gt;404&lt;/code&gt; 페이지를 돌려주는 서비스이다.&lt;/p&gt;
&lt;p&gt;아래의 설정파일에도 적혀있듯이, 404 페이지를 반환하는 도커이미지면 모두 &lt;code class=&quot;language-text&quot;&gt;Default-http-backend&lt;/code&gt;로 사용할 수 있다. 단, &lt;code class=&quot;language-text&quot;&gt;/healthz&lt;/code&gt; 패스에서는 &lt;code class=&quot;language-text&quot;&gt;200&lt;/code&gt;을 돌려주도록 설정되어 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# default-deployment.yaml&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; extensions/v1beta1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deployment
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# Service의 namespace와 통일해주자!&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
        &lt;span class=&quot;token comment&quot;&gt;# Any image is permissable as long as:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 1. It serves a 404 page at /&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 2. It serves 200 on a /healthz endpoint&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gcr.io/google_containers/defaultbackend&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.4&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /healthz
            &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; HTTP
          &lt;span class=&quot;token key atrule&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10m
            &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20Mi
          &lt;span class=&quot;token key atrule&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10m
            &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20Mi

&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Service
&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
  &lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customize this&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;backend
  &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;4-마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;4 마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 마치며&lt;/h2&gt;
&lt;p&gt;지금까지 설명한 것을 초보 개발자가 한번에 이해하기에는 무리가 있다. 다시 간단히 요약해보면, Kubenetes 엔진에서 선호하는 HTTP(S) Load Balancing 방식의 배포를 하기 위해 여러 서브도메인으로의 라우팅이 가능한 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;를 사용했고, 이 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;를 동작하도록 하기 위해 &lt;code class=&quot;language-text&quot;&gt;Nginx-Ingress-Controller&lt;/code&gt;를 사용했다. 그리고 &lt;code class=&quot;language-text&quot;&gt;Nginx-Ingress-Controller&lt;/code&gt;를 사용하기에  &lt;code class=&quot;language-text&quot;&gt;Default-http-backend&lt;/code&gt; 설정을  해주었다.&lt;/p&gt;
&lt;p&gt;지금까지는 기본적으로 &lt;code class=&quot;language-text&quot;&gt;Ingress&lt;/code&gt;를 사용한 배포 설정을 설명한 것이다. 다음 포스트에서는 &lt;code class=&quot;language-text&quot;&gt;TLS/SSL 인증서&lt;/code&gt;에 대한 개념설명과 &lt;code class=&quot;language-text&quot;&gt;kube-lego&lt;/code&gt;라는 멋진 라이브러리를 소개하고자 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@cashisclay/kubernetes-ingress-82aa960f658e&quot; target=&quot;_blank&quot;&gt;Ingress에 대해 잘 설명해놓은 Jay Gorrell의 문서&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 장고로 만든 웹사이트에 커스텀 파비콘(.ico) 적용시키기]]></title><description><![CDATA[장고 프로젝트를 생성하고 처음 로컬서버를 실행했을 때 항상 마주하는 로그가 있다. 바로 이것! 파비콘이 적용안됨 장고는 기본  파일을 기본적으로 제공하지 않는다. 결국 로컬 서버는 파일을 찾을 수 없다는  로그를 남긴다. 파비콘은 영어로 이라 쓰고,…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_07/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_07/</guid><pubDate>Sun, 11 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;장고 프로젝트를 생성하고 처음 로컬서버를 실행했을 때 항상 마주하는 로그가 있다. 바로 이것!&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;imgs/2018-02-11/noico.png&quot; alt=&quot;파비콘이 적용안됨&quot;&gt;&lt;/p&gt;
&lt;p&gt;장고는 기본 &lt;code class=&quot;language-text&quot;&gt;.ico&lt;/code&gt; 파일을 기본적으로 제공하지 않는다. 결국 로컬 서버는 파일을 찾을 수 없다는 &lt;code class=&quot;language-text&quot;&gt;404&lt;/code&gt; 로그를 남긴다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;파비콘은 영어로 &lt;code class=&quot;language-text&quot;&gt;favicon&lt;/code&gt;이라 쓰고, &apos;favorites&apos;와 &apos;icon&apos; 을 합쳐서 부르는 말인데, &lt;strong&gt;인터넷 웹브라우저의 주소창에 표시되는 웹사이트나 웹페이지를 대표하는 아이콘&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;이런 처리는 매우 사소하지만 배포 환경에서 빈 이미지를 띄우는 것보다는 로고 이미지라도 하나 있는 것이 웹사이트 완성도에 기여한다고 생각해서 적용시키고 간단히 포스팅을 남긴다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-파비콘-이미지-준비하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%8C%8C%EB%B9%84%EC%BD%98-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;1 파비콘 이미지 준비하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 파비콘 이미지 준비하기&lt;/h2&gt;
&lt;p&gt;현재 제작중인 웹페이지의 로고를 이미지로 사용했다. 이 이미지는 기본적으로 &lt;code class=&quot;language-text&quot;&gt;.png&lt;/code&gt; 확장자를 가진 파일이다.&lt;/p&gt;
&lt;p&gt;해당 파일을 아래 사이트에서 &lt;code class=&quot;language-text&quot;&gt;.ico&lt;/code&gt; 파일로 변환시켜준다. 그러면 사이트에서 알아서 변환하여 &lt;code class=&quot;language-text&quot;&gt;.ico&lt;/code&gt; 파일을 다운받을 수 있도록 해준다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;http://convertico.com/&quot; target=&quot;_blank&quot;&gt;파비콘 이미지로 사용할 .png 파일을 &lt;code class=&quot;language-text&quot;&gt;.ico&lt;/code&gt;확장자로 변환해주는 사이트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/2018-02-11/faviconmakingsite.png&quot; alt=&quot;파비콘 제작 사이트&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-파비콘-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%8C%8C%EB%B9%84%EC%BD%98-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 파비콘 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 파비콘 적용하기&lt;/h2&gt;
&lt;p&gt;만든 &lt;code class=&quot;language-text&quot;&gt;.ico&lt;/code&gt; 파일은 장고 프로젝트 내 &lt;code class=&quot;language-text&quot;&gt;static&lt;/code&gt;폴더에 넣어준다. 그리고 경로를 기억해둔다. 나는 아래의 경로에 넣어주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;/static/images/logo.ico&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;p&gt;템플릿 폴더 내에 &lt;code class=&quot;language-text&quot;&gt;base.html&lt;/code&gt; 파일의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그 내에 링크를 생성해준다. 장고의 템플릿 태그를 써서 위의 경로를 지정해주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--common/base.html--&gt;&lt;/span&gt;

{% raw %}{% load staticfiles %}{% endraw %}
&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;icon&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{% raw %}{% static &lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;images/logo.ico&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt; %}{% endraw %}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	...
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;웹사이트 배포를 마친 상태라면 static 서버에 이미지가 저장된 경로로 찾아갈 수 있도록 후작업이 필요하다.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&quot;3-완성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%99%84%EC%84%B1&quot; aria-label=&quot;3 완성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 완성!&lt;/h2&gt;
&lt;p&gt;로컬 서버를 다시 돌려보면 아래와 같이 파비콘이 적용된 모습을 볼 수 있다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/2018-02-11/ico.png&quot; alt=&quot;파비콘 적용&quot;&gt;&lt;/p&gt;
&lt;br /&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 1. 구글 클라우드 플랫폼을 사용한 배포 전 준비]]></title><description><![CDATA[오늘 포스팅은 오랜만에 삽질하며 구글 클라우드 플랫폼으로 장고 프로젝트 배포를 성공했기에, 그 방법을 다시 한번 숙지할 겸 공유하고자 한다. 근황보고 현재 구글 뉴스랩 프로그램에 개발자로 참여하여 뉴스컨텐츠 제작 작업을 진행하고 있다. 뉴스랩 활동에…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_01/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_01/</guid><pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;오늘 포스팅은 오랜만에 삽질하며 구글 클라우드 플랫폼으로 장고 프로젝트 배포를 성공했기에, 그 방법을 다시 한번 숙지할 겸 공유하고자 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;근황보고&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%ED%99%A9%EB%B3%B4%EA%B3%A0&quot; aria-label=&quot;근황보고 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근황보고&lt;/h2&gt;
&lt;p&gt;현재 구글 뉴스랩 프로그램에 개발자로 참여하여 뉴스컨텐츠 제작 작업을 진행하고 있다. 뉴스랩 활동에 대해서는 프로그램이 끝나고 따로 포스팅할 예정이다 :) (블로그 활동이 뜸한 이유는 바로 이것때문!ㅋㅋ)&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;시작-전-구상하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91-%EC%A0%84-%EA%B5%AC%EC%83%81%ED%95%98%EA%B8%B0&quot; aria-label=&quot;시작 전 구상하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작 전 구상하기&lt;/h2&gt;
&lt;p&gt;AWS로 배포를 한번 해봤던 터라 배포과정은 대략적으로 다음과 같이 구상했다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;장고 프로젝트 생성(데이터베이스 포함)&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;웹서버 구축&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;도커이미지 생성&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;구글 엔진에 이미지 배포&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;하지만 AWS와 구글 엔진 작동 원리는 좀 달랐다.
구글의 기본 스탠다드/플렉시블 엔진을 사용할 경우 배포 설정이 담긴 &lt;code class=&quot;language-text&quot;&gt;app.yaml&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;requirements.txt&lt;/code&gt;만 있으면 배포가 된다.&lt;/p&gt;
&lt;p&gt;도커 이미지를 배포하려면 다른 엔진을 써야했는데,&lt;br&gt;
처음에는 컴퓨트 엔진에 바로 도커이미지를 태울까 생각도 했었지만 장고의 도커이미지를 올리는 데 &lt;code class=&quot;language-text&quot;&gt;Kubernete&lt;/code&gt; 엔진이 적합하다는 튜토리얼의 문구를 믿고(...선택의 여지가 없었다. 문서가 너무 빈약함) 따라해보기로 했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/python/django/kubernetes-engine&quot; target=&quot;_blank&quot;&gt;문서 바로가기 - Deploying Djnago with Kubernetes Engine&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-장고-프로젝트-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9E%A5%EA%B3%A0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 장고 프로젝트 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 장고 프로젝트 생성&lt;/h2&gt;
&lt;p&gt;먼저 배포할 장고 프로젝트를 생성한다. 생성하는 방법은 &lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;에 따로 설명해놓았는데, 주의할 점은 &lt;code class=&quot;language-text&quot;&gt;pyenv&lt;/code&gt;를 사용하지 않고 &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt;를 사용할 것이기 때문에 가상환경 설정은 따로 설명한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Github&lt;/code&gt;에 &lt;a href=&quot;https://github.com/juliahwang/pilter_web/tree/master/&quot; target=&quot;_blank&quot;&gt;소스코드&lt;/a&gt;를 올려놓았다.
프로젝트를 만든 후 파일구조는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;django_app
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
├── README&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── __init__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
├── article
│   ├── __init__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── apps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── migrations
│   ├── models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── tests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   └── views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
├── config
│   ├── __init__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── settings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   ├── urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
│   └── wsgi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
├── manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
├── static
└── templates&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-가상환경-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 가상환경 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 가상환경 설정하기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;구글엔진을 쓰면서 가장 불편했던 점은 커멘드라인 툴이 파이썬 2.7까지만 호환된다는 점이다.&lt;/strong&gt; 거기다가 개발은 파이썬 3으로 하라고 권장하니, 하나의 폴더 내에 2개의 가상환경을 만들어서 서로 바꿔가며 써야했다.&lt;/p&gt;
&lt;p&gt;이에 &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt;를 사용했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ virtualenv &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;python=python2 pilter2
$ virtualenv &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;python=python3 pilter3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pilter2&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;pilter3&lt;/code&gt;에 각각 파이썬2, 파이썬3을 설정하여 가상환경을 만들면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ virtualenv env
$ source env&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;activate
$ pip install &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r requirements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-requirementstxt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-requirementstxt&quot; aria-label=&quot;1 requirementstxt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) requirements.txt&lt;/h3&gt;
&lt;p&gt;쿠버네트 엔진에서 장고를 배포할 때 필요한 패키지는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Django==1.10
wheel==0.30.0
gunicorn==19.7.1
psycopg2==2.7.3.2
Pillow==5.0.0   (--&amp;gt; ImageField를 쓰지 않는다면 생략 가능)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-준비사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD&quot; aria-label=&quot;3 준비사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 준비사항&lt;/h2&gt;
&lt;h3 id=&quot;1-빌링-허용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%B9%8C%EB%A7%81-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;1 빌링 허용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) 빌링 허용하기&lt;/h3&gt;
&lt;p&gt;구글 서비스를 사용하기 위해 &lt;a href=&quot;https://console.cloud.google.com&quot; target=&quot;_blank&quot;&gt;구글 클라우드 콘솔&lt;/a&gt;로 접속한다. 첫 가입시 무료 크레딧 300개를 주니 해당 크레딧으로 빌링을 등록한다. 빌링을 등록해야 인스턴스, 데이터 스토리지 등의 서비스를 사용할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;2-google-cloud-sdk-설치하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-google-cloud-sdk-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 google cloud sdk 설치하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2) Google Cloud SDK 설치하기&lt;/h3&gt;
&lt;p&gt;구글 클라우드 플랫폼에서 제공하는 리소스, 툴, 라이브러리 등을 사용하기 위해서는 SDK를 다운받아야한다. &lt;a href=&quot;https://cloud.google.com/sdk/docs/&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;서 자신의 컴퓨터 사양에 따라 다운받으면 된다. (아무데나 위치시켜도 되지만 나는 해당 폴더를 프로젝트 폴더 경로 내에 넣어주었다.)&lt;/p&gt;
&lt;p&gt;받고 나서는 설치 파일을 실행해주고, 초기화를 진행해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 설치파일 실행&lt;/span&gt;
$ &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;google&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cloud&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sdk&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;install&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sh
&lt;span class=&quot;token comment&quot;&gt;# 설치파일 실행후에는 터미널 다시 열기!&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 초기화&lt;/span&gt;
$ &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;google&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cloud&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sdk&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;gcloud init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 콘솔에서 &lt;code class=&quot;language-text&quot;&gt;gcloud&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;gsutil&lt;/code&gt; 등의 커맨드 라인 툴을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;문서를 보면 API를 활성화하라고 하는데, 나는 권한이 없어서 따로 해주지 않았다... 살펴보니 Google Cloud SQL API만 있으면 되는 것 같다.(직접 쓸 것이므로)  &lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;4 마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 마치며&lt;/h2&gt;
&lt;p&gt;다음 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 2. 프록시 서버 및 데이터베이스 구축]]></title><description><![CDATA[이번 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다. 1. Cloud SQL Proxy용 로컬환경 구축하기 배포된 앱은 클라우드 SQL 인스턴스와 통신하기위해 Clou…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_02/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_02/</guid><pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-cloud-sql-proxy용-로컬환경-구축하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-cloud-sql-proxy%EC%9A%A9-%EB%A1%9C%EC%BB%AC%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;1 cloud sql proxy용 로컬환경 구축하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Cloud SQL Proxy용 로컬환경 구축하기&lt;/h2&gt;
&lt;p&gt;배포된 앱은 클라우드 SQL 인스턴스와 통신하기위해 Cloud SQL Proxy를 사용한다. 다음은 옵션 기능이지만, 로컬에서 테스트용을 설치하는 방법이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Proxy 다운로드&lt;/span&gt;
$ curl &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;o cloud_sql_proxy https:&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;google&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cloudsql&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cloud_sql_proxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;darwin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd64

&lt;span class=&quot;token comment&quot;&gt;# 프록시 사용가능하도록 활성화&lt;/span&gt;
$ chmod &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;x cloud_sql_proxy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-cloud-sql-인스턴스-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-cloud-sql-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;2 cloud sql 인스턴스 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Cloud SQL 인스턴스 생성&lt;/h2&gt;
&lt;p&gt;이후 연결해 줄 Cloud SQL 인스턴스를 생성한다. 데이터베이스는 postgreSQL을 사용하기로 하였다.(아직은 베타버전을 제공하고 있다.)&lt;/p&gt;
&lt;p&gt;다음 명령어로 콘솔에서 인스턴스 이름, 사용할 CPU 개수와 메모리 크기를 명시해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ gcloud sql instances create &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;새로운 인스턴스명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;database&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;version=POSTGRES_9_6 \
       &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;cpu=&lt;span class=&quot;token namespace&quot;&gt;[CPUS 갯수]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;memory=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;메모리 사이즈&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;아까 설치한 Cloud SDK를 사용하면 생성한 SQL 인스턴스의 정보 및 &lt;code class=&quot;language-text&quot;&gt;connectionName&lt;/code&gt;을 알아낼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ gcloud sql instances describe &lt;span class=&quot;token namespace&quot;&gt;[SQL 인스턴스명]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;connectionName&lt;/code&gt;은 설정파일(settings.py) 및 곧 생성할 &lt;code class=&quot;language-text&quot;&gt;app.yaml&lt;/code&gt;에 필요하므로 따로 보관해둔다. 보통 다음과 같이 구성되어 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 예시&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# connectionName: [프로젝트명]:[리전위치]:[인스턴스 이름]&lt;/span&gt;

connectionName: project11:asia&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;northeast1:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-cloud-sql-실행하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-cloud-sql-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0&quot; aria-label=&quot;3 cloud sql 실행하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Cloud SQL 실행하기&lt;/h2&gt;
&lt;p&gt;앞서 발급받은 &lt;code class=&quot;language-text&quot;&gt;connectionName&lt;/code&gt;을 사용하여 Cloud SQL Proxy를 실행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cloud_sql_proxy &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;instances=&lt;span class=&quot;token string&quot;&gt;&quot;[connectionName]&quot;&lt;/span&gt;=tcp:5432&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 로컬환경과 생성해준 Cloud SQL 인스턴스를 연결하는 테스팅 환경이 생긴다.&lt;/p&gt;
&lt;p&gt;데이터 베이스는 &lt;code class=&quot;language-text&quot;&gt;psql&lt;/code&gt;로 간단히 만들고 마이그레이션 해주었다.&lt;/p&gt;
&lt;p&gt;데이터베이스 테이블명과 비밀번호는 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;에 필요한 정보지만 외부에 노출되면 안되니 &lt;strong&gt;환경변수&lt;/strong&gt;로 지정하거나 따로 &lt;strong&gt;시크릿 파일&lt;/strong&gt;을 만들어서 관리하면 된다. 나 같은 경우에는 환경변수로 등록해주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ export DATABASE_USER=&amp;lt;만들어준 유저명&amp;gt;
$ export DATABASE_PASSWORD=&amp;lt;비밀번호값&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 데이터베이스 설정을 장고 내 설정파일(&lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;)에 넣어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;DATABASES &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;default&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# If you are using Cloud SQL for MySQL rather than PostgreSQL, set&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos; instead of the following.&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;ENGINE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;django.db.backends.postgresql&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;NAME&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[test-db-name]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;USER&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getenv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;DATABASE_USER&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getenv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;DATABASE_PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;HOST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;127.0.0.1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;PORT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;5432&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;4 마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 마치며&lt;/h2&gt;
&lt;p&gt;다음 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 4. Kubernetes 버킷 및 클러스터 엔진 생성]]></title><description><![CDATA[이번 포스팅에서는 Google Cloud Storage를 사용하여 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다. 1. Cloud Storage에 버킷 생성 구글 클라우드 플랫폼에서는 Gunicorn 서버를 사용하여 앱…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_04/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_04/</guid><pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 포스팅에서는 Google Cloud Storage를 사용하여 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-cloud-storage에-버킷-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-cloud-storage%EC%97%90-%EB%B2%84%ED%82%B7-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 cloud storage에 버킷 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Cloud Storage에 버킷 생성&lt;/h2&gt;
&lt;p&gt;구글 클라우드 플랫폼에서는 Gunicorn 서버를 사용하여 앱을 배포한다. 하지만 Gunicorn 서버는 정적 파일을 서빙하지 않기 때문에 따로 Cloud Storage를 생성하여 정적파일을 서빙해줘야 한다.&lt;/p&gt;
&lt;p&gt;먼저 버켓을 생성하고 기본적으로 버켓을 공개해놓는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 버켓 생성&lt;/span&gt;
$ gsutil mb gs:&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&amp;lt;버켓이름&gt;

&lt;span class=&quot;token comment&quot;&gt;# 기본 공개 설정&lt;/span&gt;
$ gsutil defacl &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt; public&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;read gs:&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&amp;lt;버켓이름&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;장고로 돌아와서, 프로젝트 내의 정적파일을 한 폴더에 모아준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py collectstatic&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;파일이 &lt;code class=&quot;language-text&quot;&gt;static/&lt;/code&gt; 안에 모두 모였다면 버켓과 해당 폴더를 연결해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# gsutil rsync -R static/ gs://&amp;lt;버켓이름&gt;/static&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;연결해 준 후에는 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;STATIC_URL&lt;/code&gt;을 다음과 같이 바꿔준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# settings.py&lt;/span&gt;

STATIC_URL&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://storage.googleapis.com/&amp;lt;버켓이름&gt;/static/&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;완료! 이제 Kubernetes 엔진을 생성해보자.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-kubernetes-엔진-클러스터-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-kubernetes-%EC%97%94%EC%A7%84-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 kubernetes 엔진 클러스터 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Kubernetes 엔진 클러스터 생성하기&lt;/h2&gt;
&lt;h3 id=&quot;1-클러스터-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 클러스터 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) 클러스터 생성&lt;/h3&gt;
&lt;a href=&quot;https://console.cloud.google.com/kubernetes&quot; target=&quot;_blank&quot;&gt;
Kubernetes 엔진 콘솔 페이지&lt;/a&gt;에서 엔진 준비가 된 것을 확인한 후에 다음 명령어로 클러스터를 만들어준다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ gcloud container clusters create &lt;span class=&quot;token function&quot;&gt;test-app&lt;/span&gt; \
  &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;scopes &lt;span class=&quot;token string&quot;&gt;&quot;https://www.googleapis.com/auth/userinfo.email&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cloud-platform&quot;&lt;/span&gt; \
  &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;num&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;nodes 2 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;zone &lt;span class=&quot;token string&quot;&gt;&quot;asia-northeast1-a&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;2-클러스터-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;2 클러스터 확인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2) 클러스터 확인&lt;/h3&gt;
&lt;p&gt;클러스터를 만들고 나서는 &lt;code class=&quot;language-text&quot;&gt;kubectl&lt;/code&gt; 명령어로 클러스터 설정을 제공할 예정이므로 만들어준 클러스터 인스턴스를 쓸 것임을 다음 명령어로 확인해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ gcloud container clusters get-credentials test-app --zone &amp;quot;asia-northeast1-a&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;3-클러스터-시크릿파일-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%8B%9C%ED%81%AC%EB%A6%BF%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;3 클러스터 시크릿파일 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(3) 클러스터 시크릿파일 설정&lt;/h3&gt;
&lt;p&gt;인스턴스 수준의 접근을 허용하는 크레덴셜 파일을 생성한다. 해당 json 파일은 서비스 계정 생성시 받은 파일이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl create secret generic cloudsql&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;oauth&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;credentials &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;file=credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;프로젝트 내 credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json의 상대경로&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;두 번째 시크릿 파일은 데이터베이스에 접근하기 위한 파일이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl create secret generic cloudsql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;literal=username=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;데이터베이스 사용자명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;literal=password=&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;비밀번호값&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두 파일 모두 만들어 주면 엔진 사용설정은 끝이 난다.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 5. 도커파일 생성 및 배포]]></title><description><![CDATA[이번 배포에서는 웹서버로 을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다. 1. Gunicorn 서버설정 + 도커파일 생성 (1) 도커파일 작성 만들어준 도커파일은 …]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_05/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_05/</guid><pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 배포에서는 웹서버로 &lt;code class=&quot;language-text&quot;&gt;gunicorn&lt;/code&gt;을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-gunicorn-서버설정--도커파일-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-gunicorn-%EC%84%9C%EB%B2%84%EC%84%A4%EC%A0%95--%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 gunicorn 서버설정  도커파일 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Gunicorn 서버설정 + 도커파일 생성&lt;/h2&gt;
&lt;h3 id=&quot;1-도커파일-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;1 도커파일 작성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) 도커파일 작성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;docker&quot;&gt;&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; gcr.io/google_appengine/python

&lt;span class=&quot;token comment&quot;&gt;# Create a virtualenv for the application dependencies.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# # If you want to use Python 3, add the -p python3.4 flag.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; virtualenv /env
&lt;span class=&quot;token keyword&quot;&gt;ENV&lt;/span&gt; PATH /env/bin&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$PATH

&lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; requirements.txt /app/requirements.txt
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; /env/bin/pip install &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;r /app/requirements.txt
&lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; . /app

&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; start.sh /start.sh

&lt;span class=&quot;token keyword&quot;&gt;EXPOSE&lt;/span&gt; 80 8000


&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; gunicorn &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;b &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$PORT config.wsgi
&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/start.sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만들어준 도커파일은 위와 같다. 기본으로 제공하는 도커파일과 다른 점이 있다면 나는 Gunicorn 서버를 직접 실행해서 연결해줬다는 점이다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;2-gunicorn-서버-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-gunicorn-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;2 gunicorn 서버 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2) Gunicorn 서버 설정&lt;/h3&gt;
&lt;p&gt;이를 위해서 해당 폴더 경로에 Gunicorn 서버를 실행해주는 &lt;code class=&quot;language-text&quot;&gt;start.sh&lt;/code&gt;를 만들어줬다.&lt;/p&gt;
&lt;p&gt;로컬에서 테스팅할 때나 도커를 특정포트로 실행시킬 때 유용하게 사용했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;#!/bin/bash

# Start Gunicorn processes
echo Starting Gunicorn.
exec gunicorn config.wsgi:application \
    --bind 0.0.0.0:8080 \
    --workers 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다만 &lt;strong&gt;주의할 점은 &lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt;하는 포트번호를 &lt;code class=&quot;language-text&quot;&gt;app.yaml&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;TargetPort&lt;/code&gt;와 동일하게 적어줘야한다는 점&lt;/strong&gt;이다. (나는 이걸 모르고 하루를 낭비했다...)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;3-도커-이미지-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;3 도커 이미지 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(3) 도커 이미지 생성&lt;/h3&gt;
&lt;p&gt;구글에서는 Cloud SQL Proxy 서비스를 위해 기본적으로  퍼블릭 도커 이미지를 제공한다. 다음 명령어로 다운받을 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ docker pull b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gcr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;cloudsql&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;docker&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;gce&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;proxy:1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;05&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 이미지를 이용해서 내 도커이미지를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ docker build &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;t gcr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;프로젝트명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;test &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만들어준 도커이미지는 다시 구글 컨테이너 레지스트리에 올려준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ gcloud docker push gcr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;프로젝트명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 만든 도커이미지는 클라우드에서 액세스 가능한 프로젝트 스냅샷을 제공하게 된다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-배포하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 배포하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 배포하기&lt;/h2&gt;
&lt;p&gt;도커이미지까지 모두 준비가 끝났다. 이제는 배포 환경설정 파일에 서비스를 만들어주는 환경설정을 추가해주는 일만 남았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Service
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; LoadBalancer
  &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 기본 로드밸런서 설정을 &lt;code class=&quot;language-text&quot;&gt;app.yaml&lt;/code&gt;에 추가해준다.&lt;/p&gt;
&lt;p&gt;다음 명령어로 설정을 클러스터에 등록해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl create &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파일을 등록해준 후 몇 분 기다리면 &lt;code class=&quot;language-text&quot;&gt;pod&lt;/code&gt;가 생긴다. 이전 포스팅에서 클러스터를 생성할 때 &lt;code class=&quot;language-text&quot;&gt;node=2&lt;/code&gt;로 설정한 부분이다.  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pods&lt;/code&gt;를 실시간으로 확인하고 싶다면 다음 명령어를 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl get pods  
NAME                       READY     STATUS    RESTARTS   AGE
test-&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;   2&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2      Running    0          3h
test-&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;   2&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2      Running    0          3h
test-&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;*&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;   2&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2      Running    0          3h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Pods&lt;/code&gt;들이 &lt;code class=&quot;language-text&quot;&gt;Running&lt;/code&gt; 상태인 것을 확인했다면 이제 외부 IP를 통해 브라우징이 가능하다. 세세한 오류들은 콘솔 홈페이지의 오류보고를 살펴보고 디버깅이 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ kubectl get services test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이상으로 배포를 완료했다!&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;3 마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 마치며&lt;/h2&gt;
&lt;p&gt;AWS를 사용한 배포에 익숙한 나에게 선택권이 많고 레퍼런스를 찾기 힘든 구글 클라우드 엔진은 만만치 않은 툴이었다.&lt;/p&gt;
&lt;p&gt;결국 배포 성공한 후 내가 얻은 깨달음은 어렵고 생소했다기 보다는 네트워크 설정에 너무 겁을 먹었다는 것이다. (마지막 에러를 해결했을 때 그 허무함이란...)&lt;/p&gt;
&lt;p&gt;AWS로 배포하는 것과 잠시 비교를 해보자면 설정이 훨씬 줄어들었다는 점에서는 구글 클라우드를 칭찬할만 하지만 문서나 인터페이스는 아직 AWS에 비하면 한참 멀었다. &lt;del&gt;후발 주자니까 당연하겠지만...&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;그래도 오랜만에 일주일동안 머리 싸매고 배포를 해보니 개발에 대한 욕구가 샘솟는다! 헠헠! 이상으로 구글 클라우드로 장고 배포(&lt;del&gt;고군분투&lt;/del&gt;)를 마친다.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Google News Lab > 3. Kubernetes 엔진 생성 전 설정]]></title><description><![CDATA[이번 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다. 1. 서비스 계정(Service Account) 생성 서비스 계정은 IAM 내에서 제공중이다. 해당 콘솔페이지에서 콘솔 탭메뉴의 을 선택…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_03/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/ggcloudDeploy_03/</guid><pubDate>Mon, 29 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-서비스-계정service-account-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%A0%95service-account-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 서비스 계정service account 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 서비스 계정(Service Account) 생성&lt;/h2&gt;
&lt;p&gt;서비스 계정은 IAM 내에서 제공중이다. &lt;a href=&quot;https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts&quot; target=&quot;_blank&quot;&gt;해당 콘솔페이지&lt;/a&gt;에서 콘솔 탭메뉴의 &lt;code class=&quot;language-text&quot;&gt;IAM&lt;/code&gt;을 선택한 후 &lt;code class=&quot;language-text&quot;&gt;서비스 계정&lt;/code&gt; 탭을 눌러 알맞은 프로젝트 내에 계정을 생성하면 된다.&lt;/p&gt;
&lt;p&gt;이 때, 역할에서 &lt;code class=&quot;language-text&quot;&gt;Cloud SQL&lt;/code&gt; 내의 &lt;code class=&quot;language-text&quot;&gt;Cloud SQL Client&lt;/code&gt;를 부여해준다. 이 서비스 계정 ID는 반드시 유일할 필요는 없지만 알아보기 쉬운 프로젝트 관련 이름으로 정해주는 것이 좋다.&lt;/p&gt;
&lt;p&gt;계정 생성이 완료되면 &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt;으로 선택한 프라이빗 키 파일이 다운받아진다. 이 키는 서비스계정을인스턴스에 연결할 때, 엔진 생성할 때 필요하므로 안전한 곳에 보관한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-kubernetes쿠버네트-엔진-환경설정-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-kubernetes%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8A%B8-%EC%97%94%EC%A7%84-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;2 kubernetes쿠버네트 엔진 환경설정 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Kubernetes(쿠버네트) 엔진 환경설정 생성&lt;/h2&gt;
&lt;p&gt;이전 포스팅에서 구글 엔진용 배포 환경설정 파일로  &lt;code class=&quot;language-text&quot;&gt;app.yaml&lt;/code&gt;을 생성해주어야 한다고 언급했다.&lt;/p&gt;
&lt;p&gt;이제 이 파일을 생성해보자. 이 때도 &lt;code class=&quot;language-text&quot;&gt;connectionName&lt;/code&gt;이 필요하다. 이 부분을 생략했다면 이전 포스팅을 참고하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# app.yaml&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; extensions/v1beta1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deployment
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;app
  &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;app
        &lt;span class=&quot;token comment&quot;&gt;# Replace  with your project ID or use `make template`&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gcr.io/&amp;lt;프로젝트명&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;/test
        &lt;span class=&quot;token comment&quot;&gt;# This setting makes nodes pull the docker image every time before&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# starting the pod. This is useful when debugging, but should be turned&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# off in production.&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Always
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; DATABASE_USER
              &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token key atrule&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql
                  &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; username
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; DATABASE_PASSWORD
              &lt;span class=&quot;token key atrule&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token key atrule&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql
                  &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; password
        &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; b.gcr.io/cloudsql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;docker/gce&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;proxy&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.05&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;proxy
        &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/cloud_sql_proxy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--dir=/cloudsql&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;token string&quot;&gt;&quot;-instances=&amp;lt;connectionName을 써줘야함&gt;=tcp:5432&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;token string&quot;&gt;&quot;-credential_file=/secrets/cloudsql/credentials.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;oauth&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;credentials
            &lt;span class=&quot;token key atrule&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /secrets/cloudsql
            &lt;span class=&quot;token key atrule&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ssl&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;certs
            &lt;span class=&quot;token key atrule&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/ssl/certs
          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql
            &lt;span class=&quot;token key atrule&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /cloudsql
      &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;oauth&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;credentials
          &lt;span class=&quot;token key atrule&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;oauth&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;credentials
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ssl&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;certs
          &lt;span class=&quot;token key atrule&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/ssl/certs
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudsql
          emptyDir&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 설정은 아직 &lt;strong&gt;배포 서비스에 대한 환경 설정은 포함하지 않은 엔진 자체에 대한 정보&lt;/strong&gt;를 담고 있다. 예를 들면 데이터베이스 설정, 장고 프로젝트를 담을 도커 이미지 설정, 그리고 볼륨에 대한 설정 등으로 구성되어 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-장고-마이그레이션-및-어드민-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9E%A5%EA%B3%A0-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EB%B0%8F-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;3 장고 마이그레이션 및 어드민 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 장고 마이그레이션 및 어드민 생성&lt;/h2&gt;
&lt;p&gt;장고 프로젝트 생성시 만든 앱을 마이그레이션 해준다. (데이터베이스를 생성하는 작업이다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py makemigrations
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로컬 웹서버를 돌려서 페이지가 정상작동하는지 확인해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ ./manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;4 마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 마치며&lt;/h2&gt;
&lt;p&gt;다음 포스팅에서는 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Python _ Lv2. 이상한 문자 만들기]]></title><description><![CDATA[문제 설명 toWeirdCase함수는 문자열 s를 매개변수로 입력받습니다.
문자열 s에 각 단어의 짝수번째 인덱스 문자는 대문자로, 홀수번째 인덱스 문자는 소문자로 바꾼 문자열을 리턴하도록 함수를 완성하세요.
예를 들어 s가 "try hello wo…]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/level2. 이상한문자만들기/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/level2. 이상한문자만들기/</guid><pubDate>Mon, 13 Nov 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;문제-설명&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85&quot; aria-label=&quot;문제 설명 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 설명&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;toWeirdCase함수는 문자열 s를 매개변수로 입력받습니다.
문자열 s에 각 단어의 짝수번째 인덱스 문자는 대문자로, 홀수번째 인덱스 문자는 소문자로 바꾼 문자열을 리턴하도록 함수를 완성하세요.
예를 들어 s가 &quot;try hello world&quot;라면 첫 번째 단어는 &quot;TrY&quot;, 두 번째 단어는 &quot;HeLlO&quot;, 세 번째 단어는 &quot;WoRlD&quot;로 바꿔 &quot;TrY HeLlO WoRlD&quot;를 리턴하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;주의 : 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/challenge_codes/115&quot; target=&quot;_blank&quot;&gt;문제 보러가기&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;코드-및-풀이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;코드 및 풀이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드 및 풀이&lt;/h2&gt;
&lt;p&gt;초반에는 &lt;code class=&quot;language-text&quot;&gt;replace()&lt;/code&gt;를 사용하려고 했었는데, &lt;code class=&quot;language-text&quot;&gt;replace()&lt;/code&gt;는 인덱스에 상관없이 문자열 자체에 같은 문자가 있으면 일괄 변환시켜버렸다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;try hello world&apos;&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;upper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;replace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lower&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# TrY HellO WoRlD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;문자열을 단어 단위로 쪼개서 반복문으로 짝수 인덱스만 대문자화한 다음 합치는 방식을 사용하였다.&lt;/p&gt;
&lt;p&gt;그래서 작성한 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toWeirdCase_1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lower&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;upper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

toWeirdCase_1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# &apos;HeLlo WoRlD&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;다음 코드는 리스트 컴프리헨션과 &lt;code class=&quot;language-text&quot;&gt;enumerate()&lt;/code&gt;를 사용하여 한 줄로 작성한 것이다.&lt;/p&gt;
&lt;p&gt;단어 단위로 리스트에 저장한 다음 또 단어마다 글자를 돌면서 짝수 인덱스를 대문자화(&lt;code class=&quot;language-text&quot;&gt;upper()&lt;/code&gt;)시킨다. 홀수 인덱스는 이미 대문자일 수도 있으므로 소문자화(&lt;code class=&quot;language-text&quot;&gt;lower()&lt;/code&gt;)시킨다.&lt;/p&gt;
&lt;p&gt;그리고 해당 단어들을 공백 기준으로 합치면 원하는 형태의 문자열이 출력된다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toWeirdCase_2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;upper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lower&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;toWeirdCase_2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;try new hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# TrY NeW HeLlO WoRlD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[Python _ Lv2. 가장 긴 펠린드롬]]></title><description><![CDATA[문제 설명 앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.
longest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.
s의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.
예를들어 s가 …]]></description><link>https://github.com/chosenn511/chosenn511.github.io.git/level2. 가장 긴 펠린드롬/</link><guid isPermaLink="false">https://github.com/chosenn511/chosenn511.github.io.git/level2. 가장 긴 펠린드롬/</guid><pubDate>Fri, 03 Nov 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;문제-설명&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85&quot; aria-label=&quot;문제 설명 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 설명&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.
longest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.
s의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.
예를들어 s가 &quot;토마토맛토마토&quot;이면 7을 리턴하고 &quot;토마토맛있어&quot;이면 3을 리턴합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/challenge_codes/85&quot; target=&quot;_blank&quot;&gt;문제 보러가기&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;코드-및-풀이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;코드 및 풀이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드 및 풀이&lt;/h2&gt;
&lt;p&gt;처음에는 반복문으로 가능한 경우의 수를 하나하나 나눠서 생각했다. (정렬에 대한 기반이 약해서 이러지 않았나 싶다.)&lt;/p&gt;
&lt;p&gt;이중 반복문을 사용했는데, 비교할 부분문자열 범위를 잘 생각해봐야 한다. 먼저 인자로 받은 &lt;strong&gt;문자열 &lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt;를 반대로 나열한 &lt;code class=&quot;language-text&quot;&gt;rs&lt;/code&gt;&lt;/strong&gt;를 만든다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt; 문자열에 대하여 반복문을 돌면서 한 글자 이상의 부분문자열 슬라이스가 &lt;code class=&quot;language-text&quot;&gt;rs&lt;/code&gt;에 있으면 해당 문자열의 길이를 &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; 리스트에 저장한다. 그 후 &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; 리스트를 정렬하여 최대 길이를 반환한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;longest_palindrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    ls &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; t &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; rs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;토마토맛있어토마토마토&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 5&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;토마토맛있어&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;토마토마토마토&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 7&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;맛있어토마토&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;맛있어토마토네&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 다음과 같은 문자열 비교 관련 파이썬 문법을 사용하였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;토마토마토&quot;&lt;/span&gt;
b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;어있맛토마토마토&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또, 빈문자열이나 길이가 1인 문자도 함께 제외시켜 리스트에 포함되지 않도록 했다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;리펙토링으로 줄인 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;longest_palindrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    ls &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    result&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; rs &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ls&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 이 문제는 재귀로 푸는 것이 가장 쉽다..&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;다른-방식의-코드-및-풀이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;다른 방식의 코드 및 풀이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다른 방식의 코드 및 풀이&lt;/h2&gt;
&lt;p&gt;재귀로 푼 코드를 보자.&lt;/p&gt;
&lt;p&gt;먼저 인덱싱을 통해 거꾸로 만든 문자열이 원래 문자열과 같으면 &lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt; 길이를 리턴하는 것으로 종료조건을 설정한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt;의 마지막 글자부터 하나씩 슬라이스하는 재귀함수와, s의 첫 글자부터 하나씩 슬라이스하는 재귀함수 값 중 일치하는 것(종료조건 적용)의 최대길이를 &lt;code class=&quot;language-text&quot;&gt;max()&lt;/code&gt;로 찾았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;longest_palindrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매우 간단하지 않은가?&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;다음 코드는 파이썬에서 제공하는 &lt;code class=&quot;language-text&quot;&gt;difflib&lt;/code&gt; 라이브러리에서 해시 가능한 값이면 자료형에 상관없이 순서비교가 가능한 &lt;code class=&quot;language-text&quot;&gt;SequenceMatcher&lt;/code&gt;를 사용해 푼 방식이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; difflib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SequenceMatcher &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; SM

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;longest_palindrom_3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; SM&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_longest_match&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;longest_palindrom&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;토마토맛있어토마토마토&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SequenceMatcher&lt;/code&gt;에 대해 간략히 정리해보면 다음과 같다.&lt;/p&gt;
&lt;p&gt;더 자세한 사항은 &lt;a href=&quot;https://docs.python.org/3.6/library/difflib.html&quot; target=&quot;_blank&quot;&gt;파이썬 3.6 문서 - difflib&lt;/a&gt;을 참고하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; difflib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SequenceMatcher &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; SM

&lt;span class=&quot;token comment&quot;&gt;# 첫 번째 인자값은 isjunk로, 무시할 값이 있으면 여기에 설정한다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 보통 None으로 설정하며, lambda x: 0;과 같은 뜻이다.&lt;/span&gt;
s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SM&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; abcd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd abcd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# find_longest_match(a의 찾을 시작인덱스, a의 찾을 끝인덱스, b의 찾을 시작인덱스, b의 찾을 끝인덱스)&lt;/span&gt;
s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_longest_match&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# a의 i부터 j까지 size가 k인 값을 찾았음을 알려준다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Match(a=i, b=j, size=k)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Match(a=0, b=4, size=5)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 대입해보면 a[i:i+k] == b[j:j+k]와 같다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;실행시간-측정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;실행시간 측정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행시간 측정하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;longest_palindrom_1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;수박수박수박맛있어수박&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 0.4620087565854192 ~ 0.5309993866831064&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;longest_palindrom_2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;수박수박수박맛있어수박&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 0.5870097083970904 ~ 0.5980109563097358&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;longest_palindrom_3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;수박수박수박맛있어수박&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 0.5979964043945074 ~ 0.9469949873164296&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;longest_palindrom_4&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;수박수박수박맛있어수박&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 0.4210014594718814 ~ 0.5869951564818621&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;</content:encoded></item></channel></rss>