{"componentChunkName":"component---src-templates-post-tsx","path":"/vue-2-mvvmpattern/","result":{"data":{"markdownRemark":{"html":"<p>이번 포스트에서는 앞선 포스트에서 만든 예제를 바탕으로 Vue.js의 <code class=\"language-text\">MVVM 패턴</code>을 설명해보았다.</p>\n<br>\n<h2 id=\"vuejs의-code-classlanguage-textmvvmcode-패턴\" style=\"position:relative;\"><a href=\"#vuejs%EC%9D%98-code-classlanguage-textmvvmcode-%ED%8C%A8%ED%84%B4\" aria-label=\"vuejs의 code classlanguage textmvvmcode 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue.js의 <code class=\"language-text\">MVVM</code> 패턴</h2>\n<p>Vue는 <code class=\"language-text\">Model</code>-<code class=\"language-text\">View</code>-<code class=\"language-text\">ViewModel</code>으로 구성된 <code class=\"language-text\">MVVM 패턴</code>을 따른다.</p>\n<p><strong>어플리케이션 로직과 UI를 분리하기 위해 설계된 패턴으로, UI를 가지는 응용 프로그램을 위한 아키텍처 패턴</strong>이다.</p>\n<p>장고에서 일반적으로 사용하는 <code class=\"language-text\">MVC 패턴</code>의 변형으로 뷰를 추상화하여 재사용하거나 테스트하기 쉽게 만든 것이다.</p>\n<p>모델과 뷰는 <code class=\"language-text\">MVC 패턴</code>과 동일하다. 다른 점은 <code class=\"language-text\">MVC 패턴</code>의 컨트롤러(Controller)가 <code class=\"language-text\">MVVM 패턴</code>에서는 뷰모델(ViewModel)의 역할을 한다는 것이다.</p>\n<br>\n<p><img src=\"https://i-msdn.sec.s-msft.com/dynimg/IC416621.png\" alt=\"msdn-mvvm\"></p>\n<ul>\n<li>\n<p>View</p>\n<ul>\n<li>유저 인터페이스.</li>\n<li>HTML/CSS/XML/YAML 등으로 작성</li>\n</ul>\n</li>\n<li>\n<p>View Model</p>\n<ul>\n<li>상태와 연산(명령)</li>\n<li>View의 실제 논리 및 데이터 흐름을 담당한다.</li>\n<li>상태 데이터를 변경하면 즉시 View에 반영된다.</li>\n</ul>\n</li>\n<li>\n<p>Model</p>\n<ul>\n<li>도메인 특화 데이터</li>\n</ul>\n</li>\n</ul>\n<br>\n<p><code class=\"language-text\">뷰모델(ViewModel)</code>은 '뷰의 모형'으로 이해하면 되며, 세 가지 특징이 있다.</p>\n<p>첫째, '추상화된 뷰 상태(ViewState)'로 존재한다. 뷰는 HTML과 CSS를 조합하여 사용자에게 시각적으로 접근한다면 뷰모델은 이 뷰를 <code class=\"language-text\">추상화</code>하여 텍스트 입력기 컨트롤을 추상화하거나 뷰 상태 컬렉션을 사용하는 식이다.\n추상화된 뷰모델은 구체적인 뷰에 대한 정보를 가지고 있지 않기 때문에 다양한 플랫폼에서 재사용할 수 있다는 장점이 있다.</p>\n<p>두번째로, 모델에서 제공하는 데이터를 사용자 인터페이스에 맞게 '상대적인 표현'으로 변환하여 표기하는 경우 뷰모델은 <code class=\"language-text\">값 변환기</code>(ValueConverters)를 가진다.</p>\n<p>마지막으로, 사용자가 서비스에서 특정 동작을 수행할 수 있도록 그 수단을 제공하는 것도 뷰모델의 <code class=\"language-text\">명령</code>(Commands) 기능이 있기 때문이다.</p>\n<p>그렇다면 추상화된 뷰와 실제 뷰를 연결해줄 수 있는 수단이 필요한데, <code class=\"language-text\">MVVM 패턴</code>에서는 기존의 컨트롤러가 했던 작업흐름 제어의 역할보다는 뷰와 뷰모델의 상태를 동기화해줄 <code class=\"language-text\">데이터 바인딩(Data Binding)</code>을 필요로 한다. 해당 요소를 통해 뷰모델이나 뷰가 변경되었을 경우 서로에게 변경사항이 반영되는 것이다.</p>\n<p>참고 1 - <a href=\"https://justhackem.wordpress.com/2017/03/05/mvvm-architectural-pattern/\" target=\"_blank\">MVVM 아키텍처 패턴 - 프로그래머 이규원의 블로그</a> (<del>꼭 읽어보길 추천한다</del>)</p>\n<p>참고 2 : <a href=\"https://msdn.microsoft.com/en-us/library/ff798384.aspx\" target=\"_blank\">Implementing the Model-View-ViewModel Pattern - MSDN</a></p>\n<br>\n<h2 id=\"예제에서-알아보기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C%EC%97%90%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"예제에서 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제에서 알아보기</h2>\n<p>이전 포스트에서 <code class=\"language-text\">simple</code> 템플릿으로 만든 html 파일 코드는 다음과 같다. 아래 파일은 html과 javascript 코드로 구성되어 있는 하나의 파일이다. (블록을 구별하기 쉽게 나누어 설명하였다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--index.html--></span>\n\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Start Vue.js<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue/dist/vue.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>simple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--보간법을 사용하여 문자열을 삽입하는 {{}} 형태의 템플릿표현식--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>`{{`message`}}`<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token comment\">// 데이터를 저장하는 model 객체 선언</span>\n    <span class=\"token keyword\">var</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      message <span class=\"token operator\">:</span> <span class=\"token string\">'첫번째 vue 앱이다!'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Vue 객체이자 ViewModel 객체인 simple 객체 선언</span>\n    <span class=\"token keyword\">var</span> simple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// HTML 요소를 나타냄</span>\n      el <span class=\"token operator\">:</span> <span class=\"token string\">'#simple'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 모델 객체 참조</span>\n      data <span class=\"token operator\">:</span> model\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>위에서 데이터(모델)가 변경되면 뷰모델 객체는 즉시 html 요소(뷰)에 반영한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 코드로 모든 작업은 반응형을 지향한다. 즉, 모델이 변경되면 뷰모델 객체를 통해 HTML DOM이 즉시 변경된다.</p>\n<p>위의 코드를 <code class=\"language-text\">MVVM 패턴</code>에 각각 대입해보면 다음과 같다.</p>\n<h3 id=\"1-view\" style=\"position:relative;\"><a href=\"#1-view\" aria-label=\"1 view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) View</h3>\n<p>사용자에게 보여줄 틀, 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>simple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<br>\n<h3 id=\"2-viewmodel\" style=\"position:relative;\"><a href=\"#2-viewmodel\" aria-label=\"2 viewmodel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) ViewModel</h3>\n<p>뷰 객체이자 뷰모델 객체를 선언하여 뷰(구조) 와 모델(데이터)를 연결하고 보여줄 정보를 제어.</p>\n<p>지금 예제에서는 Vue 객체가 데이터만 가지고 있지만 MVVM 패턴에서는 상태(state, 데이터)와 연산(operations, 메서드) 모두 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> simple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el <span class=\"token operator\">:</span> #simple<span class=\"token punctuation\">,</span>\n  data <span class=\"token operator\">:</span> model\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"3-model\" style=\"position:relative;\"><a href=\"#3-model\" aria-label=\"3 model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Model</h3>\n<p>보여줄 데이터를 담은 객체를 선언하고 저장.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  message <span class=\"token operator\">:</span> <span class=\"token string\">\"hello!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>Vue.js 프레임워크의 기본 동작원리를 파악하는 것은 매우 중요하다. 특히 ViewModel이 어떻게 뷰와 모델을 가지고 추상화되는지에 대해서는 심화적인 공부가 필요할 것 같다.</p>\n<p>해당 포스트는 웹에서 얻은 참고 자료들과 원형섭님의 [Vue.js Quick Start] 도서를 바탕으로 공부한 내용을 요약, 정리하였다.\n<br></p>","excerpt":"이번 포스트에서는 앞선 포스트에서 만든 예제를 바탕으로 Vue.js의 을 설명해보았다. Vue.js의  패턴 Vue는 --으로 구성된 을 따른다. 어플리케이션 로직과 UI를 분리하기 위해 설계된 패턴으로, UI를 가지는 응용 프로그램을 위한 아키텍처…","tableOfContents":"<ul>\n<li><a href=\"/vue-2-mvvmpattern/#vuejs%EC%9D%98-code-classlanguage-textmvvmcode-%ED%8C%A8%ED%84%B4\">Vue.js의 <code class=\"language-text\">MVVM</code> 패턴</a></li>\n<li>\n<p><a href=\"/vue-2-mvvmpattern/#%EC%98%88%EC%A0%9C%EC%97%90%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\">예제에서 알아보기</a></p>\n<ul>\n<li><a href=\"/vue-2-mvvmpattern/#1-view\">1) View</a></li>\n<li><a href=\"/vue-2-mvvmpattern/#2-viewmodel\">2) ViewModel</a></li>\n<li><a href=\"/vue-2-mvvmpattern/#3-model\">3) Model</a></li>\n</ul>\n</li>\n<li><a href=\"/vue-2-mvvmpattern/#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>","fields":{"slug":"/vue-2-mvvmpattern/"},"frontmatter":{"title":"Vue.js _ 2. vue파일에서 MVVM 패턴 구현하기","date":"Oct 16, 2017","tags":["Frontend","Vue.js"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/vue-2-mvvmpattern/","series":[],"lastmod":"2017-10-16"}},"staticQueryHashes":["2027115977","694178885"]}