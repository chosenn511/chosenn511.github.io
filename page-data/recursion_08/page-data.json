{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_08/","result":{"data":{"markdownRemark":{"html":"<p>8번은 한번에 계단을 오르는 갯수가 한정되어 있을 때 입력받은 계단의 수를 오르는 경우의 수를 구하는 문제이다. 해당 문제 또한 <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code> 그리고  재귀방식을 사용하여 풀어보았다.</p>\n<br>\n<h2 id=\"문제-8-계단-오르기\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-8-%EA%B3%84%EB%8B%A8-%EC%98%A4%EB%A5%B4%EA%B8%B0\" aria-label=\"문제 8 계단 오르기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 8) 계단 오르기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 8. 계단 오르기\n\n계단을 한 번에 1계단 또는 2계단 오를 수 있다. N단의 계단을 오를 수 있는 총 가지 수를 계산하는 문제를 재귀함수로 구현 (0 &lt; N &lt;= 30)\n\n- N = 2 일 경우\n    2가지 : (1,1), (2)\n- N = 3 일 경우\n    3가지 : (1,1,1),(1,2),(2,1)\n- N = 4 일 경우\n    5가지 : (1,1,1,1),(1,1,2),(1,2,1),(2,1,1),(2,2)\n- N = 5 일 경우\n    8가지 : (1,1,1,2),(1,2,2),(2,1,2),(1,1,1,1,1),(1,2,1,1),(2,1,1,1),(1,1,2,1),(2,2,1)</code></pre></div>\n<p>해당 문제는 계단의 수(<code class=\"language-text\">N</code>)가 증가할 때 그 경우의 수에 일정한 규칙의 수열을 반환한다. 총 계단의 수가 하나씩 늘어날 때마다 바로 직전과 그 전의 연속된 두 가지 경우의 수의 합을 반환한다. 즉, <code class=\"language-text\">f(n) = f(n - 1) + f(n - 2)</code>이라는 점화식이 성립하게 된다.</p>\n<p>이러한 규칙은 피보나치 수열이 가진 규칙과 동일하다. 피보나치에 더 자세히 알아보고자 한다면 이전에 포스팅했던 <a href=\"http://juliahwang.kr/algorism/2017/09/18/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EC%9D%91%EC%9A%A94.html\" target=\"_blank\">재귀 - 문제4. 피보나치 수열 출력</a>을 참고하기 바란다.</p>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<h3 id=\"1-while\" style=\"position:relative;\"><a href=\"#1-while\" aria-label=\"1 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) while</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">stair_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> b\n\n\n<span class=\"token comment\">### 실행 ###</span>\nstair_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># N = 4</span>\n<span class=\"token comment\"># 5</span></code></pre></div>\n<p><code class=\"language-text\">while</code>문을 사용한 경우 파이썬의 값 교환방식을 사용하여 주어진 범위의 <code class=\"language-text\">n</code>을 만족할 경우에 반복문을 유지하도록 하였다. 그리고 <code class=\"language-text\">n</code>의 값에서 <code class=\"language-text\">1</code>씩 빼준다. 피보나치 수열의 규칙에 따라, 직전 두 경우의 수의 합을 반환하므로 <code class=\"language-text\">b</code>를 리턴해준다.</p>\n<br>\n<h3 id=\"2-for\" style=\"position:relative;\"><a href=\"#2-for\" aria-label=\"2 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) for</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">stair_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> b\n\n\n<span class=\"token comment\">### 실행 ###</span>\nstair_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># N = 10</span>\n<span class=\"token comment\"># 89</span></code></pre></div>\n<p><code class=\"language-text\">for</code>문을 사용한 경우에는 입력받은 값을 숫자형으로 받은 후 초기 값을 각각 <code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>로 설정했다. (<del>피보나치 수열은 규칙상 시작하는 두 개의 수가 필요하다.</del>) 그리고 <code class=\"language-text\">n</code>번만큼 반복문을 돌고 난 후 <code class=\"language-text\">b</code>의 값을 리턴해준다.</p>\n<br>\n<h3 id=\"3-recursive-function\" style=\"position:relative;\"><a href=\"#3-recursive-function\" aria-label=\"3 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) recursive function</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># recursive 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">stair_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        r <span class=\"token operator\">=</span> stair_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> stair_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> r\n    <span class=\"token keyword\">return</span> stair_recursive<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nrecursive08<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># N = 10</span>\n<span class=\"token comment\"># 89</span></code></pre></div>\n<p>재귀방식을 사용한 경우에는 <code class=\"language-text\">n</code>을 숫자형으로 받았다. 피보나치 수열에서 얻을 수 있는 점화식을 사용하여 값을 리턴한다. 피보나치 수열을 재귀로 푸는 경우에는 탈출조건이 <code class=\"language-text\">n = 1</code>, <code class=\"language-text\">n = 0</code>으로 2개이므로 각각의 경우에 <code class=\"language-text\">1</code>을 반환하여 돌아오면서 계산을 마치도록 하였다.</p>\n<br>\n<h2 id=\"실행속도-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%86%8D%EB%8F%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행속도 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행속도 측정해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 작성한 메서드를 10,000,000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.</span>\n\n\n<span class=\"token comment\"># (1) while</span>\navg<span class=\"token punctuation\">(</span>bin_while<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2.5879223152733175</span>\n\n<span class=\"token comment\"># (2) for</span>\navg<span class=\"token punctuation\">(</span>bin_for<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2.605831767170457</span>\n\n<span class=\"token comment\"># (3) recursive</span>\navg<span class=\"token punctuation\">(</span>recursive07<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2.621976392198121</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"마치며--피보나치-수열의-값을-재귀로-구할-때\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0--%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%9E%AC%EA%B7%80%EB%A1%9C-%EA%B5%AC%ED%95%A0-%EB%95%8C\" aria-label=\"마치며  피보나치 수열의 값을 재귀로 구할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며 : 피보나치 수열의 값을 재귀로 구할 때</h2>\n<p>재귀로 풀 때는 값이 커질 수록 반복으로 푼 방식과 비교했을 때 실행속도에 큰 차이가 났다. 즉, 재귀의 경우에는 입력값이 커지면 커질수록 실행속도가 어마어마하게 증가한다. 왜 그럴까?</p>\n<p>앞서 구현해놓은 <code class=\"language-text\">recursive08()</code>에 입력값을 5라고 주자. 그러면 해당 메서드는 다음과 같은 계산을 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 편의상 재귀함수를 fib()로 표현한다.</span>\n<span class=\"token comment\"># fib(5)를 탈출조건을 만족할 때까지 풀어나가면 다음과 같다.</span>\n\nfib<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">fib(5)</code>를 구하는 데에 <code class=\"language-text\">fib(2)</code>를 3번이나 독립적으로 계산해서 구한다. 반복문을 사용할 경우 경우의 수가 많아봤자 <code class=\"language-text\">O(n)</code>번인 반면, 재귀를 사용하면 시간복잡도가 <code class=\"language-text\">O(2^(n/2))</code> 까지 증가한다. 또 입력값에서 탈출조건을 만날 때까지 연산해야 하는 재귀 함수가 2개이다. <strong>해당 값은 각각의 조건을 거슬러 내려갈 때마다 탈출 조건을 만날 때까지 연산한 후 다시 자신을 호출하게 되므로 작은 입력값을 줄 때도 시간이 오래 걸리게 되는 것이다.</strong></p>\n<p>그렇기 때문에 피보나치 수열의 경우에는 반복문을 사용하여 값을 구하는 것이 재귀를 사용한 것보다 훨씬 효율적이라고 할 수 있다.</p>\n<br>","excerpt":"8번은 한번에 계단을 오르는 갯수가 한정되어 있을 때 입력받은 계단의 수를 오르는 경우의 수를 구하는 문제이다. 해당 문제 또한 ,  그리고  재귀방식을 사용하여 풀어보았다. 문제 8) 계단 오르기 해당 문제는 계단의 수()가 증가할 때 그 경우의 …","tableOfContents":"<ul>\n<li><a href=\"/recursion_08/#%EB%AC%B8%EC%A0%9C-8-%EA%B3%84%EB%8B%A8-%EC%98%A4%EB%A5%B4%EA%B8%B0\">문제 8) 계단 오르기</a></li>\n<li>\n<p><a href=\"/recursion_08/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_08/#1-while\">(1) while</a></li>\n<li><a href=\"/recursion_08/#2-for\">(2) for</a></li>\n<li><a href=\"/recursion_08/#3-recursive-function\">(3) recursive function</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_08/#%EC%8B%A4%ED%96%89%EC%86%8D%EB%8F%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행속도 측정해보기</a></li>\n<li><a href=\"/recursion_08/#%EB%A7%88%EC%B9%98%EB%A9%B0--%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%EA%B0%92%EC%9D%84-%EC%9E%AC%EA%B7%80%EB%A1%9C-%EA%B5%AC%ED%95%A0-%EB%95%8C\">마치며 : 피보나치 수열의 값을 재귀로 구할 때</a></li>\n</ul>","fields":{"slug":"/recursion_08/"},"frontmatter":{"title":"Python _ Recursion8. 계단 오르기","date":"Sep 25, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_08/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-25"}},"staticQueryHashes":["2027115977","694178885"]}