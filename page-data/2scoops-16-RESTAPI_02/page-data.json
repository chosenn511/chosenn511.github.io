{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-16-RESTAPI_02/","result":{"data":{"markdownRemark":{"html":"<p>1부에서 REST API의 핵심인 http 프로토콜에 대한 전반적인 내용을 다루었다. 2부에서는 REST API를 효율적으로 설계하는 방법들에 대해 소개한다. 해당 포스트는 <code class=\"language-text\">Two Scoops of Django</code>의 16장 <code class=\"language-text\">REST API 구현하기</code>를 요약하여 작성하였다.</p>\n<br>\n<h2 id=\"1-api-컴포넌트를-어디에-위치시킬까\" style=\"position:relative;\"><a href=\"#1-api-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%96%B4%EB%94%94%EC%97%90-%EC%9C%84%EC%B9%98%EC%8B%9C%ED%82%AC%EA%B9%8C\" aria-label=\"1 api 컴포넌트를 어디에 위치시킬까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. API 컴포넌트를 어디에 위치시킬까?</h2>\n<p>API를 구현하는 것 자체는 비교적 수월하게 끝냈다고 하더라도 이러한 API를 하나의 프로젝트 내에서 관리하는 최적의 구조를 생각하기란 쉽지 않다. 새로운 API가 추가될 경우나 버전 관리를 할 경우에는 어떤 코드가 어디에 위치하느냐가 중요해진다.</p>\n<h3 id=\"작은-규모의-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%9D%80-%EA%B7%9C%EB%AA%A8%EC%9D%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"작은 규모의 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작은 규모의 프로젝트</h3>\n<p>제작해야할 API의 규모가 작은 대신 다양할 경우에는 작은 앱들이 여러 개 포함된 프로젝트가 생성된다. 이럴 때는 차라리 <strong>프로젝트의 모든 API 관련 코드(시리얼라이저, 렌더러, 뷰 등)가 하나의 앱 내에 위치하는 것이 훨씬 더 좋은 방법</strong>이다. 이러한 앱의 이름은 버전명으로 관리하여 버전별로 API를 관리할 수도 있다.</p>\n<p>그러나  이러한 구조는 API만 모아놓은 앱의 크기가 커졌을 때 문제가 될 수 있다. 따라서 프로젝트가 더이상 커지지 않을 경우(기능이 추가되지 않을 경우)에 적합하다고 할 수 있다. 또, API만 모아놓는 앱을 만들게 되면 API 관련 코드를 포함하지 않은 앱으로부터 리소스를 임포트해야할 경우 꼬이지 않게 주의해야한다.</p>\n<br>\n<h3 id=\"큰-규모의-프로젝트\" style=\"position:relative;\"><a href=\"#%ED%81%B0-%EA%B7%9C%EB%AA%A8%EC%9D%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"큰 규모의 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큰 규모의 프로젝트</h3>\n<p>하나의 <code class=\"language-text\">views</code> 모듈에 담기에 API가 너무 많은 경우에는 <code class=\"language-text\">views 폴더</code>를 생성하여 뷰클래스를 모듈별로 분할하는 것이 좋다. 하지만 이 경우 작게 나뉜 모듈들이 많아지면 혼란스럽고 관리하기 피곤해질 수 있다. 이 때는 뷰클래스의 크기와 갯수에 따라 적당히 위의 방법을 사용하는 것도 좋다.  </p>\n<br>\n<h2 id=\"2-api-뷰에서-로직은-빼자\" style=\"position:relative;\"><a href=\"#2-api-%EB%B7%B0%EC%97%90%EC%84%9C-%EB%A1%9C%EC%A7%81%EC%9D%80-%EB%B9%BC%EC%9E%90\" aria-label=\"2 api 뷰에서 로직은 빼자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. API 뷰에서 로직은 빼자</h2>\n<p>뷰는 요청에 대한 페이지를 렌더해준다. 뷰에 비지니스 로직을 추가하게 되면 REST API를 생성할 경우 새로운 기능을 추가할 때마다 그에 맞춰서 코드를 반복수정해야한다. 대신 <code class=\"language-text\">모델의 메서드</code>나 <code class=\"language-text\">매니저 메서드</code>로 로직을 컴포넌트화하여 뷰에서 호출해 사용하는 방식으로 변경하는 것이 <code class=\"language-text\">코드의 확장 및 재사용성 측면</code>에서 좋다. 장고의 뷰에서 기본적으로 사용하는 로직 이외에 비지니스 로직은 뷰 밖에서 처리하도록 한다.</p>\n<br>\n<h2 id=\"3-api-url-구조는-하나의-url로-묶어놓자\" style=\"position:relative;\"><a href=\"#3-api-url-%EA%B5%AC%EC%A1%B0%EB%8A%94-%ED%95%98%EB%82%98%EC%9D%98-url%EB%A1%9C-%EB%AC%B6%EC%96%B4%EB%86%93%EC%9E%90\" aria-label=\"3 api url 구조는 하나의 url로 묶어놓자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. API URL 구조는 하나의 URL로 묶어놓자</h2>\n<p>앱을 여러 개 만들어 작업하다보면 <code class=\"language-text\">view</code>들은 각각의 앱마다 생성하여 관리된다. view들이 앱마다 분산되어 있으므로 view를 호출하는 url을 한 군데에 모으는 방법으로 로직을 합칠 수 있다. 다음 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># core/api.py</span>\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\turl<span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">r'^api/'</span><span class=\"token punctuation\">,</span>\n\tinclude<span class=\"token punctuation\">(</span><span class=\"token string\">\"core.api\"</span><span class=\"token punctuation\">,</span>\n\tnamespace<span class=\"token operator\">=</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 패턴은 <code class=\"language-text\">core.api</code> 파일 안에 있는 모든 url 앞에 <code class=\"language-text\">api/</code>를 붙여 하나의 로직으로 묶어주는 역할을 한다. 이렇게 API 관련 URL만 모아서 정리해두면 버저닝이 훨씬 편리하다. API 업데이트시 하나로 묶어주는 패턴만 변경해주면 되기 때문이다.</p>\n<br>\n<h2 id=\"4-api-버저닝을-생활화하자\" style=\"position:relative;\"><a href=\"#4-api-%EB%B2%84%EC%A0%80%EB%8B%9D%EC%9D%84-%EC%83%9D%ED%99%9C%ED%99%94%ED%95%98%EC%9E%90\" aria-label=\"4 api 버저닝을 생활화하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. API 버저닝을 생활화하자</h2>\n<p>테스트를 진행할 경우, 작업한 API 별로 버전을 나누어두는 게 편리하다. 이는 <strong>API의 URL에 버전 정보를 표시하는 것</strong>으로 간단하게 처리할 수 있다.</p>\n<p>예를 들면 첫 url을 <code class=\"language-text\">/api/v1/flavors/</code>로 지정할 경우 다음 버전의 url은 <code class=\"language-text\">/api/v2/flavors/</code>로 칭할 수 있는 것이다. 이렇게 구성해놓으면 API 작업시 구별도 쉽고 무엇보다도 API를 변경할 때마다 기존 이용자들은 이전 버전의 API를 호출하여 사용하므로 새버전과 이전 버전의 API가 충돌하지 않는다.</p>\n<p>또, <code class=\"language-text\">flavors</code>앱과 <code class=\"language-text\">user</code>앱 중 <code class=\"language-text\">user</code>앱만 부분 업데이트를 할 경우에는 기존의 <code class=\"language-text\">/api/v1/flavors/</code>를 계속 사용하고 <code class=\"language-text\">/api/v2/users/</code>로 새로운 url을 사용할 수 있기 때문에 url을 구분하여 작업할 때 훨씬 편리하다.</p>\n<br>\n<h2 id=\"5-api-중단하기\" style=\"position:relative;\"><a href=\"#5-api-%EC%A4%91%EB%8B%A8%ED%95%98%EA%B8%B0\" aria-label=\"5 api 중단하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. API 중단하기</h2>\n<p>기존 API 사용자들이 있을 경우에는 사용자들에게 기존 API 중단 및  업데이트 사실을 인지할 수 있도록 충분한 시간을 줘야한다. 사용을 중지하기로 한 API라도 몇 달 간은 사용할 수 있게 해주는 것이 좋다. API를 업데이트할 경우를 대비하여 오픈소스 API이라 할 지라도 미리 사용자들의 이메일 주소를 수집해놓는 것이 좋다.</p>\n<h3 id=\"1-사용자에게-서비스-중지-예고하기\" style=\"position:relative;\"><a href=\"#1-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A4%91%EC%A7%80-%EC%98%88%EA%B3%A0%ED%95%98%EA%B8%B0\" aria-label=\"1 사용자에게 서비스 중지 예고하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 사용자에게 서비스 중지 예고하기</h3>\n<p>도서에 따르면 6개월 정도의 기간이 적당하고 최소 한 달 전에 알려주는 것이 좋다고 한다. API를 사용할 수 있는 메인 사이트, 이메일, 소셜 미디어, 블로그 등으로 알려주는 것이 좋다. 알림을 많이 보내서 일어날 일에 대해 걱정이 된다면 중지 사실을 모르고 일어날 문제들보다는 영향이 미미하므로 최대한 알림을 많이 보내주는 것이 좋다.</p>\n<br>\n<h3 id=\"2-code-classlanguage-text410-상태코드-뷰code로-api-교체하기\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-text410-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C-%EB%B7%B0code%EB%A1%9C-api-%EA%B5%90%EC%B2%B4%ED%95%98%EA%B8%B0\" aria-label=\"2 code classlanguage text410 상태코드 뷰code로 api 교체하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) <code class=\"language-text\">410 상태코드 뷰</code>로 API 교체하기</h3>\n<p>앞에서 기억해야 할 HTTP 상태코드로  <code class=\"language-text\">410 GONE</code>을 소개했다. 최종적으로 API가 중지되었을 때 간단하게 410 코드를 사용한 뷰를 이전 버전의 url에 연결해준다. 뷰에는 새로운 API에 대한 정보 및 문서로의 링크를 알려주도록 작성하면 된다.</p>\n<br>\n<h2 id=\"7-api-접속-제한\" style=\"position:relative;\"><a href=\"#7-api-%EC%A0%91%EC%86%8D-%EC%A0%9C%ED%95%9C\" aria-label=\"7 api 접속 제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. API 접속 제한</h2>\n<p><code class=\"language-text\">접속 제한</code>이란 <strong>한 명의 사용자가 주어진 시간에 얼마 이상의 요청을 보낼 때 이를 제어하는 것</strong>을 말한다. REST 프레임워크는 반드시 API 접속 제한 기능을 제공하는 것이 좋다. API를 유료로 서비스하는 경우에는 요청에 제한을 둠으로서 가격 정책을 세울 수도 있을 것이다.</p>\n<p><strong>접속 제한은 웹서버에서 처리할 수도...</strong></p>\n<p><code class=\"language-text\">nginx</code>나 <code class=\"language-text\">apache</code>의 접속 제한을 이용하여 API 사용을 제어할 수 있다. 하지만 파이썬 코드로부터 얻을 수 있는 기능적인 여러 면을 잃어버린다. 해당 부분은 좀 더 공부를 한 후 설명을 보충하도록 할 예정이다.</p>\n<br>\n<h2 id=\"8-내가-만든-api를-어떻게-알릴까\" style=\"position:relative;\"><a href=\"#8-%EB%82%B4%EA%B0%80-%EB%A7%8C%EB%93%A0-api%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%95%8C%EB%A6%B4%EA%B9%8C\" aria-label=\"8 내가 만든 api를 어떻게 알릴까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 내가 만든 API를 어떻게 알릴까?</h2>\n<h3 id=\"1-api-문서-활용\" style=\"position:relative;\"><a href=\"#1-api-%EB%AC%B8%EC%84%9C-%ED%99%9C%EC%9A%A9\" aria-label=\"1 api 문서 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. API 문서 활용</h3>\n<p>자신이 만든 API를 다른 사용자가 사용할 수 있도록 하려면 API에 대한 자세한 설명 및 사용방법을 담은 문서 제작은 필수다. 개인적으로는 <code class=\"language-text\">Gitbook</code>을 사용했는데 가끔씩 오류가 발생해 사용이 불편하다는 단점이 있었다. 이외에도 <code class=\"language-text\">django-rest-framework</code>나 마크다운으로 제공해도 된다.</p>\n<br>\n<h3 id=\"클라이언트-sdk-제공하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-sdk-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\" aria-label=\"클라이언트 sdk 제공하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트 SDK 제공하기</h3>\n<p>문서 작성이 완료되었다면 이제는 API를 좀더 널리 알리기 위해 여러 언어를 지원하는 <code class=\"language-text\">SDK(software development kit)</code>을 사용할 수 있다. 도서에 따르면 다음의 언어는 필수적으로 지원하는 것이 좋다고 한다.</p>\n<ul>\n<li>파이썬</li>\n<li>자바스크립트</li>\n<li>루비</li>\n<li>PHP</li>\n<li>고(Go)</li>\n<li>자바</li>\n</ul>\n<p>SDK 라이브러리를 이용하여 데모 프로젝트를 구현해보면 사용자가 실제로 API를 어떻게 경험하는지 알 수 있게 된다. (<del>개인적으로는 클라이언트 SDK 만들기에 대한 공부를 해봐야겠다.</del>)</p>\n<br>","excerpt":"1부에서 REST API의 핵심인 http 프로토콜에 대한 전반적인 내용을 다루었다. 2부에서는 REST API를 효율적으로 설계하는 방법들에 대해 소개한다. 해당 포스트는 의 16장 를 요약하여 작성하였다. 1. API 컴포넌트를 어디에 위치시킬까…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2scoops-16-RESTAPI_02/#1-api-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%96%B4%EB%94%94%EC%97%90-%EC%9C%84%EC%B9%98%EC%8B%9C%ED%82%AC%EA%B9%8C\">1. API 컴포넌트를 어디에 위치시킬까?</a></p>\n<ul>\n<li><a href=\"/2scoops-16-RESTAPI_02/#%EC%9E%91%EC%9D%80-%EA%B7%9C%EB%AA%A8%EC%9D%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">작은 규모의 프로젝트</a></li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#%ED%81%B0-%EA%B7%9C%EB%AA%A8%EC%9D%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">큰 규모의 프로젝트</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#2-api-%EB%B7%B0%EC%97%90%EC%84%9C-%EB%A1%9C%EC%A7%81%EC%9D%80-%EB%B9%BC%EC%9E%90\">2. API 뷰에서 로직은 빼자</a></li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#3-api-url-%EA%B5%AC%EC%A1%B0%EB%8A%94-%ED%95%98%EB%82%98%EC%9D%98-url%EB%A1%9C-%EB%AC%B6%EC%96%B4%EB%86%93%EC%9E%90\">3. API URL 구조는 하나의 URL로 묶어놓자</a></li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#4-api-%EB%B2%84%EC%A0%80%EB%8B%9D%EC%9D%84-%EC%83%9D%ED%99%9C%ED%99%94%ED%95%98%EC%9E%90\">4. API 버저닝을 생활화하자</a></li>\n<li>\n<p><a href=\"/2scoops-16-RESTAPI_02/#5-api-%EC%A4%91%EB%8B%A8%ED%95%98%EA%B8%B0\">5. API 중단하기</a></p>\n<ul>\n<li><a href=\"/2scoops-16-RESTAPI_02/#1-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A4%91%EC%A7%80-%EC%98%88%EA%B3%A0%ED%95%98%EA%B8%B0\">1) 사용자에게 서비스 중지 예고하기</a></li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#2-code-classlanguage-text410-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C-%EB%B7%B0code%EB%A1%9C-api-%EA%B5%90%EC%B2%B4%ED%95%98%EA%B8%B0\">2) <code class=\"language-text\">410 상태코드 뷰</code>로 API 교체하기</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#7-api-%EC%A0%91%EC%86%8D-%EC%A0%9C%ED%95%9C\">7. API 접속 제한</a></li>\n<li>\n<p><a href=\"/2scoops-16-RESTAPI_02/#8-%EB%82%B4%EA%B0%80-%EB%A7%8C%EB%93%A0-api%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%95%8C%EB%A6%B4%EA%B9%8C\">8. 내가 만든 API를 어떻게 알릴까?</a></p>\n<ul>\n<li><a href=\"/2scoops-16-RESTAPI_02/#1-api-%EB%AC%B8%EC%84%9C-%ED%99%9C%EC%9A%A9\">1. API 문서 활용</a></li>\n<li><a href=\"/2scoops-16-RESTAPI_02/#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-sdk-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\">클라이언트 SDK 제공하기</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/2scoops-16-RESTAPI_02/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _ 16장. REST API 구현하기 <2부>","date":"Sep 03, 2017","tags":["book review","Django","REST api","HTTP"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-16-RESTAPI_02/","series":[{"slug":"/2scoops-16-RESTAPI_01/","title":"BookReview > Two Scoops of Django _ 16장. REST API 구현하기 <1부>","num":1},{"slug":"/2scoops-16-RESTAPI_02/","title":"BookReview > Two Scoops of Django _ 16장. REST API 구현하기 <2부>","num":2}],"lastmod":"2017-09-03"}},"staticQueryHashes":["2027115977","694178885"]}