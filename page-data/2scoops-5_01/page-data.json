{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-5_01/","result":{"data":{"markdownRemark":{"html":"<p>장고 1.8에서는 140가지 설정을 제어할 수 있는 세팅 모듈과 버전별 필요 패키지를 기록할 수 있는 <code class=\"language-text\">requirements</code> 모듈을 통해 프로젝트를 실행 환경별로 구동한다. 이번 포스트에서는 실행 환경별 최선의 설정 관리법에 대해 알아보았다. 2부에서는 그에 따라 요구되는 패키지의 버전 관리와 기타 미디어 파일 경로 설정에 대해 알아볼 것이다.</p>\n<br>\n<h2 id=\"환경별-최선의-settings-모듈-관리하기\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%84-%EC%B5%9C%EC%84%A0%EC%9D%98-settings-%EB%AA%A8%EB%93%88-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"환경별 최선의 settings 모듈 관리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경별 최선의 settings 모듈 관리하기</h2>\n<p>장고에서 최선의 설정 방법은 다음을 따른다.</p>\n<ul>\n<li>버전 컨트롤 시스템(ex_ <code class=\"language-text\">git</code>)으로 모든 설정파일을 관리한다. 어떤 부분을 변경했는지가 문서화되어야 협업환경에서 일어나는 혼란을 방지할 수 있다.</li>\n<li>반복되는 설정은 기본 설정파일로 관리하고, 실행환경별로 추가적인 세팅을 나누어 관리한다.</li>\n<li>암호 및 비밀키 등은 버전컨트롤 시스템에서 제외하여야 한다.</li>\n</ul>\n<br>\n<h3 id=\"1-버전관리를-반드시-적용하자\" style=\"position:relative;\"><a href=\"#1-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"1 버전관리를 반드시 적용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 버전관리를 반드시 적용하자.</h3>\n<p>버전 관리에 포함되지 않는 <code class=\"language-text\">local_settings 안티패턴</code>을 사용한 적도 있다. 즉, 개발자에게만 필요한 설정으로, 스테이징이나 운영서버 및 디버그 환경에 대한 설정들 말이다. 이외에도 버전 컨트롤 시스템에 등록하면 안되는 비밀 값이나 개인 정보 등은 로컬 세팅에 등록하여 사용해왔다.</p>\n<p>예를 들어, <code class=\"language-text\">local_settings.py</code>라는 모듈을 생성하여 파일을 각각의 서버나 개발머신에 위치시킨 후 버전 컨트롤 시스템에서 제외해버리면 개발환경에 특화된 설정을 개인적으로 변경할 수 있는 것이다. 또, 스테이징 서버와 개발 서버에서는 버전 컨트롤 관리에 구애받지 않고 설정을 유지할 수 있었다. 하지만 다음의 문제들로 인해 이러한 로컬세팅 설정방식을 지양해야 한다.</p>\n<ul>\n<li>모든 머신에 버전컨트롤에 기록되지 않는 코드가 존재하므로 개발자 별로 공통된 세팅을 적용할 수 없다.</li>\n<li>운영환경에서 발생하는 버그를 로컬에서 구현해보지만 설정이 달라 동일하게 적용되지 않는다.</li>\n<li>로컬환경의 <code class=\"language-text\">local_settings</code> 때문에 생긴 버그가 운영환경에서는 보이지 않는다.</li>\n<li>개발자가 해당 파일을 복사해서 자신만의 설정을 붙여 사용할 경우 문제는 커진다.</li>\n</ul>\n<br>\n<h3 id=\"2-버전-관리의-예외--비밀-정보\" style=\"position:relative;\"><a href=\"#2-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%98%88%EC%99%B8--%EB%B9%84%EB%B0%80-%EC%A0%95%EB%B3%B4\" aria-label=\"2 버전 관리의 예외  비밀 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 버전 관리의 예외 : 비밀 정보</h3>\n<p>장고 프로젝트 자체의 시크릿 키 같은 경우에는 절대로 버전 컨트롤 시스템에 노출되어선 안된다. 해당 <code class=\"language-text\">SECRET_KEY</code> 세팅은 장고의 암호화 인증 기능에 사용되고 이 세팅값은 다른 프로젝트의 시크릿 키 값과 겹쳐서는 안된다. 이 키가 외부에 노출되면 장고의 보안 기능을 무력화시킬 수 있기 때문이다. 이 뿐만이 아니라 배포에 사용되는 AWS 키, OAuth 토큰, 여러 데이터베이스 설정정보 등도 마찬가지다.</p>\n<p>이러한 정보를 버전컨트롤 시스템에서 제외시키는 방법에는 여러가지가 있다. 이는 해당 포스트 내 <strong>코드에서 설정 분리하기</strong> 파트에서 더 자세히 다루었다.</p>\n<br>\n<h3 id=\"3-여러-개의-세팅파일로-설정-분리하기\" style=\"position:relative;\"><a href=\"#3-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EC%84%B8%ED%8C%85%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"3 여러 개의 세팅파일로 설정 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 여러 개의 세팅파일로 설정 분리하기</h3>\n<p>설정을 하나의 파일로 사용하기보다는 <code class=\"language-text\">settings</code> 모듈을 만들고 내부에 환경별로 파일을 만들어 분리하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">settings<span class=\"token operator\">/</span>\n  __init__<span class=\"token punctuation\">.</span>py\n  <span class=\"token comment\"># 프로젝트 내 모든 인스턴스에 적용되는 공통 설정</span>\n  base<span class=\"token punctuation\">.</span>py\n\n  <span class=\"token comment\"># 로컬환경용. 개발 전용 로컬파일</span>\n  local<span class=\"token punctuation\">.</span>py\n\n  <span class=\"token comment\"># 운영환경서버 내 프라이빗 버전(관리자페이지)의 설정</span>\n  staging<span class=\"token punctuation\">.</span>py\n\n  <span class=\"token comment\"># 테스트러너, 인메모리 DB, 로그설정</span>\n  test<span class=\"token punctuation\">.</span>py\n\n  <span class=\"token comment\"># 운영서버의 실제 운영 설정파일</span>\n  production<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p><strong>ci.py</strong></p>\n<p>큰 규모의 프로젝트에 특수한 목적으로만 쓰이는 서버가 있을 경우에는 각각의 목적에 맞는 커스텀 세팅 파일을 만들어서 사용한다. 이 <code class=\"language-text\">ci.py</code>파일은 지속적 통합 서버에서 사용된다.</p>\n<br>\n<h3 id=\"4-세팅파일-적용하기\" style=\"position:relative;\"><a href=\"#4-%EC%84%B8%ED%8C%85%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"4 세팅파일 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 세팅파일 적용하기</h3>\n<p>위와 같이 분리된 세팅파일은 터미널에서 다음과 같이 지정하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 로컬 세팅파일을 사용하여 서버를 실행할 경우</span>\n$ python manage<span class=\"token punctuation\">.</span>py runserver <span class=\"token operator\">--</span>settings=config<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>local</code></pre></div>\n<br>\n<p>하지만 계속해서 위와 같은 명령어를 입력하기가 번거로울 수 있다. 따라서 특정 쉘에서 항상 같은 세팅파일을 적용하게 하려면 <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code>과 <code class=\"language-text\">PYTHON_PATH</code> 환경변수를 지정하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># DJANGO_SETTINGS_MODULE을 local 서버로 설정</span>\n$ export DJANGO_SETTINGS_MODULE=config<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>local</code></pre></div>\n<p><code class=\"language-text\">virtualenv</code>를 사용할 경우 <code class=\"language-text\">postactivate</code> 스크립트에 위의 명령어를 삽입하여 저장하면 <code class=\"language-text\">virtualenv</code>를 실행할 때 자동으로 해당 설정을 적용시켜 사용할 수 있다.</p>\n<br>\n<h3 id=\"5-다중-개발환경-세팅\" style=\"position:relative;\"><a href=\"#5-%EB%8B%A4%EC%A4%91-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\" aria-label=\"5 다중 개발환경 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 다중 개발환경 세팅</h3>\n<p>세팅파일에서 공유하여야하는 기본 <code class=\"language-text\">base.py</code> 설정파일은 버전 컨트롤 시스템에 등록하여 모두가 같은 설정을 사용할 수 있게끔 한다. 장고 세팅파일에서 <code class=\"language-text\">base.py</code>는 유일하게 <code class=\"language-text\">import *</code> 구문을 사용해도 되는 파일이다. 세팅파일의 모든 네임스페이스는 전부 오버라이드해서 사용하기 때문이다.</p>\n<p>한편으로, 프로젝트에 참여한 협업자 각각이 자기만의 설정 환경을 사용하고 싶을 때도 있다. 이 때는 <strong>개개인의 필요에 의해 작성된 파일명을 <code class=\"language-text\">dev_julia.py</code>, <code class=\"language-text\">dev_katie.py</code> 처럼 이름을 붙여 이 또한 버전 컨트롤 시스템에서 관리될 수 있도록</strong> 한다. 이렇게 하면 팀원끼리 코드를 공유할 수도 있고 설정이 달라 생기는 차이를 빨리 발견할 수 있기 때문이다.</p>\n<br>\n<h2 id=\"코드와-설정-분리하기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%99%80-%EC%84%A4%EC%A0%95-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"코드와 설정 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드와 설정 분리하기</h2>\n<p>앞서 이야기한 <code class=\"language-text\">local_settings 안티 패턴</code>을 사용한 이유는 서버 구동에 필요한 개인정보 및 비밀 키 등을 버전 컨트롤 시스템에서 제외하기 위함이었다. 이러한 값들은 반드시 세팅 파일에 들어가야하기 때문인데, 설정파일 내의 코드는 그대로 두고 값들만 따로 빼서 관리되지 않게 할 수 있다.</p>\n<ul>\n<li>비밀 키는 반드시 외부에서 알 수 없어야 하므로 버전 컨트롤 시스템에 포함시키면 안된다.</li>\n<li>비밀 키는 설정값들이지 코드가 아니다.</li>\n<li>설정은 배포 환경에 따라 다르지만 코드는 그렇지 않다.</li>\n<li>PaaS 환경에서는 독립된 서버에서 코드를 수정하도록 허용하지 않고 있다.</li>\n</ul>\n<p>그렇다면 <strong>설정과 코드의 차이</strong>는 무엇일까? 설정에는 다음과 같은 값을 포함한다.</p>\n<ul>\n<li>데이터베이스, 캐시 등의 백엔드 서비스 리소스 핸들</li>\n<li>아마존 S3나 트위터 등의 외부 서비스 인증정보</li>\n<li>배포된 호스트의 이름 및 배포 환경마다 달라지는 값들</li>\n</ul>\n<p><strong>앱은 설정을 상수로 코드에 저장하곤 하는데, 배포 관련 프로젝트 설정 지침인 <code class=\"language-text\">Twelve-factor app</code>을 참고하면 설정을 코드에서 엄격하게 분리하는 것이 좋다</strong>고 한다. 즉, 어떠한 인증정보나 비밀 값들도 유출되지 않고 코드베이스가 공개될 수 있다면 이러한 원칙을 지킨 것이다.</p>\n<br>\n<p><strong>분리된 설정값들은 <code class=\"language-text\">환경변수</code>를 이용하여 코드 변경 없이 배포시 쉽게 변경할 수 있도록 관리</strong>하라고 충고하고 있다. 이를 통해 얻는 장점은 다음과 같다.</p>\n<ul>\n<li>비밀 키를 세팅파일을 환경변수에 넣으면 걱정없이 세팅파일을 버전 컨트롤 시스템에 올릴 수 있다.</li>\n<li>settings_local 파일을 팀원 각자가 만들어 쓰는 것이 아니라 버전 컨트롤 시스템에서 관리되는 하나의 파일로 공유하여 쓸 수 있다.</li>\n<li>파이썬 코드 수정 없이 프로젝트 코드를 쉽게 배치할 수 있다.</li>\n<li>대부분의 PaaS 기반 시스템들이 환경변수 사용을 장려하고 있다.</li>\n</ul>\n<p>환경변수를 사용함으로서 얻는 효과는 <a href=\"https://12factor.net/ko/config\" target=\"_blank\">더 읽어보기(12factor app 홈페이지)</a>를 참고하기 바란다.</p>\n<br>\n<h3 id=\"1-로컬에서-환경변수-설정하기\" style=\"position:relative;\"><a href=\"#1-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"1 로컬에서 환경변수 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 로컬에서 환경변수 설정하기</h3>\n<p>맥과 리눅스의 경우에는 다음 명령어를 <code class=\"language-text\">bashrc</code>, <code class=\"language-text\">.bash_profile</code>, <code class=\"language-text\">.profile</code> 등에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ export &lt;KEY>=&lt;value>\n$ export SOME_SECRET_KEY=fdsjlfk<span class=\"token operator\">-</span>sdfjlsfjl<span class=\"token operator\">-</span>dsfjlsdkfj</code></pre></div>\n<br>\n<p>윈도우 시스템에서는 명령행(<code class=\"language-text\">cmd.exe</code>)에서 <code class=\"language-text\">setx</code> 명령어를 사용하여 하나하나 설정해준 후 명령창을 재실행해주어야 한다. 이는 매우 번거로우므로 <code class=\"language-text\">virtualenv</code> 내 <code class=\"language-text\">bin/activate.bat</code> 스크립트에 원하는 환경변수를 추가해주면 된다. 그러면 <code class=\"language-text\">virtualenv</code>가 실행되면서 설정이 바로 적용될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">> <span class=\"token function\">set</span> SOME_SECRET_KEY=djlfsdjlk<span class=\"token operator\">-</span>sdfjlsdfjlkds<span class=\"token operator\">-</span>sdkfjslkfj</code></pre></div>\n<br>\n<h3 id=\"2-운영환경에서-환경변수-설정하기\" style=\"position:relative;\"><a href=\"#2-%EC%9A%B4%EC%98%81%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"2 운영환경에서 환경변수 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 운영환경에서 환경변수 설정하기</h3>\n<p>운영 환경은 사용하는 배포 도구나 서버 설정에 따라 다른 방법을 사용하지만 파이썬을 사용할 경우 다음과 같이 지정하고 불러와 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ export DJANGO_SETTINGS_MODULE=config<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>local\n$ python manage<span class=\"token punctuation\">.</span>py shell_plus  <span class=\"token comment\"># 환경변수가 적용된 인터프리터 실행</span>\nIn <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>: import os\n\nIn <span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>: os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"DJANGO_SETTINGS_MODULE\"</span><span class=\"token punctuation\">]</span>\nOut<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>: <span class=\"token string\">'config.settings.local'</span></code></pre></div>\n<p>위 방식을 활용하여 설정 파일 내에서 환경변수 값을 불러온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings/production.py</span>\n\n<span class=\"token keyword\">import</span> os\nSOME_SECRET_KEY <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"SOME_SECRET_KEY\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<h3 id=\"3-비밀키가-존재하지-않을-때\" style=\"position:relative;\"><a href=\"#3-%EB%B9%84%EB%B0%80%ED%82%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C\" aria-label=\"3 비밀키가 존재하지 않을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 비밀키가 존재하지 않을 때?</h3>\n<p>위의 방식으로 설정파일에서 비밀 값들을 임포트해와 사용한다. 그러나 운영환경에서 불러올 환경변수가 지정되어 있지 않다면 에러가 발생하고 프로젝트 실행에 문제가 생긴다. 또, 임포트해올 값들이 많을 경우 단순 <code class=\"language-text\">KeyError</code> 메세지는 별 도움이 되지 않을 것이다. 따라서 환경변수가 존재하지 않을 때 원인을 알려주는 예외처리가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings/base.py</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ImproperlyConfigured\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_env_variable</span><span class=\"token punctuation\">(</span>var_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    환경변수를 가져오거나 커스텀 예외문구를 반환\n    \"\"\"</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span>var_name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n        error_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Set the {} environ variable\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>var_name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> ImproperlyConfigured<span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">)</span>\n\nSOME_SECRET_KEY <span class=\"token operator\">=</span> get_env_variable<span class=\"token punctuation\">(</span><span class=\"token string\">\"SOME_SECRET_KEY\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음 메서드를 실행하여 환경변수가 존재하지 않을 경우에는 다음과 같이 커스텀 에러메세지를 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>ImproperlyConfigured: <span class=\"token function\">Set</span> the SOME_SECRET_KEY environ variable<span class=\"token punctuation\">.</span></code></pre></div>\n<br>\n<p><strong>세팅 모듈에서 장고 컴포넌트 임포트는 금물!</strong></p>\n<p>어떤 세팅파일에서라도 장고 컴포넌트는 임포트하면 안된다. 위에서 사용한 <code class=\"language-text\">ImproperlyConfigured</code>는 에러메세지에 문제가 되는 세팅 이름을 표시해주기 위하여 예외적으로 사용해 준 것이다. 일반적으로 <strong>장고로부터 무언가를 설정파일에 임포트할 일은 아예 없고 해서도 안된다!</strong></p>\n<br>\n<p><strong>manage.py 대신 django-admin.py를 사용하자</strong></p>\n<p><a href=\"https://docs.djangoproject.com/en/1.8/ref/django-admin/\" target=\"_blank\">장고 공식문서 - django-admin</a>에 따르면 여러 세팅 파일이 있을 경우에는 <code class=\"language-text\">django-admin.py</code>를 사용하여 환경변수 세팅 명령어를 실행하는 것을 추천하고있다. 하지만 <code class=\"language-text\">manage.py</code>를 사용해도 무방하다. 원문은 아래를 참고하기 바란다.</p>\n<blockquote>\n<p>Generally, when working on a single Django project, it’s easier to use manage.py than django-admin. <strong>If you need to switch between multiple Django settings files, use django-admin with DJANGO<em>SETTINGS</em>MODULE or the --settings command line option.</strong></p>\n</blockquote>\n<br>\n<h2 id=\"환경변수를-사용할-수-없을-때\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EC%9D%84-%EB%95%8C\" aria-label=\"환경변수를 사용할 수 없을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경변수를 사용할 수 없을 때</h2>\n<p>환경변수를 사용할 경우에는 저장할 비밀정보를 어떻게 관리할 것인지와 어떤 배포환경을 적용할 것인지를 먼저 생각해야한다. 특히 아파치는 독립적인 환경변수 시스템을 가지고 있기 때문에 운영체제에서 설정해준 환경변수가 운영환경에서 작동하지 않을 것이다. 또, <code class=\"language-text\">Nginx</code>를 사용할 경우에도 환경 변수를 사용하는 방식이 작동하지 않을 수 있다.</p>\n<p>이 떄는 <code class=\"language-text\">local_settings 안티패턴</code> 보다는 <strong>비밀파일 패턴</strong>을 사용한다. 즉, 장고에서 실행되지 않는 형식의 파일 (<code class=\"language-text\">JSON</code>, <code class=\"language-text\">Config</code>, <code class=\"language-text\">YAML</code>, <code class=\"language-text\">XML</code> 등의 파일)을 버전 컨트롤 시스템에서 제외하여 사용하는 것이다.</p>\n<br>\n<h3 id=\"json-파일-이용하기\" style=\"position:relative;\"><a href=\"#json-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"json 파일 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON 파일 이용하기</h3>\n<p>다음과 같이 설정값만 저장할 <code class=\"language-text\">secret.json</code> 파일을 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DJANGO_KEY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;VALUE>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FACEBOOK_API_KEY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;VALUE>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 값을 임포트하여 사용하기 위해서는 다음과 같이 세팅 모듈에 코드를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># setings/base.py</span>\n\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ImproperlyConfigured\n\n\n<span class=\"token comment\"># JSON 기반 비밀 모듈 (도서)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret.json\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    secrets <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 상대 임포트를 위해 지정해준 BASE_DIR 경로</span>\nBASE_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 저장소루트 경로</span>\nROOT_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 비밀값들이 저장된 폴더 경로</span>\nSECRET_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ROOT_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'.secret'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 시크릿 JSON 파일의 위치</span>\nSECRET_FILE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>SECRET_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'secret.json'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 시크릿 파일 내부를 읽어와 그 값을 저장 (실사용 방식)</span>\nsecrets <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>SECRET_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_secret</span><span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">,</span> secrets<span class=\"token operator\">=</span>secrets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    비밀변수를 가져오거나 명시적 예외를 반환\n    \"\"\"</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> secrets<span class=\"token punctuation\">[</span>setting<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n        error_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Set the {} environ variable\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> ImproperlyConfigured<span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">)</span>\n\nSECRET_KEY <span class=\"token operator\">=</span> get_secret<span class=\"token punctuation\">(</span><span class=\"token string\">\"DJANGO_KEY\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>이번 장에서는 프로젝트 환경에 맞는 설정과 관련한 내용을 공부했다. 이번 포스트의 중점은 협업시 필요한 기본 설정을 최대한 버전 컨트롤 시스템에서 관리할 수 있도록 하자는 것이다. 한편, 보안에 대비하여 공개되어서는 안되는 설정값들을 따로 관리하여야 한다.</p>\n<p><a href=\"http://juliahwang.kr/%EB%8F%84%EC%84%9C%20%EB%A6%AC%EB%B7%B0/2017/09/29/2scoops-5-settings%EC%99%80requirements2.html\" target=\"_blank\">5. settings와 requirements &#x3C;2부></a>에서는 설정환경 별로 필요한 패키지와 버전을 관리하는 <code class=\"language-text\">requirements</code>에 대해 알아볼 것이다. 또, 설정에서 템플릿 및 미디어 파일에 대한 경로를 설정하는 방법에 대해서도 알아보자.</p>\n <br>","excerpt":"장고 1.8에서는 140가지 설정을 제어할 수 있는 세팅 모듈과 버전별 필요 패키지를 기록할 수 있는  모듈을 통해 프로젝트를 실행 환경별로 구동한다. 이번 포스트에서는 실행 환경별 최선의 설정 관리법에 대해 알아보았다. 2부에서는 그에 따라 요구되…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2scoops-5_01/#%ED%99%98%EA%B2%BD%EB%B3%84-%EC%B5%9C%EC%84%A0%EC%9D%98-settings-%EB%AA%A8%EB%93%88-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">환경별 최선의 settings 모듈 관리하기</a></p>\n<ul>\n<li><a href=\"/2scoops-5_01/#1-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EC%9E%90\">1. 버전관리를 반드시 적용하자.</a></li>\n<li><a href=\"/2scoops-5_01/#2-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%98%88%EC%99%B8--%EB%B9%84%EB%B0%80-%EC%A0%95%EB%B3%B4\">2. 버전 관리의 예외 : 비밀 정보</a></li>\n<li><a href=\"/2scoops-5_01/#3-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EC%84%B8%ED%8C%85%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">3. 여러 개의 세팅파일로 설정 분리하기</a></li>\n<li><a href=\"/2scoops-5_01/#4-%EC%84%B8%ED%8C%85%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">4. 세팅파일 적용하기</a></li>\n<li><a href=\"/2scoops-5_01/#5-%EB%8B%A4%EC%A4%91-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\">5. 다중 개발환경 세팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2scoops-5_01/#%EC%BD%94%EB%93%9C%EC%99%80-%EC%84%A4%EC%A0%95-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">코드와 설정 분리하기</a></p>\n<ul>\n<li><a href=\"/2scoops-5_01/#1-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">1. 로컬에서 환경변수 설정하기</a></li>\n<li><a href=\"/2scoops-5_01/#2-%EC%9A%B4%EC%98%81%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">2. 운영환경에서 환경변수 설정하기</a></li>\n<li><a href=\"/2scoops-5_01/#3-%EB%B9%84%EB%B0%80%ED%82%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C\">3. 비밀키가 존재하지 않을 때?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2scoops-5_01/#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EC%9D%84-%EB%95%8C\">환경변수를 사용할 수 없을 때</a></p>\n<ul>\n<li><a href=\"/2scoops-5_01/#json-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">JSON 파일 이용하기</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-5_01/#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>","fields":{"slug":"/2scoops-5_01/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _ 5장. settings와 requirements 파일 <1부>","date":"Sep 28, 2017","tags":["book review","Django"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-5_01/","series":[{"slug":"/2scoops-5_01/","title":"BookReview > Two Scoops of Django _ 5장. settings와 requirements 파일 <1부>","num":1},{"slug":"/2scoops-5_02/","title":"BookReview > Two Scoops of Django _ 5장. settings와 requirements 파일 <2부>","num":2}],"lastmod":"2017-09-28"}},"staticQueryHashes":["2027115977","694178885"]}