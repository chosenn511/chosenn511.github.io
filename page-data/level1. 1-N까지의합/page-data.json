{"componentChunkName":"component---src-templates-post-tsx","path":"/level1. 1-N까지의합/","result":{"data":{"markdownRemark":{"html":"<p>이번 포스트에서는 자바스크립트로 1부터 N까지의 합을 구하는 알고리즘을 풀이한다.</p>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<p><code class=\"language-text\">this</code>의 개념은 매우 중요하다. 함수 안에서 <code class=\"language-text\">this</code>는 도큐먼트 객체를 참조한다. 만약 함수 내부에서 다른 콜백 함수를 실행하면 <code class=\"language-text\">this</code>는 다른 값으로 연결될 수 있으므로 주의하여야 한다.</p>\n<p><a href=\"#\" target=\"_blank\">this 더 알아보기</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sumN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    # num 값을 숫자형으로 명시적 변환\n    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    #\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sumN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 5050</span></code></pre></div>\n<p>HTML 요소 내부에서는 num 값이 문자열로 다루어진다.</p>\n<p>따라서 <code class=\"language-text\">Number()</code> 함수나 <code class=\"language-text\">parseInt()</code> 함수를 사용하여 명시적으로 숫자 값으로 변환해준 후 연산을 시행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span>\n\n<span class=\"token operator\">></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span></code></pre></div>\n<br>\n<h2 id=\"isnan\" style=\"position:relative;\"><a href=\"#isnan\" aria-label=\"isnan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isNaN()</h2>\n<p><code class=\"language-text\">isNaN(value)</code>는 Number의 내장함수로, <code class=\"language-text\">value</code>가 NaN 자료형인지 boolean 자료형으로 출력해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token operator\">></span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token operator\">></span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">true</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 문자형은 난수가 아니다.</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">// 숫자형도 난수가 아니다.</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">// 문자형과 숫자형을 연산하면 NaN 자료형이 출력된다.</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token boolean\">true</span></code></pre></div>\n<br>\n<h2 id=\"논리-연산자에-대한-간략-소개\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%84%EB%9E%B5-%EC%86%8C%EA%B0%9C\" aria-label=\"논리 연산자에 대한 간략 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 연산자에 대한 간략 소개</h2>\n<p>조건식에서 활용하는 논리연산자에 대해 간단히 소개한다.</p>\n<br>\n<h3 id=\"code-classlanguage-textcode-or\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcode-or\" aria-label=\"code classlanguage textcode or permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">||</code> (OR)</h3>\n<p>논리연산자 중 <code class=\"language-text\">||</code>를 사용하면 조건이 하나 혹은 모두 참인 경우 <code class=\"language-text\">true</code>를 반환하고 그에 따른 실행문을 실행한다.</p>\n<br>\n<h3 id=\"code-classlanguage-textampampcode-and\" style=\"position:relative;\"><a href=\"#code-classlanguage-textampampcode-and\" aria-label=\"code classlanguage textampampcode and permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&amp;&amp;</code> (AND)</h3>\n<p>논리연산자 중 <code class=\"language-text\">&amp;&amp;</code>를 사용하면 조건을 모두 만족해야 <code class=\"language-text\">true</code>를 반환하며 그에 따른 실행문을 실행한다.</p>\n<h3 id=\"code-classlanguage-textcode-not\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcode-not\" aria-label=\"code classlanguage textcode not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">!</code> (NOT)</h3>\n<p>논리연산자 중 <code class=\"language-text\">!</code>를 사용하면 피연산자가 true일 경우 반대인 false를, false일 경우 true를 반환하고 그에 따른 실행문을 실행한다.</p>\n<br>\n<h3 id=\"false로-평가되는-값들\" style=\"position:relative;\"><a href=\"#false%EB%A1%9C-%ED%8F%89%EA%B0%80%EB%90%98%EB%8A%94-%EA%B0%92%EB%93%A4\" aria-label=\"false로 평가되는 값들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>false로 평가되는 값들</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> empty <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>","excerpt":"이번 포스트에서는 자바스크립트로 1부터 N까지의 합을 구하는 알고리즘을 풀이한다. 코드 및 풀이 의 개념은 매우 중요하다. 함수 안에서 는 도큐먼트 객체를 참조한다. 만약 함수 내부에서 다른 콜백 함수를 실행하면 는 다른 값으로 연결될 수 있으므로 …","tableOfContents":"<ul>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></li>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#isnan\">isNaN()</a></li>\n<li>\n<p><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%84%EB%9E%B5-%EC%86%8C%EA%B0%9C\">논리 연산자에 대한 간략 소개</a></p>\n<ul>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#code-classlanguage-textcode-or\"><code class=\"language-text\">||</code> (OR)</a></li>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#code-classlanguage-textampampcode-and\"><code class=\"language-text\">&amp;&amp;</code> (AND)</a></li>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#code-classlanguage-textcode-not\"><code class=\"language-text\">!</code> (NOT)</a></li>\n<li><a href=\"/level1.%201-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9/#false%EB%A1%9C-%ED%8F%89%EA%B0%80%EB%90%98%EB%8A%94-%EA%B0%92%EB%93%A4\">false로 평가되는 값들</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/level1. 1-N까지의합/"},"frontmatter":{"title":"JS _ Lv1. N 까지의 합 구하기","date":"Oct 31, 2017","tags":["Vue.js","javescript","algorithm"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/level1. 1-N까지의합/","series":[],"lastmod":"2017-10-31"}},"staticQueryHashes":["2027115977","694178885"]}