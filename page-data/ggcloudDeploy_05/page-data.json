{"componentChunkName":"component---src-templates-post-tsx","path":"/ggcloudDeploy_05/","result":{"data":{"markdownRemark":{"html":"<p>이번 배포에서는 웹서버로 <code class=\"language-text\">gunicorn</code>을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다.</p>\n<br>\n<h2 id=\"1-gunicorn-서버설정--도커파일-생성\" style=\"position:relative;\"><a href=\"#1-gunicorn-%EC%84%9C%EB%B2%84%EC%84%A4%EC%A0%95--%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"1 gunicorn 서버설정  도커파일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Gunicorn 서버설정 + 도커파일 생성</h2>\n<h3 id=\"1-도커파일-작성\" style=\"position:relative;\"><a href=\"#1-%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\" aria-label=\"1 도커파일 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 도커파일 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> gcr.io/google_appengine/python\n\n<span class=\"token comment\"># Create a virtualenv for the application dependencies.</span>\n<span class=\"token comment\"># # If you want to use Python 3, add the -p python3.4 flag.</span>\n<span class=\"token keyword\">RUN</span> virtualenv /env\n<span class=\"token keyword\">ENV</span> PATH /env/bin<span class=\"token punctuation\">:</span>$PATH\n\n<span class=\"token keyword\">ADD</span> requirements.txt /app/requirements.txt\n<span class=\"token keyword\">RUN</span> /env/bin/pip install <span class=\"token punctuation\">-</span>r /app/requirements.txt\n<span class=\"token keyword\">ADD</span> . /app\n\n<span class=\"token keyword\">COPY</span> start.sh /start.sh\n\n<span class=\"token keyword\">EXPOSE</span> 80 8000\n\n\n<span class=\"token keyword\">CMD</span> gunicorn <span class=\"token punctuation\">-</span>b <span class=\"token punctuation\">:</span>$PORT config.wsgi\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/start.sh\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>만들어준 도커파일은 위와 같다. 기본으로 제공하는 도커파일과 다른 점이 있다면 나는 Gunicorn 서버를 직접 실행해서 연결해줬다는 점이다.</p>\n<br>\n<h3 id=\"2-gunicorn-서버-설정\" style=\"position:relative;\"><a href=\"#2-gunicorn-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-label=\"2 gunicorn 서버 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) Gunicorn 서버 설정</h3>\n<p>이를 위해서 해당 폴더 경로에 Gunicorn 서버를 실행해주는 <code class=\"language-text\">start.sh</code>를 만들어줬다.</p>\n<p>로컬에서 테스팅할 때나 도커를 특정포트로 실행시킬 때 유용하게 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/bin/bash\n\n# Start Gunicorn processes\necho Starting Gunicorn.\nexec gunicorn config.wsgi:application \\\n    --bind 0.0.0.0:8080 \\\n    --workers 3</code></pre></div>\n<p>다만 <strong>주의할 점은 <code class=\"language-text\">bind</code>하는 포트번호를 <code class=\"language-text\">app.yaml</code>의 <code class=\"language-text\">TargetPort</code>와 동일하게 적어줘야한다는 점</strong>이다. (나는 이걸 모르고 하루를 낭비했다...)</p>\n<br>\n<h3 id=\"3-도커-이미지-생성\" style=\"position:relative;\"><a href=\"#3-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1\" aria-label=\"3 도커 이미지 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 도커 이미지 생성</h3>\n<p>구글에서는 Cloud SQL Proxy 서비스를 위해 기본적으로  퍼블릭 도커 이미지를 제공한다. 다음 명령어로 다운받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ docker pull b<span class=\"token punctuation\">.</span>gcr<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>cloudsql<span class=\"token operator\">-</span>docker<span class=\"token operator\">/</span>gce<span class=\"token operator\">-</span>proxy:1<span class=\"token punctuation\">.</span>05</code></pre></div>\n<p>위의 이미지를 이용해서 내 도커이미지를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ docker build <span class=\"token operator\">-</span>t gcr<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>프로젝트명<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>test <span class=\"token punctuation\">.</span></code></pre></div>\n<p>만들어준 도커이미지는 다시 구글 컨테이너 레지스트리에 올려준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ gcloud docker push gcr<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>프로젝트명<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>test</code></pre></div>\n<p>이렇게 만든 도커이미지는 클라우드에서 액세스 가능한 프로젝트 스냅샷을 제공하게 된다.</p>\n<br>\n<h2 id=\"2-배포하기\" style=\"position:relative;\"><a href=\"#2-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-label=\"2 배포하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 배포하기</h2>\n<p>도커이미지까지 모두 준비가 끝났다. 이제는 배포 환경설정 파일에 서비스를 만들어주는 환경설정을 추가해주는 일만 남았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test</code></pre></div>\n<p>위의 기본 로드밸런서 설정을 <code class=\"language-text\">app.yaml</code>에 추가해준다.</p>\n<p>다음 명령어로 설정을 클러스터에 등록해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ kubectl create <span class=\"token operator\">-</span>f app<span class=\"token punctuation\">.</span>yaml</code></pre></div>\n<p>파일을 등록해준 후 몇 분 기다리면 <code class=\"language-text\">pod</code>가 생긴다. 이전 포스팅에서 클러스터를 생성할 때 <code class=\"language-text\">node=2</code>로 설정한 부분이다.  </p>\n<p><code class=\"language-text\">pods</code>를 실시간으로 확인하고 싶다면 다음 명령어를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ kubectl get pods  \nNAME                       READY     STATUS    RESTARTS   AGE\ntest-<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>   2<span class=\"token operator\">/</span>2      Running    0          3h\ntest-<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>   2<span class=\"token operator\">/</span>2      Running    0          3h\ntest-<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>*<span class=\"token operator\">*</span>   2<span class=\"token operator\">/</span>2      Running    0          3h</code></pre></div>\n<br>\n<p><code class=\"language-text\">Pods</code>들이 <code class=\"language-text\">Running</code> 상태인 것을 확인했다면 이제 외부 IP를 통해 브라우징이 가능하다. 세세한 오류들은 콘솔 홈페이지의 오류보고를 살펴보고 디버깅이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ kubectl get services test</code></pre></div>\n<p>이상으로 배포를 완료했다!</p>\n<br>\n<hr>\n<h2 id=\"3-마치며\" style=\"position:relative;\"><a href=\"#3-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"3 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 마치며</h2>\n<p>AWS를 사용한 배포에 익숙한 나에게 선택권이 많고 레퍼런스를 찾기 힘든 구글 클라우드 엔진은 만만치 않은 툴이었다.</p>\n<p>결국 배포 성공한 후 내가 얻은 깨달음은 어렵고 생소했다기 보다는 네트워크 설정에 너무 겁을 먹었다는 것이다. (마지막 에러를 해결했을 때 그 허무함이란...)</p>\n<p>AWS로 배포하는 것과 잠시 비교를 해보자면 설정이 훨씬 줄어들었다는 점에서는 구글 클라우드를 칭찬할만 하지만 문서나 인터페이스는 아직 AWS에 비하면 한참 멀었다. <del>후발 주자니까 당연하겠지만...</del></p>\n<p>그래도 오랜만에 일주일동안 머리 싸매고 배포를 해보니 개발에 대한 욕구가 샘솟는다! 헠헠! 이상으로 구글 클라우드로 장고 배포(<del>고군분투</del>)를 마친다.</p>\n<br>","excerpt":"이번 배포에서는 웹서버로 을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다. 1. Gunicorn 서버설정 + 도커파일 생성 (1) 도커파일 작성 만들어준 도커파일은 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"/ggcloudDeploy_05/#1-gunicorn-%EC%84%9C%EB%B2%84%EC%84%A4%EC%A0%95--%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\">1. Gunicorn 서버설정 + 도커파일 생성</a></p>\n<ul>\n<li><a href=\"/ggcloudDeploy_05/#1-%EB%8F%84%EC%BB%A4%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\">(1) 도커파일 작성</a></li>\n<li><a href=\"/ggcloudDeploy_05/#2-gunicorn-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\">(2) Gunicorn 서버 설정</a></li>\n<li><a href=\"/ggcloudDeploy_05/#3-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1\">(3) 도커 이미지 생성</a></li>\n</ul>\n</li>\n<li><a href=\"/ggcloudDeploy_05/#2-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\">2. 배포하기</a></li>\n<li><a href=\"/ggcloudDeploy_05/#3-%EB%A7%88%EC%B9%98%EB%A9%B0\">3. 마치며</a></li>\n</ul>","fields":{"slug":"/ggcloudDeploy_05/"},"frontmatter":{"title":"Google News Lab > 5. 도커파일 생성 및 배포","date":"Jan 29, 2018","tags":["Google News Lab","Kubernetes","Django","Docker","Gunicorn"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/ggcloudDeploy_05/","series":[{"slug":"/ggcloudDeploy_01/","title":"Google News Lab > 1. 구글 클라우드 플랫폼을 사용한 배포 전 준비","num":1},{"slug":"/ggcloudDeploy_02/","title":"Google News Lab > 2. 프록시 서버 및 데이터베이스 구축","num":2},{"slug":"/ggcloudDeploy_03/","title":"Google News Lab > 3. Kubernetes 엔진 생성 전 설정","num":3},{"slug":"/ggcloudDeploy_04/","title":"Google News Lab > 4. Kubernetes 버킷 및 클러스터 엔진 생성","num":4},{"slug":"/ggcloudDeploy_05/","title":"Google News Lab > 5. 도커파일 생성 및 배포","num":5},{"slug":"/ggcloudDeploy_07/","title":"Google News Lab > 장고로 만든 웹사이트에 커스텀 파비콘(.ico) 적용시키기","num":7}],"lastmod":"2018-01-29"}},"staticQueryHashes":["2027115977","694178885"]}