{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_06/","result":{"data":{"markdownRemark":{"html":"<p>6번은 주어진 범위 안에서 입력받은 숫자의 각 자릿수를 더하는 문제이다. 해당 문제는 스트링의 인덱싱과 슬라이싱 성질을 사용하여 풀이하였다. 또, <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, 그리고 <code class=\"language-text\">recursive</code> 방식을 사용하여 풀어보았다.</p>\n<br>\n<h2 id=\"문제-6-숫자의-자릿수의-합\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-6-%EC%88%AB%EC%9E%90%EC%9D%98-%EC%9E%90%EB%A6%BF%EC%88%98%EC%9D%98-%ED%95%A9\" aria-label=\"문제 6 숫자의 자릿수의 합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 6) 숫자의 자릿수의 합</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 6. 숫자의 자릿수의 합\n사용자에게 정수 N(0 &lt; N &lt;= 1,000,000)을 입력받고, N의 자릿수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. Input the number : 123456\n    21\n2. Input the number : 10000000\n    1\n3. Input the number : 6666\n    24\n4. Input the number : 119\n    11</code></pre></div>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<h3 id=\"1-while\" style=\"position:relative;\"><a href=\"#1-while\" aria-label=\"1 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) while</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">digit_sum_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sum_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    ln <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> ln <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">:</span>\n        sum_ <span class=\"token operator\">+=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span>ln <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        ln <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> sum_\n\n\n<span class=\"token comment\">### 실행 ###</span>\ndigit_sum_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number : 1211</span>\n<span class=\"token comment\"># 5</span></code></pre></div>\n<p><code class=\"language-text\">n</code>의 값을 문자열로 받은 후 <code class=\"language-text\">n</code>의 길이를 <code class=\"language-text\">ln</code>에 할당한다. <code class=\"language-text\">ln</code>의 값이 <code class=\"language-text\">0</code>보다 크고 <code class=\"language-text\">n</code>이 주어진 값(1,000,000)보다 작을 경우에는 while문을 진행한다. 이 때, 미리 선언해놓은 <code class=\"language-text\">sum_</code>에 n의 각 인덱스의 값들을 더하고 <code class=\"language-text\">ln</code>을 <code class=\"language-text\">1</code>씩 감소시킨다.  </p>\n<br>\n<h3 id=\"2-for\" style=\"position:relative;\"><a href=\"#2-for\" aria-label=\"2 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) for</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">digit_sum_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sum_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> n<span class=\"token punctuation\">:</span>\n        sum_ <span class=\"token operator\">+=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> sum_\n\n\n<span class=\"token comment\">### 실행 ###</span>\ndigit_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number : 1211</span>\n<span class=\"token comment\"># 5</span></code></pre></div>\n<p><code class=\"language-text\">for</code>문을 사용하는 경우에는 훨씬 간단하다. 입력값을 문자열로 받은 후 미리 선언해놓은 <code class=\"language-text\">sum_</code>에 각 인덱스의 값을 더해주고 해당 값을 리턴해주면 된다.</p>\n<br>\n<h3 id=\"3-recursive-function\" style=\"position:relative;\"><a href=\"#3-recursive-function\" aria-label=\"3 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) recursive function</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># recursive 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive06</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">digit_sum_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n        r <span class=\"token operator\">=</span> digit_sum_recursive<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> r\n    <span class=\"token keyword\">return</span> digit_sum_recursive<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nrecursive06<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number : 1211</span>\n<span class=\"token comment\"># 5</span></code></pre></div>\n<p>재귀를 사용한 경우 먼저 <code class=\"language-text\">n</code>을 스트링 값으로 받은 후 1의 자리 수를 계속 더하면서 문자열의 마지막 값을(<code class=\"language-text\">n[-1]</code>) 제외한 문자열에 계속 재귀함수를 적용한다.</p>\n<p>그리고 <code class=\"language-text\">n</code>의 길이가 1일 때, 즉 n의 첫번째 인덱스 값이 <code class=\"language-text\">n</code> 자체가 될 때 해당 값을 반환하여 탈출조건을 설정하였다.</p>\n<br>\n<h2 id=\"실행시간-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행시간 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 작성한 메서드를 100000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.</span>\n\n\n<span class=\"token comment\"># (1) while</span>\navg<span class=\"token punctuation\">(</span>digit_sum_while<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.022326416132273152</span>\n\n<span class=\"token comment\"># (2) for</span>\navg<span class=\"token punctuation\">(</span>digit_sum_for<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.023095118565834127</span>\n\n<span class=\"token comment\"># (3) recursive</span>\navg<span class=\"token punctuation\">(</span>recursive06<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.0244320781348506</span></code></pre></div>\n<br>","excerpt":"6번은 주어진 범위 안에서 입력받은 숫자의 각 자릿수를 더하는 문제이다. 해당 문제는 스트링의 인덱싱과 슬라이싱 성질을 사용하여 풀이하였다. 또, , , 그리고  방식을 사용하여 풀어보았다. 문제 6) 숫자의 자릿수의 합 코드 및 풀이 (1) whi…","tableOfContents":"<ul>\n<li><a href=\"/recursion_06/#%EB%AC%B8%EC%A0%9C-6-%EC%88%AB%EC%9E%90%EC%9D%98-%EC%9E%90%EB%A6%BF%EC%88%98%EC%9D%98-%ED%95%A9\">문제 6) 숫자의 자릿수의 합</a></li>\n<li>\n<p><a href=\"/recursion_06/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_06/#1-while\">(1) while</a></li>\n<li><a href=\"/recursion_06/#2-for\">(2) for</a></li>\n<li><a href=\"/recursion_06/#3-recursive-function\">(3) recursive function</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_06/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행시간 측정해보기</a></li>\n</ul>","fields":{"slug":"/recursion_06/"},"frontmatter":{"title":"Python _ Recursion6. 숫자의 자릿수의 합","date":"Sep 23, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_06/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-23"}},"staticQueryHashes":["2027115977","694178885"]}