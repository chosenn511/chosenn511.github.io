{"componentChunkName":"component---src-templates-post-tsx","path":"/js-14-this/","result":{"data":{"markdownRemark":{"html":"<p>자바스크립트의 <code class=\"language-text\">this</code>가 각 컨텍스트(context)마다 어떠한 방식으로 동작하는지 MDN 문서를 참고하여 정리해보았다.</p>\n<br>\n<h2 id=\"code-classlanguage-textthiscode-키워드\" style=\"position:relative;\"><a href=\"#code-classlanguage-textthiscode-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"code classlanguage textthiscode 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">this</code> 키워드</h2>\n<p><code class=\"language-text\">this</code>는 자바스크립트에서 <strong>함수의 현재 실행 문맥</strong>\n이다. 따라서 <code class=\"language-text\">this</code>가 쓰여지고 호출되는 방식에 따라 참조하는 객체가 달라진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 함수 실행</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 메소드 실행</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">myConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 생성자 실행</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 간접 실행</span></code></pre></div>\n<p>위와 같은 실행 타입의 차이와 실행모드(일반, 엄격)는 <code class=\"language-text\">this</code>의 실행 문맥에 영향을 미친다.</p>\n<br> \t\n<h3 id=\"1-전역-컨텍스트\" style=\"position:relative;\"><a href=\"#1-%EC%A0%84%EC%97%AD-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"1 전역 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 전역 컨텍스트</h3>\n<p><code class=\"language-text\">this</code>는 기본적으로 window, 즉, 브라우저의 전역객체이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>document <span class=\"token operator\">==</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<br>\n<h3 id=\"2-함수-컨텍스트\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"2 함수 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 컨텍스트</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 함수 내부에서 this는 함수를 호출한 방법에 의해 좌우된다.</span>\n<span class=\"token comment\">// - 아래 예시에서는 호출에 의해 설정되지 않는다.</span>\n<span class=\"token comment\">// -strict 모드가 아니므로 항상 전역 객체에서 기본이 되는 객체이다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n\n<span class=\"token comment\">// strict mode에서 this는 실행 컨텍스트에서 할당되고 유지된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// f2()내의 this는 undefined인데, f2가 객체의 메소드나 프로퍼티가 아니라 직접 호출되었기 때문이다.</span>\n<span class=\"token comment\">// 결과적으로 window 객체로 잘못 반환한 것이다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></code></pre></div>\n<br>\n<h3 id=\"3-객체의-메소드로서-this\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C%EC%84%9C-this\" aria-label=\"3 객체의 메소드로서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 객체의 메소드로서 this</h3>\n<p>(1) <code class=\"language-text\">this</code>는 실행되는 시점의 문맥을 따른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myCar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    maxSpeed<span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    driver<span class=\"token operator\">:</span> <span class=\"token string\">\"julia\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>speed <span class=\"token operator\">*</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myCar3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    maxSpeed<span class=\"token operator\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n    driver<span class=\"token operator\">:</span> <span class=\"token string\">\"katie\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>speed <span class=\"token operator\">*</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 다음과 같이 써도 되지만 this를 쓰면 리팩토링을 줄여준다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myCar3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCar2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// myCar2 객체 출력</span>\nmyCar3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// myCar3 객체 출력</span></code></pre></div>\n<br>\n<p>(2) <code class=\"language-text\">this</code>는 함수가 정의된 방법이나 위치에 구애받지 않는다. 다음과 같이 변수에 함수로 할당할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myVar1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    prop<span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar1<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 30</span></code></pre></div>\n<br>\n<p>(3) (2)의 예제에서 f 함수를 밖에 정의해도 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myVar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>prop<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">independent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmyVar2<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> independent<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar2<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<br>\n<p>(4) <code class=\"language-text\">this</code>는 멤버 대상에 영향을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myVar2<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f3<span class=\"token operator\">:</span> independent<span class=\"token punctuation\">,</span> prop<span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 아래 myVar3.b의 메소드 f3이 실행되는 동안\n함수 내부의 this는 myVar3.b를 나타낸다. 가장 즉각적인 참조역할을 수행하는 것이다. */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 51</span></code></pre></div>\n<br>\n<h3 id=\"4-객체의-prototype-체인에서-this\" style=\"position:relative;\"><a href=\"#4-%EA%B0%9D%EC%B2%B4%EC%9D%98-prototype-%EC%B2%B4%EC%9D%B8%EC%97%90%EC%84%9C-this\" aria-label=\"4 객체의 prototype 체인에서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 객체의 prototype 체인에서 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myVar4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 메소드가 한 객체의 prototype 체인에 있으면 메서드는 객체에 있는 것처럼 this는 메소드가 호출된 객체를 나타낸다.</span>\n<span class=\"token comment\">// myVar5는 f 속성을 가지고 있지 않지만 prototype으로부터 상속받았다.</span>\n\n<span class=\"token keyword\">var</span> myVar5 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>myVar4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyVar5<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nmyVar5<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// myVar5는 f 멤버를 가지게 되고 함수 내부의 this는 myVar5를 나타낸다.</span>\n<span class=\"token comment\">// 이는 자바스크립트 prototype 상속의 특징이다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar5<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<br>\n<h3 id=\"5-생성자-함수에서-this\" style=\"position:relative;\"><a href=\"#5-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\" aria-label=\"5 생성자 함수에서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 생성자 함수에서 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// - 생성자의 기본은 this에 의해 참조되는 객체를 반환하지만 가끔 다른 객체를 반환할 수 있다.</span>\n<span class=\"token comment\">// - 반환값이 객체가 아니면 this객체를 반환한다.</span>\n\n<span class=\"token comment\">/* 생성자 함수 작동원리\nfunction myConstructor(){\n    - 실제 함수로직코드를 작성하는 부분이다.\n    - this에 할당해 속성을 만든다.\n      ex_ this.myVar = 1;\n}\n\n생성자의 실행은 표현식 앞에 new라는 키워드가 붙었을 때\n함수 객체로 계산되어 수행된다.\nex_ var myVarEx = new myConstructor();\n*/</span>\n\n<span class=\"token comment\">// (1) 함수내에 return문이 없으면 객체는 'new 표현식'의 결과처럼 작동한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 37</span>\n\n<span class=\"token comment\">// (2) return값이 있으면 결과는 this에 연결된 객체로 반환된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>p2<span class=\"token operator\">:</span><span class=\"token number\">63</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 이 때 this.p2 = 60; 객체는 생성하는 동안 return되었으므로 this에 연결된 새로운 객체는 그냥 버려진다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 63</span></code></pre></div>\n<br>\n<h3 id=\"6-code-classlanguage-textfcallcode과-code-classlanguage-textfapplycode에서-this\" style=\"position:relative;\"><a href=\"#6-code-classlanguage-textfcallcode%EA%B3%BC-code-classlanguage-textfapplycode%EC%97%90%EC%84%9C-this\" aria-label=\"6 code classlanguage textfcallcode과 code classlanguage textfapplycode에서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <code class=\"language-text\">f.call()</code>과 <code class=\"language-text\">f.apply()</code>에서 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// - 함수 내부에서 this를 사용할 때 특정 객체와 연결하여 사용할 수 있다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myVar6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this로 사용할 객체와 매개변수 인자값을 전달하였다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>myVar6<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1+3+4+5=13  </span>\n\n<span class=\"token comment\">// this로 사용할 객체와 함수의 인수로 사용되는 배열을 전달하였다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>myVar6<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1+3+7+8=19</span>\n\n<span class=\"token comment\">// 이 때 this로 연결된 값이 객체가 아니면 내부 ToObject를 사용하여 객체로 변환될 것이다.</span>\n<span class=\"token comment\">// 기본 값이 전달되면 다음과 같이 객체로 생성된 후 전달된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span></code></pre></div>\n<br>\n<h3 id=\"7-bind-메소드에서의-this\" style=\"position:relative;\"><a href=\"#7-bind-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"7 bind 메소드에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. bind 메소드에서의 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* - ECMAScript5에서 Function.prototype.bind\n메소드를 도입하여 f.bind(객체)를 호출하면\n다음과 같은 asf 생명주기로 새로운 함수를 생성한다.\n보통 this는 메소드가 정의되어 있는 객체라고 생각하는데\n\n객체 밖에 있는 메소드를 사용할 경우\nbind 함수로 메소드를 객체에 포함시킬 수 있다. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token string\">\"julia\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// julia</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> f<span class=\"token operator\">:</span>f<span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span>g<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 29, \"julia\"</span></code></pre></div>\n<br>\n<h3 id=\"8-dom-핸들러로서의-함수에서-this\" style=\"position:relative;\"><a href=\"#8-dom-%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\" aria-label=\"8 dom 핸들러로서의 함수에서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. DOM 핸들러로서의 함수에서 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* - 함수가 이벤트 핸들러로 사용될 때\nthis는 이벤트가 발생한 엘리먼트로 설정된다.*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">turnBlue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 항상 true 반환</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// currentTarget과 target이 같은 객체이면 true</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#blue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// document의 모든 엘리먼트 목록 반환</span>\n<span class=\"token keyword\">var</span> elements <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 클릭 리스너로 위 함수를 추가해준후\n엘리먼트를 클릭하면 파랗게 표시된다.\n몇몇 브라우저는 이외의 방법을 사용하기도 하므로\n이 관습을 따르지 않을 수 있다.\n*/</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>elements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> turnBlue<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"9-in-line-이벤트-헨들러로서의-함수에서-this\" style=\"position:relative;\"><a href=\"#9-in-line-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%97%A8%EB%93%A4%EB%9F%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\" aria-label=\"9 in line 이벤트 헨들러로서의 함수에서 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. in-line 이벤트 헨들러로서의 함수에서 this</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--코드가 in-line 핸들러에서 호출될 때\nthis는 리스너가 위치한 DOM 엘리먼트로 할당된다.\n--></span>\n\n<span class=\"token comment\">&lt;!--(1) 오직 외부 코드에서 this를 할당 가능--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert(this.tagName.toLowerCase());<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Show this  <span class=\"token comment\">&lt;!--클릭시 button 출력--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--(2) this는 전역/window 객체가 반환\n- 함수 내부의 this가 할당되지 않았기 때문이다.\n- 즉, 아래 코드의 this는 호출에 의해 할당되지 않고 non-strict 모드의 기본객체이다.--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert(function(){return this}());<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Show inner this  <span class=\"token comment\">&lt;!--클릭시 [object Window] 출력--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 문서 - this</a></li>\n<li><a href=\"http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">번역 및 추가예제</a></li>\n</ol>","excerpt":"자바스크립트의 가 각 컨텍스트(context)마다 어떠한 방식으로 동작하는지 MDN 문서를 참고하여 정리해보았다.  키워드 는 자바스크립트에서 함수의 현재 실행 문맥\n이다. 따라서 가 쓰여지고 호출되는 방식에 따라 참조하는 객체가 달라진다. 위와 같…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/js-14-this/#code-classlanguage-textthiscode-%ED%82%A4%EC%9B%8C%EB%93%9C\"><code class=\"language-text\">this</code> 키워드</a></p>\n<ul>\n<li><a href=\"/js-14-this/#1-%EC%A0%84%EC%97%AD-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">1. 전역 컨텍스트</a></li>\n<li><a href=\"/js-14-this/#2-%ED%95%A8%EC%88%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">2. 함수 컨텍스트</a></li>\n<li><a href=\"/js-14-this/#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C%EC%84%9C-this\">3. 객체의 메소드로서 this</a></li>\n<li><a href=\"/js-14-this/#4-%EA%B0%9D%EC%B2%B4%EC%9D%98-prototype-%EC%B2%B4%EC%9D%B8%EC%97%90%EC%84%9C-this\">4. 객체의 prototype 체인에서 this</a></li>\n<li><a href=\"/js-14-this/#5-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\">5. 생성자 함수에서 this</a></li>\n<li><a href=\"/js-14-this/#6-code-classlanguage-textfcallcode%EA%B3%BC-code-classlanguage-textfapplycode%EC%97%90%EC%84%9C-this\">6. <code class=\"language-text\">f.call()</code>과 <code class=\"language-text\">f.apply()</code>에서 this</a></li>\n<li><a href=\"/js-14-this/#7-bind-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-this\">7. bind 메소드에서의 this</a></li>\n<li><a href=\"/js-14-this/#8-dom-%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\">8. DOM 핸들러로서의 함수에서 this</a></li>\n<li><a href=\"/js-14-this/#9-in-line-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%97%A8%EB%93%A4%EB%9F%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this\">9. in-line 이벤트 헨들러로서의 함수에서 this</a></li>\n</ul>\n</li>\n<li><a href=\"/js-14-this/#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","fields":{"slug":"/js-14-this/"},"frontmatter":{"title":"JS _ 14. 자바스크립트의 this","date":"Oct 19, 2017","tags":["javascript","basic grammar"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-14-this/","series":[],"lastmod":"2017-10-19"}},"staticQueryHashes":["2027115977","694178885"]}