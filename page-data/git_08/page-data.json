{"componentChunkName":"component---src-templates-post-tsx","path":"/git_08/","result":{"data":{"markdownRemark":{"html":"<p>git으로 일하다보면 커밋 히스토리를 수정해야할 때가 있다.</p>\n<p>깃에서는 커밋한 내용 뿐만 아니라 커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다. 단, <strong>다른 사람과 코드를 공유하기 전에 해야 한다!</strong></p>\n<br>\n<h3 id=\"git의-장점\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"git의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>git의 장점</strong></h3>\n<ul>\n<li>staging area로 커밋할 파일 고르는 일을 커밋하는 순간으로 미룰 수 있다.</li>\n<li>stash 명령으로 하던 일을 미루고 다른 브랜치로 이동할 수 있다.</li>\n<li>이미 커밋한 내용을 수정할 수 있다.</li>\n<li>커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다.</li>\n</ul>\n<h4 id=\"1-마지막-커밋을-수정하기\" style=\"position:relative;\"><a href=\"#1-%EB%A7%88%EC%A7%80%EB%A7%89-%EC%BB%A4%EB%B0%8B%EC%9D%84-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"1 마지막 커밋을 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 마지막 커밋을 수정하기</h4>\n<ol>\n<li>커밋 메세지 수정하기</li>\n<li><code class=\"language-text\">git commit --amend</code></li>\n<li>자동으로 텍스트편집기(vim)을 실행시켜서 마지막 커밋 메세지를 열어주므로, 쉽게 수정하고 저장하면 된다.</li>\n<li>\n<p>커밋하고 난 후 새로만든 파일 또는 수정파일을 가장 최근 커밋에 집어넣는 법</p>\n<ul>\n<li>파일을 수정한 후 <code class=\"language-text\">git add</code>로 staging area에 넣기</li>\n<li>또는 git rm으로 추적하는 파일(Tracked Files) 삭제하기</li>\n<li><code class=\"language-text\">git commit --amend</code>를 통해 staging area의 파일들을 커밋한다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>커밋메세지를 여러 개 수정하는 법 - <code class=\"language-text\">rebase</code></li>\n<li>예전 커밋을 수정하려면 <code class=\"language-text\">rebase</code>를 사용한다.</li>\n<li>마지막 커밋메세지 3개를 수정하고 싶을 때, <code class=\"language-text\">git rebase -i HEAD~3</code>을 입력</li>\n<li><code class=\"language-text\">HEAD~3</code> : 수정하려는 커밋의 부모인 4번째 이전 커밋까지.</li>\n<li>이미 중앙 서버에 push한 커밋을 결국 같은 내용을 2번 push하므로 수정하면 안된다.</li>\n<li>Rebase를 하면 목록에 있는 모든 커밋의 SHA-1 값이 변경되므로 중복 푸시를 하게 된다.</li>\n<li>오래된 커밋메세지부터 최신 커밋메세지까지 뜨고, 그 안에서 pick을 지우고 수정하고 싶은 커밋메세지 앞에 edit을 쓴 후 저장하면 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;git rebase -i HEAD~2&gt; 수정 결과:\n\tStopped at 81d7b22... add stash2.txt\n\tYou can amend the commit now, with\n\n\t\tgit commit --amend\n\n\tOnce you are satisfied with your changes, run\n\n\t\tgit rebase --continue</code></pre></div>\n<ul>\n<li>알려주는 대로 <code class=\"language-text\">git commit --amend</code>를 치면 수정하고자 했던 커밋 메세지를 수정할 수 있도록 텍스트 편집기가 열려서 수정할 수 있다.(여기서 수정하는 것!)</li>\n<li>수정하고 나서 나머지 것들도 아래의 명령어로 계속 진행하여 바꿔나갈 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;git rebase --continue&gt;\nSuccessfully rebased and updated refs/heads/master.\n: 앞에서 1개만 수정한다고 명령했으므로 아래와 같이 결과가 나온다.</code></pre></div>\n<br>\n<ol start=\"3\">\n<li>커밋 순서바꾸기</li>\n<li><code class=\"language-text\">git rebase -i HEAD~n</code>으로 할 수 있는 다른 기능</li>\n<li>대화형 편집기에서 커밋 전체를 삭제하거나 순서를 조정한 후 저장하면 log에서 바뀐 것을 확인할 수 있다.  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  1 pick 8ea9f5b 파일 다시 추가\n  2 pick beeb261 add .gitignore\n  3 pick 7f38535 add stash2.txt\n\n  1 pick 7f38535 add stash2.txt\n  2 pick 8ea9f5b 파일 다시 추가\n : 위에서 아래처럼 수정하고 저장하면 커밋 순서, 삭제 등을 할 수 있다.</code></pre></div>\n<br>\n<ol start=\"4\">\n<li>커밋 합치기</li>\n<li>대화형 Rebase(vim)를 활용할 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;합칠 커밋 앞에 squash로 바꿔주기&gt;\n  1 pick 8ea9f5b 파일 다시 추가\n  2 squash beeb261 add .gitignore\n  3 squash 7f38535 add stash2.txt\n\n&lt;squah한 후 알림창&gt;\n  # This is a combination of 3 commits.\n  2 # This is the 1st commit message:\n  3 파일 다시 추가\n  4\n  5 # This is the commit message #2:\n  6\n  7 add .gitignore\n  8\n  9 # This is the commit message #3:\n 10\n 11 add stash2.txt\n\n&lt;git log&gt; - 3개의 커밋이 하나로 합쳐졌다.\n commit 05e65584897be79c3a56ac9264d64a1c5c43a3a4\nAuthor: juliahwang-imac &lt;qufskan9396@gmail.com&gt;\nDate:   Tue May 16 22:19:26 2017 +0900\n\n    파일 다시 추가\n\n    add .gitignore\n\n    add stash2.txt</code></pre></div>\n<br>\n<ol start=\"5\">\n<li>커밋 분리하기</li>\n<li>기존 커밋을 해제하(되돌리)고 stage를 여러 개로 분리한 후 그것을 원하는 횟수만큼 다시 커밋할 수 있다.</li>\n<li><code class=\"language-text\">git rebase -i</code>에서 해당 커밋을 edit 으로 변경한다.</li>\n<li><code class=\"language-text\">git reset HEAD^</code>로 해당 커밋을 해제하고 내용을 다시 2개로 나누어서 커밋한다.</li>\n<li>수정파일은 unstaged 상태가 되는데 파일을 add한 후 커밋을 충분히 나누어서 한다.</li>\n<li><code class=\"language-text\">git rebase --continue</code>를 통해 남은 rebase 커밋메세지 수정을 완료해준다.</li>\n</ol>\n<br>\n<br>\n<h3 id=\"수정할-커밋이-너무-많을-때---filter-branch\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95%ED%95%A0-%EC%BB%A4%EB%B0%8B%EC%9D%B4-%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%84-%EB%95%8C---filter-branch\" aria-label=\"수정할 커밋이 너무 많을 때   filter branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정할 커밋이 너무 많을 때 - filter-branch</h3>\n<ul>\n<li>rebase 는 <code class=\"language-text\">--continue</code> 옵션으로 하나하나 수정하므로 많은 양의 커밋을 수정할 때는 번거로운 작업이다.</li>\n</ul>\n<p><code class=\"language-text\">filter-branch</code></p>\n<ul>\n<li>히스토리 전체에서 필요한 것만을 골라내는데 사용하는 도구.</li>\n<li>모든 커밋의 이메일 주소를 변경하거나 어떤 파일을 삭제할 경우 사용할 수 있다.</li>\n<li>역시 타인과 공유중이라면 사용하지 말아야한다</li>\n</ul>\n<br>\n<ol>\n<li>모든 커밋에서 파일 제거하기</li>\n<li>\n<p>잘못된 파일을 커밋했거나 암호 등 보안정보를 커밋한 경우 돌아가서 삭제해야 한다.</p>\n<ul>\n<li><code class=\"language-text\">fliter-branch --tree-filter &#39;rm -f password.txt&#39; HEAD</code></li>\n</ul>\n</li>\n<li>\n<p>편집기의 백업파일을 잘못 커밋한 경우</p>\n<ul>\n<li><code class=\"language-text\">filter-branch --tree-filter rm -f *~ HEAD</code></li>\n<li>모든 파일, 커밋을 정리하고 브랜치 포인터를 복원해준다.</li>\n</ul>\n</li>\n<li>프로젝트에 체크아웃하고 각 커밋에 해당 명령을 실행시킨다.</li>\n<li>그리고 그 결과를 다시 커밋한다.</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>\n<p>모든 브랜치에 적용할 수 있는 명령을 내리고 싶을 경우</p>\n<p>-<code class=\"language-text\">filter-branch --all</code></p>\n</li>\n<li>이러한 작업은 테스팅 브랜치에 먼저 해보는 게 좋다.</li>\n</ol>\n<br>\n<ol start=\"3\">\n<li>하위 디렉토리를 루트 디렉토리로 만들고 싶을 경우</li>\n<li>다른 VCS(버전컨트롤시스템)에서 코드를 임포트하고 사용할 때 받은 하위 디렉토리를 모든 커밋에 대한 루트 디렉토리로 만들 때 사용한다.</li>\n<li>\n<p><code class=\"language-text\">git filter-branch --subdirectory-filter trunk(하위디렉토리명) HEAD</code></p>\n<ul>\n<li>trunk를 루트디렉토리로 만들고, 관련없는 커밋은 자동으로 삭제한다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<ol start=\"4\">\n<li>모든 커밋의 이메일 주소 수정하기</li>\n<li>프로젝트를 오픈소스로 공개할 때 개인이메일 주소로 변경해야한다.</li>\n<li>or <code class=\"language-text\">git config</code>로 이메일 주소 넣는 것을 잊었다.</li>\n<li><code class=\"language-text\">git filter-branch --commit-filter + if문</code></li>\n<li>해당 커밋만 골라서 수정가능하다.</li>\n<li>조건에 만족하는 커밋만 SHA-1값이 바뀌는 것이 아니다.</li>\n<li>커밋은 부모의 SHA-1값을 받아오므로 모든 커밋의 SHA-1 값이 바뀐다</li>\n<li>따라서 push하기 전에 해줘야 한다!</li>\n</ol>","excerpt":"git으로 일하다보면 커밋 히스토리를 수정해야할 때가 있다. 깃에서는 커밋한 내용 뿐만 아니라 커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다. 단, 다른 사람과 코드를 공유하기 전에 해야 한다! git의 장점 staging area로 커밋할 …","tableOfContents":"<ul>\n<li><a href=\"/git_08/#git%EC%9D%98-%EC%9E%A5%EC%A0%90\"><strong>git의 장점</strong></a></li>\n<li><a href=\"/git_08/#%EC%88%98%EC%A0%95%ED%95%A0-%EC%BB%A4%EB%B0%8B%EC%9D%B4-%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%84-%EB%95%8C---filter-branch\">수정할 커밋이 너무 많을 때 - filter-branch</a></li>\n</ul>","fields":{"slug":"/git_08/"},"frontmatter":{"title":"Git _ 히스토리 단장하기","date":"Jun 15, 2017","tags":["Git"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/git_08/","series":[{"slug":"/git_01/","title":"Git _ 파일 삭제를 위한 clean 명령어 사용하기","num":1},{"slug":"/git_02/","title":"Git _ 협업을 위한 stash 명령어 사용하기","num":2},{"slug":"/git_03/","title":"Git _ 버전관리 상태 수정하기","num":3},{"slug":"/git_04/","title":"Git _ 제외시킬 파일 관리하기","num":4},{"slug":"/git_05/","title":"Git _ 원격저장소 연결하기","num":5},{"slug":"/git_06/","title":"Git _ 태그 관리하기","num":6},{"slug":"/git_07/","title":"Git _ 도구 검색","num":7},{"slug":"/git_08/","title":"Git _ 히스토리 단장하기","num":8},{"slug":"/git_09/","title":"Git _ Reset 명확히 알고 가기","num":9}],"lastmod":"2017-06-15"}},"staticQueryHashes":["2027115977","694178885"]}