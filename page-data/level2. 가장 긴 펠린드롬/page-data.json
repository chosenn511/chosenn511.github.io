{"componentChunkName":"component---src-templates-post-tsx","path":"/level2. 가장 긴 펠린드롬/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h3>\n<blockquote>\n<p>앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.\nlongest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.\ns의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.\n예를들어 s가 \"토마토맛토마토\"이면 7을 리턴하고 \"토마토맛있어\"이면 3을 리턴합니다.</p>\n</blockquote>\n<p><a href=\"https://programmers.co.kr/learn/challenge_codes/85\" target=\"_blank\">문제 보러가기</a></p>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<p>처음에는 반복문으로 가능한 경우의 수를 하나하나 나눠서 생각했다. (정렬에 대한 기반이 약해서 이러지 않았나 싶다.)</p>\n<p>이중 반복문을 사용했는데, 비교할 부분문자열 범위를 잘 생각해봐야 한다. 먼저 인자로 받은 <strong>문자열 <code class=\"language-text\">s</code>를 반대로 나열한 <code class=\"language-text\">rs</code></strong>를 만든다.</p>\n<p><code class=\"language-text\">s</code> 문자열에 대하여 반복문을 돌면서 한 글자 이상의 부분문자열 슬라이스가 <code class=\"language-text\">rs</code>에 있으면 해당 문자열의 길이를 <code class=\"language-text\">result</code> 리스트에 저장한다. 그 후 <code class=\"language-text\">result</code> 리스트를 정렬하여 최대 길이를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">longest_palindrom</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rs <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ls<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ls<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>ls<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> t <span class=\"token keyword\">in</span> rs<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"토마토맛있어토마토마토\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"토마토맛있어\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"토마토마토마토\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 7</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"맛있어토마토\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"맛있어토마토네\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<p>위의 코드는 다음과 같은 문자열 비교 관련 파이썬 문법을 사용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"토마토마토\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">\"어있맛토마토마토\"</span>\n<span class=\"token keyword\">if</span> a <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># True</span></code></pre></div>\n<p>또, 빈문자열이나 길이가 1인 문자도 함께 제외시켜 리스트에 포함되지 않도록 했다.</p>\n<br>\n<p>리펙토링으로 줄인 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">longest_palindrom</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rs <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n    result<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>ls<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ls<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ls<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>ls<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> rs <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>ls<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>사실 이 문제는 재귀로 푸는 것이 가장 쉽다..</p>\n<br>\n<h2 id=\"다른-방식의-코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"다른 방식의 코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 방식의 코드 및 풀이</h2>\n<p>재귀로 푼 코드를 보자.</p>\n<p>먼저 인덱싱을 통해 거꾸로 만든 문자열이 원래 문자열과 같으면 <code class=\"language-text\">s</code> 길이를 리턴하는 것으로 종료조건을 설정한다.</p>\n<p><code class=\"language-text\">s</code>의 마지막 글자부터 하나씩 슬라이스하는 재귀함수와, s의 첫 글자부터 하나씩 슬라이스하는 재귀함수 값 중 일치하는 것(종료조건 적용)의 최대길이를 <code class=\"language-text\">max()</code>로 찾았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">longest_palindrom</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> longest_palindrom<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>매우 간단하지 않은가?</p>\n<br>\n<p>다음 코드는 파이썬에서 제공하는 <code class=\"language-text\">difflib</code> 라이브러리에서 해시 가능한 값이면 자료형에 상관없이 순서비교가 가능한 <code class=\"language-text\">SequenceMatcher</code>를 사용해 푼 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> difflib <span class=\"token keyword\">import</span> SequenceMatcher <span class=\"token keyword\">as</span> SM\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">longest_palindrom_3</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> SM<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>find_longest_match<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longest_palindrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"토마토맛있어토마토마토\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 5</span></code></pre></div>\n<p><code class=\"language-text\">SequenceMatcher</code>에 대해 간략히 정리해보면 다음과 같다.</p>\n<p>더 자세한 사항은 <a href=\"https://docs.python.org/3.6/library/difflib.html\" target=\"_blank\">파이썬 3.6 문서 - difflib</a>을 참고하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> difflib <span class=\"token keyword\">import</span> SequenceMatcher <span class=\"token keyword\">as</span> SM\n\n<span class=\"token comment\"># 첫 번째 인자값은 isjunk로, 무시할 값이 있으면 여기에 설정한다.</span>\n<span class=\"token comment\"># 보통 None으로 설정하며, lambda x: 0;과 같은 뜻이다.</span>\ns <span class=\"token operator\">=</span> SM<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token string\">\" abcd\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token string\">\"abcd abcd\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># find_longest_match(a의 찾을 시작인덱스, a의 찾을 끝인덱스, b의 찾을 시작인덱스, b의 찾을 끝인덱스)</span>\ns<span class=\"token punctuation\">.</span>find_longest_match<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># a의 i부터 j까지 size가 k인 값을 찾았음을 알려준다.</span>\n<span class=\"token comment\"># Match(a=i, b=j, size=k)</span>\n<span class=\"token comment\"># Match(a=0, b=4, size=5)</span>\n<span class=\"token comment\"># 대입해보면 a[i:i+k] == b[j:j+k]와 같다.</span></code></pre></div>\n<br>\n<h2 id=\"실행시간-측정하기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"실행시간 측정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>longest_palindrom_1<span class=\"token punctuation\">(</span><span class=\"token string\">\"수박수박수박맛있어수박\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.4620087565854192 ~ 0.5309993866831064</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>longest_palindrom_2<span class=\"token punctuation\">(</span><span class=\"token string\">\"수박수박수박맛있어수박\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.5870097083970904 ~ 0.5980109563097358</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>longest_palindrom_3<span class=\"token punctuation\">(</span><span class=\"token string\">\"수박수박수박맛있어수박\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.5979964043945074 ~ 0.9469949873164296</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>longest_palindrom_4<span class=\"token punctuation\">(</span><span class=\"token string\">\"수박수박수박맛있어수박\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.4210014594718814 ~ 0.5869951564818621</span></code></pre></div>\n<br>","excerpt":"문제 설명 앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.\nlongest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.\ns의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.\n예를들어 s가 …","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/level2.%20%EA%B0%80%EC%9E%A5%20%EA%B8%B4%20%ED%8E%A0%EB%A6%B0%EB%93%9C%EB%A1%AC/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n</ul>\n</li>\n<li><a href=\"/level2.%20%EA%B0%80%EC%9E%A5%20%EA%B8%B4%20%ED%8E%A0%EB%A6%B0%EB%93%9C%EB%A1%AC/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></li>\n<li><a href=\"/level2.%20%EA%B0%80%EC%9E%A5%20%EA%B8%B4%20%ED%8E%A0%EB%A6%B0%EB%93%9C%EB%A1%AC/#%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">다른 방식의 코드 및 풀이</a></li>\n<li><a href=\"/level2.%20%EA%B0%80%EC%9E%A5%20%EA%B8%B4%20%ED%8E%A0%EB%A6%B0%EB%93%9C%EB%A1%AC/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\">실행시간 측정하기</a></li>\n</ul>","fields":{"slug":"/level2. 가장 긴 펠린드롬/"},"frontmatter":{"title":"Python _ Lv2. 가장 긴 펠린드롬","date":"Nov 03, 2017","tags":["algorithm","python"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/level2. 가장 긴 펠린드롬/","series":[],"lastmod":"2017-11-03"}},"staticQueryHashes":["2027115977","694178885"]}