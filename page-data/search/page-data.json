{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n사이트를 배포하고 나서 반드시 해주어야 하는 작업이 있다. 바로 웹사이트 도메인에 `SSL` 인증서를 발급받는 일이다. 특히 크롬/사파리 브라우저는 앞으로 인증서가 없는 웹사이트에 접속 시 경고창을 띄울 것이라고 공지한 만큼 **SSL인증서 발급은 웹사이트 배포시 필수**\n적인 작업이다.\n\n<br>\n\n## SSL/TLS 인증서란?\n\n`SSL` 인증서는 신뢰할 수 있는 인증기관에서 사이트의 보안을 보증해준다. 사용자가 웹사이트에 접속하면 여러 형태의 인증 기능(회원가입, 로그인, 로그아웃, 결제 등)을 사용하게 되는데 이 때 여러 중요정보를 웹사이트의 서버로 전송할 수 밖에 없다.\n\n이러한 개인정보는 `패킷` 형태로 전송하는데, 인증서가 없는 사이트는 중요정보가 담긴 패킷을 제 3자가 언제라도 낚아채 가져갈 위험이 있다. 예전에는 인증 기능이 포함된 페이지 경로에만 부분적으로 `SSL`을 적용해도 괜찮았지만 요즘에는 웹사이트 전체에 `SSL`을 적용하도록 장려하고 있다.\n\n보통의 `SSL`은 유료로 구매하는 인증서지만, **개인이 직접 생성한 키페어로 인증서를 발급**\n해주는 <a href=\"#\" target=\"_blank\">Let's Encrypt</a> 오픈소스 서비스를 사용하려고 한다. 해당 서비스는 3개월의 인증서 유효기간을 제공하고 있다. 만약 직접 `Let's Encrypt`에서 인증서를 발급받아 사용하는 경우에는 유효기간을 넘지 않도록 조심해야한다. 인증서의 유효기간이 다가오면 사이트에 접속할 때 경고창이 뜨는 등 웹 접근성에 반하는 서비스를 할 우려가 있기 때문이다.\n\n\n<br />\n\n## kube-lego 라이브러리 사용하기\n\n`kube-lego`는 Kubernetes 엔진으로 배포한 웹앱에 간단한 설정(?...튜토리얼에 의하면)으로 도메인을 할당할 수 있다. 또한, `Let's Encrypt`로 직접 발급받은 인증서를 유효기간 걱정없이 갱신해준다.\n\n\n지난 포스트 시리즈까지는 구글 클라우드 플랫폼(Google Cloud Platform) 내 쿠버네트 엔진(GKE, Google Kubernetes Engine)을 사용하여 도커이미지로 만든 장고 앱을 배포하는 방법에 대해 소개했다.\n이번 포스트에서는 Kubernete 엔진에 적용가능한 `kube-lego`를 사용하여 도메인을 할당하고 인증서를 발급하여 사이트 접속시 `https`로 리다이렉트하는 방법을 소개하겠다.\n\n<br />\n\n## 준비물\n\n- 인증서 발급용 `.key`, `.crt` 파일\n\t- `openssl`로 생성하여 안전한 곳에 저장해둔다.\n\n\t```\n\t$  openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /path/to/tls.key -out /path/to/tls.crt -subj \"/CN=DNS 이름\"\n\t```\n\n\t**주의**\n\n\t- 위의 파일은 반드시! 반드시...!! 안전한 곳에 저장해둔다.\n\t- 키를 생성할 때 `.srt`와 `.key`파일의 이름은 반드시 `tls`로 통일해준다. 그렇지 않으면 못찾더라 ㅠㅠ...\n\n- 빌링이 허용된 계정으로 쿠버네트 엔진에 배포 중인 장고 앱 (<a href=\"#\" target=\"_blank\">쿠버네트엔진 배포에 대한 이전 포스팅</a> 참고)\n- 앱에 할당할 수 있는, 직접 소유하고 있는 도메인\n\n\n`kube-lego`는 기본적으로 `Ingress` 설정과 연동하여 사용하는 라이브러리다. `Ingress`를 사용한 배포방식을 이해하지 못했다면 <a href=\"#\" target=\"_blank\">이전 글</a>을 참고하자.\n\n위의 준비물이 준비됐다면 다음으로 넘어가자. \n\n<br />\n\n## kube-lego 작동원리 이해하기\n\n`kube-lego`는 일종의 지름길이다. SSL 인증서는 신뢰할 수 있는 인증기관에서 유료로 발급받아 유효기간이 다가오기 전에 미리 매번 갱신해 주어야하는 번거로움을 디폴트로 내장하고 있다. 하지만 앞에서도 설명했듯이 인증서 발급은 필수적인 작업이므로 개발자들은 직접 시크릿파일을 만들어 수동으로 SSL 인증서를 적용시켜 왔는데, **`kube-lego`는 이러한 일련의 과정을 설정파일 몇 개로 단순화시켜 만들어놓은 라이브러리**다.\n\n배포를 하면서 깨닫게 된 사실인데, `namespace`는 매우 중요하다. 이왕이면 **지금까지 모든 설정파일(`Ingress`설정파일부터~)의 `namespace`를 통일해주는 것이 좋은데, 쿠버네트 엔진같이 클러스터 내에 여러 포드를 생성하는 경우 명시해주지 않으면 파일이 엉뚱한 곳에 설정되는 경우도 있기 때문**이다.\n\n```yaml\n# kube-lego.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kube-lego\n  namespace: customize this! # ConfigMap, Deployment와 통일해준다.\n```\n\n<br>\n\nkube-lego는 스스로 `Let's Encrypt`에 계정을 생성해 인증서를 발급받아온다. 다음은 그에 해당하는 설정파일이다.\n\n```yaml\napiVersion: v1\nmetadata:\n  name: kube-lego\n  namespace: customize this!\ndata:\n  # modify this to specify your address\n  lego.email: # \"Let's Encrypt 계정으로 사용할 이메일주소\"\n  # configure letsencrypt's production api\n  lego.url: \"https://acme-v01.api.letsencrypt.org/directory\"\nkind: ConfigMap\n\n```\n\n<br />\n\n다음은 `kube-lego` 설정파일이다.\n\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: kube-lego\n  namespace: customize this!\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: kube-lego\n    spec:\n      containers:\n      - name: kube-lego\n        image: jetstack/kube-lego:0.1.5\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: LEGO_EMAIL\n          valueFrom:\n            configMapKeyRef:\n              name: kube-lego\n              key: lego.email\n        - name: LEGO_URL\n          valueFrom:\n            configMapKeyRef:\n              name: kube-lego\n              key: lego.url\n        - name: LEGO_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: LEGO_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        readinessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n          initialDelaySeconds: 5\n          timeoutSeconds: 1\n```\n\n<br>\n\n`kube-lego` 설정이 끝나면 다음 명령어를 통해 지금까지의 모든 설정파일들을 적용시킨다.\n\n```powershell\n$ kubectl apply -f \"yaml 파일명\"\n```\n\n<br>\n\n실제 pod가 동작하는 것을 보고싶다면 namespace 로 통일된 설정파일로 생성한 POD의 log를 찍어볼 수 있다.\n\n```powershell\n$ kubectl get pods -n \"설정한 namespace명\"\n```\n\n<br>\n\n\n```powershell\n$ kubectl logs -f \"kube-lego-0000\" -n \"설정한 namespace명\"\n\ntime=\"2018-02-10T17:44:12Z\" level=info msg=\"requesting certificate for [설정 도메인]\" context=\"ingress_tls\" name=myingress namespace=default\ntime=\"2018-02-10T17:44:20Z\" level=info msg=\"authorization successful\" context=acme domain=[설정 도메인]\ntime=\"2018-02-10T17:44:21Z\" level=info msg=\"successfully got certificate: domains=[설정 도메인] url=[let's encrypt acme 주소]\" context=acme\ntime=\"2018-02-10T17:44:21Z\" level=info msg=\"Secret successfully stored\" context=secret name=[설정해준 시크릿 이름] namespace=default\ntime=\"2018-02-11T01:34:36Z\" level=info msg=\"Periodically check certificates at 2018-02-11 01:34:36.919178554 +0000 UTC\" context=kubelego  \ntime=\"2018-02-11T01:34:36Z\" level=info msg=\"process certificate requests for ingresses\" context=kubelego\ntime=\"2018-02-11T01:34:36Z\" level=info msg=\"cert expires in 89.6 days, no renewal needed\" context=\"\" expire_time=2018-05-11 16:44:20 +0000 UTC name=[인그레스 이름] namespace=default\ntime=\"2018-02-11T01:34:36Z\" level=info msg=\"no cert request needed\" context=\"[인그레스 tls 이름]\" name=[인그레스 이름] namespace=default\ntime=\"2018-02-11T09:34:36Z\" level=info msg=\"Periodically check certificates at 2018-02-11 09:34:36.919211522 +0000 UTC\" context=kubelego\n```\n\n위의 로그는 생성해놓은 시크릿 키파일로 `kube-lego`가 `Let's Encrypt`에 인증을 요청해서 인증서를 발급받아오는 과정을 보여준다. 이전 포스트에서 `Ingress`로 배포를 했다면 인증서 발급은 이렇게 간단하게 끝난다.\n\n\n콘솔을 확인해보면 `kube-lego`용 설정파일에서 지정한 이름으로 url이 생성되는데, 다음 패턴을 따른다.\n\n```\ningress에 등록한 도메인주소/well-known/acme-challenge\n```\n\n위의 도메인으로 접속해보면 이전 포스트에서 설치해준 `http-default-backend`에 의해 404 페이지가 뜨는 것을 확인할 수 있다.\n\n<br>\n\n### `주의`\n인증서 발급에 시간이 걸리기 때문에 위의 로그가 찍혔더라도 브라우저로 도메인을 확인해보면 여전히 `Not Secure`가 뜰 가능성이 있다. 내 경우에는 10분 정도 기다리다가 창을 새로고침해보니 적용이 되었었다.\n\n<br>\n\n---\n\n## 마치며\n\n구글 클라우드 플랫폼에서 쿠버네트 엔진을 쓰고, 외부 호스팅 서비스(예를 들면 Cloudflare)를 쓰지 않을 경우 `kube-lego`를 사용하자. 막상 적용할 때는 정말 어려웠지만 포스팅하면서 정리해보니 `kube-lego`가 굉장히 간편한 툴이라는 것을 깨달았다...\n\n<br>\n","excerpt":"사이트를 배포하고 나서 반드시 해주어야 하는 작업이 있다. 바로 웹사이트 도메인에  인증서를 발급받는 일이다. 특히 크롬/사파리 브라우저는 앞으로 인증서가 없는 웹사이트에 접속 시 경고창을 띄울 것이라고 공지한 만큼 SSL인증서 발급은 웹사이트 배포…","fields":{"slug":"/ggcloudDeploy-6_02/"},"frontmatter":{"date":"Feb 13, 2018","title":"Google News Lab > 6. SSL 인증서 발급 <2편> kube-lego 이해하기","tags":["Google News Lab","Kubernetes","Django","SSL","Let's Encrypt"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, **쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리**\n에 대해서 설명하고자 한다.\n\n<br />\n\n## 1. 쿠버네트는 HTTP(S) 로드밸런싱을 선호한다.\n\n해당 부분은 설명이 여기저기 분산되어 있고 구글에서 제공하는 문서가 다소 빈약하므로 포괄적인 원리에 대해서 개인적으로 이해한 바대로 설명하겠다.\n\n쿠버네트 엔진 문서를 보면 다음과 같이 두 가지의 방식의 배포방법을 알려준다.\n\n```txt\nKubernetes Engine offers integrated support for two types of cloud load balancing for a publicly accessible application:\n\n\t1. You can create TCP load balancers by specifying type: LoadBalancer on a Service resource manifest. Although a TCP load balancer works for HTTP web servers, they are not designed to terminate HTTP(S) traffic as they are not aware of individual HTTP(S) requests. Kubernetes Engine does not configure any health checks for TCP load balancers.\n\n\t2. You can create HTTP(S) load balancers by using an Ingress resource. HTTP(S) load balancers are designed to terminate HTTP(S) requests and can make better context-aware load balancing decisions. They offer features like customizable URL maps and TLS termination. Kubernetes Engine automatically configures health checks for HTTP(S) load balancers.\n\nIf you are exposing an HTTP(S) service hosted on Kubernetes Engine, HTTP(S) load balancing is the recommended method for load balancing.\n```\n\n위의 설명을 간략히 설명하면 **쿠버네트 엔진을 사용하는 경우 HTTP(S) 로드 밸런싱 방식을 사용하는 것을 추천**\n하고 있다. 이 방식은 도메인을 호스트명으로 두고 여러 개의 URL을 생성해 연결할 수 있다는 점과 TLS 인증서 발급을 커스터마이징할 수 있다는 관리 측면의 장점을 가지고 있다.\n\n1번에서 설명한 TCP 로드밸런싱 방식의 배포가 `Service` 설정으로 배포를 진행한다면\nHTTP(S) 로드 밸런싱 기법은 `Ingress` 설정을 사용한다. 그렇다면 `Ingress`는 무엇일까?\n\n<br />\n\n## 2. Ingress 이해하기\n\n<a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\" target=\"_blank\">Ingress에 대한 문서</a>가 처음 읽으면 어렵기도 하고 전체 개념을 설명해주지 않는 것 같아서 핵심적인 부분만 인용하여 설명하고자 한다.\n\n기존의 **TCP 방식 로드밸런싱 방식**은 다음과 같다. 즉, 웹앱을 직접 연결하여 퍼블리싱하는 방식이다.\n\n```txt\n    internet\n        |\n  ------------\n  [ Services ]\n```\n\n반면 **`Ingress`는 `internet`과 `Service`(배포한 클러스터) 사이에 위치해 외부에서 들어오는 복수 개의 인바운드 요청을 클러스터로 연결해주는 설정파일**이다. 즉, 다음과 같이 그려볼 수 있다.   \n\n```txt\n    internet\n        |\n   [ Ingress ]\n   --|-----|--\n   [ Services ]\n```\n\n이러한 `Ingress`는 다음과 같은 설정을 가능케 한다.\n\n- 외부로 연결되는 URL을 원하는 갯수만큼 설정 가능 == 들어오는 문을 여러 개 만드는 것\n- 로드밸런스 트래픽 처리 == 유연한 분산처리\n- SSL 설정 가능 == 보안 처리\n- 이름 기반 가상호스팅 가능 == 도메인 호스팅이 별도로 필요없음\n\n<br />\n\n위의 개념 설명을 바탕으로 매우 간략하게 짜여진 `Ingress` 파일을 살펴보면 다음과 같다.\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress   # 파일형식\nmetadata:\n  name: test-ingress   # 해당 설정에 할당하는 이름\n  annotations:    # 세부 설정(나중에 Ingress 컨트롤러, tls 관련 설정이 여기에 들어간다)\n    ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath    # Ingress를 적용하기 원하는 패스\n        backend:\t   # 서브하고자 하는 백엔드 서비스 설정\n          serviceName: test\n          servicePort: 80\n```\n\n<br />\n\n`Ingress`는 설정파일이라고 했는데, 이 말인 즉슨 `Ingress` 설정파일은 그 자체로 동작하지 않는다. 따라서 `Ingress`에 적힌대로 처리를 해주는 `Ingress-Controller`가 필요하다.\n\n보통 `Nginx`를 사용하는 편이고, Jay Gorrell의 문서[^1]에 따르면 <a href=\"https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%B2%84%EC%8A%A4_%ED%94%84%EB%A1%9D%EC%8B%9C\" target=\"_blank\">리버스 프록싱</a>이 가능한 모든 시스템이면 된다고 한다. 예를 들면 `Apache` 웹서버나 `Nginx`와 같은 것들이다. 해당 역할은 보안을 위한 것인데, 클라이언트가 서버로 요청을 보낼 때 가운데에서 중개를 해주고 공격이 들어오더라도 내부서버로 침투하지 못하도록 하는 역할을 한다.\n\n나는 이 역할을 해주는 `Nginx Ingress Controller`를 사용했다. 만약 로드밸런서 서비스를 지원하지 않는 플랫폼에서 배포를 하는 경우에는 배포하고자 하는 앱을 `NodePort`로 배포한 후 해당 노드와 연결시켜주면 된다. 이렇게 하면 리버스 프록시 라우팅이 노출된 `NodePort` 내부 각 노드의 Ingress Controller로 연결된다.  \n\n내 Ingress Controller의 설정파일은 다음과 같다.\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: customize-this! // # Deployment의 namespace와 통일해주자!\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    name: http\n  - port: 443\n    name: https\n  selector:\n    k8s-app: nginx-ingress-controller\n\n---\n\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: nginx-ingress-controller\n  labels:\n    k8s-app: nginx-ingress-controller\n  namespace: customize-this!\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: nginx-ingress-controller\n      annotations:\n        prometheus.io/port: '10254'\n        prometheus.io/scrape: 'true'\n    spec:\n      terminationGracePeriodSeconds: 60\n      containers:\n        - name: nginx-ingress-controller\n          image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.11\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: POD_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n          ports:\n          - name: http\n            containerPort: 80\n            hostPort: 80\n          - name: https\n            containerPort: 443\n            hostPort: 443\n          args:\n            - /nginx-ingress-controller\n            - \"--default-backend-service=$(POD_NAMESPACE)/default-http-backend\"\n```\n\n<br />\n\n## 3. Default-http-backend?\n\n자, 컨트롤러의 설정파일을 찬찬히 봤다면 또 다른 의문이 들 것이다. `default-http-backend`는 무엇일까?\n\n위의 Controller 설정 파일은 Ingress 설정에서 요청한 라우트를 서빙하기 위해 Ingress 리소스를 모니터링한다. 해당 파일은 실행시 `--default-http-backend`라는 아규먼트를 요청하는데, 이는 Nginx Ingress Controller를 사용할 경우에만 필요로 한다.\n\n<br>\n\n간단히 말하면 `Default-http-backend`는 Ingress Controller가 확인할 수 없는 Ingress 설정이 있을 경우 `404` 페이지를 돌려주는 서비스이다.\n\n아래의 설정파일에도 적혀있듯이, 404 페이지를 반환하는 도커이미지면 모두 `Default-http-backend`로 사용할 수 있다. 단, `/healthz` 패스에서는 `200`을 돌려주도록 설정되어 있다.\n\n```yaml\n# default-deployment.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: default-http-backend\n  labels:\n    app: default-http-backend\n  namespace: customize this! # Service의 namespace와 통일해주자!\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: default-http-backend\n    spec:\n      terminationGracePeriodSeconds: 60\n      containers:\n      - name: default-http-backend\n        # Any image is permissable as long as:\n        # 1. It serves a 404 page at /\n        # 2. It serves 200 on a /healthz endpoint\n        image: gcr.io/google_containers/defaultbackend:1.4\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n            scheme: HTTP\n          initialDelaySeconds: 30\n          timeoutSeconds: 5\n        ports:\n        - containerPort: 8080\n        resources:\n          limits:\n            cpu: 10m\n            memory: 20Mi\n          requests:\n            cpu: 10m\n            memory: 20Mi\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: default-http-backend\n  namespace: customize this!\n  labels:\n    k8s-app: default-http-backend\nspec:\n  selector:\n    k8s-app: default-http-backend\n  ports:\n    - port: 80\n      targetPort: 8080\n```\n\n<br />\n\n## 4. 마치며\n\n지금까지 설명한 것을 초보 개발자가 한번에 이해하기에는 무리가 있다. 다시 간단히 요약해보면, Kubenetes 엔진에서 선호하는 HTTP(S) Load Balancing 방식의 배포를 하기 위해 여러 서브도메인으로의 라우팅이 가능한 `Ingress`를 사용했고, 이 `Ingress`를 동작하도록 하기 위해 `Nginx-Ingress-Controller`를 사용했다. 그리고 `Nginx-Ingress-Controller`를 사용하기에  `Default-http-backend` 설정을  해주었다.\n\n지금까지는 기본적으로 `Ingress`를 사용한 배포 설정을 설명한 것이다. 다음 포스트에서는 `TLS/SSL 인증서`에 대한 개념설명과 `kube-lego`라는 멋진 라이브러리를 소개하고자 한다.\n\n\n---\n\n[^1]: <a href=\"https://medium.com/@cashisclay/kubernetes-ingress-82aa960f658e\" target=\"_blank\">Ingress에 대해 잘 설명해놓은 Jay Gorrell의 문서</a>\n","excerpt":"웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, 쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리\n에 대해…","fields":{"slug":"/ggcloudDeploy-6_01/"},"frontmatter":{"date":"Feb 11, 2018","title":"Google News Lab > 6. SSL 인증서 발급 <1편> 배포방식에 대한 고찰","tags":["Google News Lab","Kubernetes","Django","SSL","Let's Encrypt"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n장고 프로젝트를 생성하고 처음 로컬서버를 실행했을 때 항상 마주하는 로그가 있다. 바로 이것!\n\n<br>\n\n![파비콘이 적용안됨](imgs/2018-02-11/noico.png)\n\n장고는 기본 `.ico` 파일을 기본적으로 제공하지 않는다. 결국 로컬 서버는 파일을 찾을 수 없다는 `404` 로그를 남긴다.\n\n<br>\n\n파비콘은 영어로 `favicon`이라 쓰고, 'favorites'와 'icon' 을 합쳐서 부르는 말인데, **인터넷 웹브라우저의 주소창에 표시되는 웹사이트나 웹페이지를 대표하는 아이콘**이다.\n\n이런 처리는 매우 사소하지만 배포 환경에서 빈 이미지를 띄우는 것보다는 로고 이미지라도 하나 있는 것이 웹사이트 완성도에 기여한다고 생각해서 적용시키고 간단히 포스팅을 남긴다.\n\n<br>\n\n## 1. 파비콘 이미지 준비하기\n\n현재 제작중인 웹페이지의 로고를 이미지로 사용했다. 이 이미지는 기본적으로 `.png` 확장자를 가진 파일이다.\n\n해당 파일을 아래 사이트에서 `.ico` 파일로 변환시켜준다. 그러면 사이트에서 알아서 변환하여 `.ico` 파일을 다운받을 수 있도록 해준다.\n\n<br>\n\n<a href=\"http://convertico.com/\" target=\"_blank\">파비콘 이미지로 사용할 .png 파일을 `.ico`확장자로 변환해주는 사이트</a>\n\n\n![파비콘 제작 사이트](imgs/2018-02-11/faviconmakingsite.png)\n\n\n<br>\n\n## 2. 파비콘 적용하기\n\n만든 `.ico` 파일은 장고 프로젝트 내 `static`폴더에 넣어준다. 그리고 경로를 기억해둔다. 나는 아래의 경로에 넣어주었다.\n\n```txt\n/static/images/logo.ico\n```\n\n\n<br />\n\n\n템플릿 폴더 내에 `base.html` 파일의 `<head>` 태그 내에 링크를 생성해준다. 장고의 템플릿 태그를 써서 위의 경로를 지정해주었다.\n\n```html\n<!--common/base.html-->\n\n{% raw %}{% load staticfiles %}{% endraw %}\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n\t<link rel=\"icon\" href=\"{% raw %}{% static 'images/logo.ico' %}{% endraw %}\">\n\t...\n  </head>\n```\n\n웹사이트 배포를 마친 상태라면 static 서버에 이미지가 저장된 경로로 찾아갈 수 있도록 후작업이 필요하다.\n\n<br />\n\n## 3. 완성!\n\n로컬 서버를 다시 돌려보면 아래와 같이 파비콘이 적용된 모습을 볼 수 있다!\n\n![파비콘 적용](imgs/2018-02-11/ico.png)\n\n<br />\n","excerpt":"장고 프로젝트를 생성하고 처음 로컬서버를 실행했을 때 항상 마주하는 로그가 있다. 바로 이것! 파비콘이 적용안됨 장고는 기본  파일을 기본적으로 제공하지 않는다. 결국 로컬 서버는 파일을 찾을 수 없다는  로그를 남긴다. 파비콘은 영어로 이라 쓰고,…","fields":{"slug":"/ggcloudDeploy_07/"},"frontmatter":{"date":"Feb 11, 2018","title":"Google News Lab > 장고로 만든 웹사이트에 커스텀 파비콘(.ico) 적용시키기","tags":["Google News Lab","Django","favicon"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n오늘 포스팅은 오랜만에 삽질하며 구글 클라우드 플랫폼으로 장고 프로젝트 배포를 성공했기에, 그 방법을 다시 한번 숙지할 겸 공유하고자 한다.\n\n<br>\n\n## 근황보고\n\n현재 구글 뉴스랩 프로그램에 개발자로 참여하여 뉴스컨텐츠 제작 작업을 진행하고 있다. 뉴스랩 활동에 대해서는 프로그램이 끝나고 따로 포스팅할 예정이다 :) (블로그 활동이 뜸한 이유는 바로 이것때문!ㅋㅋ)\n\n<br>\n\n## 시작 전 구상하기\n\nAWS로 배포를 한번 해봤던 터라 배포과정은 대략적으로 다음과 같이 구상했다.\n\n`장고 프로젝트 생성(데이터베이스 포함)` > `웹서버 구축` > `도커이미지 생성` > `구글 엔진에 이미지 배포`\n\n하지만 AWS와 구글 엔진 작동 원리는 좀 달랐다.\n구글의 기본 스탠다드/플렉시블 엔진을 사용할 경우 배포 설정이 담긴 `app.yaml`와 `requirements.txt`만 있으면 배포가 된다.\n\n도커 이미지를 배포하려면 다른 엔진을 써야했는데,  \n처음에는 컴퓨트 엔진에 바로 도커이미지를 태울까 생각도 했었지만 장고의 도커이미지를 올리는 데 `Kubernete` 엔진이 적합하다는 튜토리얼의 문구를 믿고(...선택의 여지가 없었다. 문서가 너무 빈약함) 따라해보기로 했다.\n\n<a href=\"https://cloud.google.com/python/django/kubernetes-engine\" target=\"_blank\">문서 바로가기 - Deploying Djnago with Kubernetes Engine</a>\n\n<br>\n\n## 1. 장고 프로젝트 생성\n\n먼저 배포할 장고 프로젝트를 생성한다. 생성하는 방법은 <a href=\"#\" target=\"_blank\">여기</a>에 따로 설명해놓았는데, 주의할 점은 `pyenv`를 사용하지 않고 `virtualenv`를 사용할 것이기 때문에 가상환경 설정은 따로 설명한다.\n\n`Github`에 <a href=\"https://github.com/juliahwang/pilter_web/tree/master/\" target=\"_blank\">소스코드</a>를 올려놓았다.\n프로젝트를 만든 후 파일구조는 다음과 같다.\n\n```powershell\n./django_app\n.\n├── README.md\n├── __init__.py\n├── article\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   ├── models.py\n│   ├── tests.py\n│   ├── urls.py\n│   └── views.py\n├── config\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── manage.py\n├── static\n└── templates\n```\n\n<br>\n\n## 2. 가상환경 설정하기\n\n**구글엔진을 쓰면서 가장 불편했던 점은 커멘드라인 툴이 파이썬 2.7까지만 호환된다는 점이다.** 거기다가 개발은 파이썬 3으로 하라고 권장하니, 하나의 폴더 내에 2개의 가상환경을 만들어서 서로 바꿔가며 써야했다.\n\n이에 `virtualenv`를 사용했다.\n\n```powershell\n$ virtualenv --python=python2 pilter2\n$ virtualenv --python=python3 pilter3\n```\n\n`pilter2`와 `pilter3`에 각각 파이썬2, 파이썬3을 설정하여 가상환경을 만들면 된다.\n\n```powershell\n$ virtualenv env\n$ source env/bin/activate\n$ pip install -r requirements.txt\n```\n\n<br>\n\n### (1) requirements.txt\n\n쿠버네트 엔진에서 장고를 배포할 때 필요한 패키지는 다음과 같다.\n\n```txt\nDjango==1.10\nwheel==0.30.0\ngunicorn==19.7.1\npsycopg2==2.7.3.2\nPillow==5.0.0   (--> ImageField를 쓰지 않는다면 생략 가능)\n```\n\n<br>\n\n## 3. 준비사항\n\n### (1) 빌링 허용하기\n\n구글 서비스를 사용하기 위해 <a href=\"https://console.cloud.google.com\" target=\"_blank\">구글 클라우드 콘솔</a>로 접속한다. 첫 가입시 무료 크레딧 300개를 주니 해당 크레딧으로 빌링을 등록한다. 빌링을 등록해야 인스턴스, 데이터 스토리지 등의 서비스를 사용할 수 있다.\n\n<br>\n\n### (2) Google Cloud SDK 설치하기\n\n구글 클라우드 플랫폼에서 제공하는 리소스, 툴, 라이브러리 등을 사용하기 위해서는 SDK를 다운받아야한다. <a href=\"https://cloud.google.com/sdk/docs/\" target=\"_blank\">여기</a>서 자신의 컴퓨터 사양에 따라 다운받으면 된다. (아무데나 위치시켜도 되지만 나는 해당 폴더를 프로젝트 폴더 경로 내에 넣어주었다.)\n\n받고 나서는 설치 파일을 실행해주고, 초기화를 진행해준다.\n\n```powershell\n# 설치파일 실행\n$ ./google-cloud-sdk/install.sh\n# 설치파일 실행후에는 터미널 다시 열기!\n\n# 초기화\n$ ./google-cloud-sdk/bin/gcloud init\n```\n\n이제 콘솔에서 `gcloud`, `gsutil` 등의 커맨드 라인 툴을 사용할 수 있다.\n\n문서를 보면 API를 활성화하라고 하는데, 나는 권한이 없어서 따로 해주지 않았다... 살펴보니 Google Cloud SQL API만 있으면 되는 것 같다.(직접 쓸 것이므로)  \n\n<br>\n\n## 4. 마치며\n\n다음 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다.\n\n<br>\n","excerpt":"오늘 포스팅은 오랜만에 삽질하며 구글 클라우드 플랫폼으로 장고 프로젝트 배포를 성공했기에, 그 방법을 다시 한번 숙지할 겸 공유하고자 한다. 근황보고 현재 구글 뉴스랩 프로그램에 개발자로 참여하여 뉴스컨텐츠 제작 작업을 진행하고 있다. 뉴스랩 활동에…","fields":{"slug":"/ggcloudDeploy_01/"},"frontmatter":{"date":"Jan 29, 2018","title":"Google News Lab > 1. 구글 클라우드 플랫폼을 사용한 배포 전 준비","tags":["Google News Lab","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n이번 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다.\n\n<br>\n\n## 1. Cloud SQL Proxy용 로컬환경 구축하기\n\n배포된 앱은 클라우드 SQL 인스턴스와 통신하기위해 Cloud SQL Proxy를 사용한다. 다음은 옵션 기능이지만, 로컬에서 테스트용을 설치하는 방법이다.\n\n```powershell\n# Proxy 다운로드\n$ curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.darwin.amd64\n\n# 프록시 사용가능하도록 활성화\n$ chmod +x cloud_sql_proxy\n```\n\n<br>\n\n## 2. Cloud SQL 인스턴스 생성\n\n이후 연결해 줄 Cloud SQL 인스턴스를 생성한다. 데이터베이스는 postgreSQL을 사용하기로 하였다.(아직은 베타버전을 제공하고 있다.)\n\n다음 명령어로 콘솔에서 인스턴스 이름, 사용할 CPU 개수와 메모리 크기를 명시해준다.\n\n```powershell\n$ gcloud sql instances create [새로운 인스턴스명] --database-version=POSTGRES_9_6 \\\n       --cpu=[CPUS 갯수] --memory=[메모리 사이즈]\n```\n\n<br>\n\n아까 설치한 Cloud SDK를 사용하면 생성한 SQL 인스턴스의 정보 및 `connectionName`을 알아낼 수 있다.\n\n```powershell\n$ gcloud sql instances describe [SQL 인스턴스명]\n```\n\n`connectionName`은 설정파일(settings.py) 및 곧 생성할 `app.yaml`에 필요하므로 따로 보관해둔다. 보통 다음과 같이 구성되어 있다.\n\n```powershell\n# 예시\n# connectionName: [프로젝트명]:[리전위치]:[인스턴스 이름]\n\nconnectionName: project11:asia-northeast1:\n```\n\n<br>\n\n## 3. Cloud SQL 실행하기\n\n앞서 발급받은 `connectionName`을 사용하여 Cloud SQL Proxy를 실행할 수 있다.\n\n```powershell\n$ ./cloud_sql_proxy -instances=\"[connectionName]\"=tcp:5432\n```\n\n이렇게 하면 로컬환경과 생성해준 Cloud SQL 인스턴스를 연결하는 테스팅 환경이 생긴다.\n\n데이터 베이스는 `psql`로 간단히 만들고 마이그레이션 해주었다.\n\n데이터베이스 테이블명과 비밀번호는 `settings.py`에 필요한 정보지만 외부에 노출되면 안되니 **환경변수**로 지정하거나 따로 **시크릿 파일**을 만들어서 관리하면 된다. 나 같은 경우에는 환경변수로 등록해주었다.\n\n```\n$ export DATABASE_USER=<만들어준 유저명>\n$ export DATABASE_PASSWORD=<비밀번호값>\n```\n\n그리고 데이터베이스 설정을 장고 내 설정파일(`settings.py`)에 넣어준다.\n\n```python\nDATABASES = {\n    'default': {\n        # If you are using Cloud SQL for MySQL rather than PostgreSQL, set\n        # 'ENGINE': 'django.db.backends.mysql' instead of the following.\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': '[test-db-name]',\n        'USER': os.getenv('DATABASE_USER'),\n        'PASSWORD': os.getenv('DATABASE_PASSWORD'),\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n```\n\n<br>\n\n## 4. 마치며\n\n다음 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다.\n\n<br>\n","excerpt":"이번 포스팅에서는 Cloud SQL Proxy를 통하여 PostgreSQL 데이터베이스를 생성, 연결하는 방법에 대해 설명할 예정이다. 1. Cloud SQL Proxy용 로컬환경 구축하기 배포된 앱은 클라우드 SQL 인스턴스와 통신하기위해 Clou…","fields":{"slug":"/ggcloudDeploy_02/"},"frontmatter":{"date":"Jan 29, 2018","title":"Google News Lab > 2. 프록시 서버 및 데이터베이스 구축","tags":["Google News Lab","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스팅에서는 Google Cloud Storage를 사용하여 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다.\n\n<br>\n\n## 1. Cloud Storage에 버킷 생성\n\n구글 클라우드 플랫폼에서는 Gunicorn 서버를 사용하여 앱을 배포한다. 하지만 Gunicorn 서버는 정적 파일을 서빙하지 않기 때문에 따로 Cloud Storage를 생성하여 정적파일을 서빙해줘야 한다.\n\n\n먼저 버켓을 생성하고 기본적으로 버켓을 공개해놓는다.\n\n```powershell\n# 버켓 생성\n$ gsutil mb gs://<버켓이름>\n\n# 기본 공개 설정\n$ gsutil defacl set public-read gs://<버켓이름>\n```\n\n<br>\n\n장고로 돌아와서, 프로젝트 내의 정적파일을 한 폴더에 모아준다.\n\n```powershell\n$ ./manage.py collectstatic\n```\n\n<br>\n\n파일이 `static/` 안에 모두 모였다면 버켓과 해당 폴더를 연결해준다.\n\n\n```powershell\n# gsutil rsync -R static/ gs://<버켓이름>/static\n```\n\n연결해 준 후에는 `settings.py`의 `STATIC_URL`을 다음과 같이 바꿔준다.\n\n```python\n# settings.py\n\nSTATIC_URL=\"http://storage.googleapis.com/<버켓이름>/static/\"\n```\n\n완료! 이제 Kubernetes 엔진을 생성해보자.\n\n<br>\n\n\n## 2. Kubernetes 엔진 클러스터 생성하기\n\n### (1) 클러스터 생성\n\n<a href=\"https://console.cloud.google.com/kubernetes\" target=\"_blank\">\nKubernetes 엔진 콘솔 페이지</a>에서 엔진 준비가 된 것을 확인한 후에 다음 명령어로 클러스터를 만들어준다.\n\n```powershell\n$ gcloud container clusters create test-app \\\n  --scopes \"https://www.googleapis.com/auth/userinfo.email\",\"cloud-platform\" \\\n  --num-nodes 2 --zone \"asia-northeast1-a\"\n```\n\n<br>\n\n### (2) 클러스터 확인\n\n클러스터를 만들고 나서는 `kubectl` 명령어로 클러스터 설정을 제공할 예정이므로 만들어준 클러스터 인스턴스를 쓸 것임을 다음 명령어로 확인해준다.\n\n```\n$ gcloud container clusters get-credentials test-app --zone \"asia-northeast1-a\"\n```\n\n<br>\n\n### (3) 클러스터 시크릿파일 설정\n\n인스턴스 수준의 접근을 허용하는 크레덴셜 파일을 생성한다. 해당 json 파일은 서비스 계정 생성시 받은 파일이다.\n\n```powershell\n$ kubectl create secret generic cloudsql-oauth-credentials --from-file=credentials.json=[프로젝트 내 credentials.json의 상대경로]\n```\n\n<br>\n\n두 번째 시크릿 파일은 데이터베이스에 접근하기 위한 파일이다.\n\n```powershell\n$ kubectl create secret generic cloudsql --from-literal=username=[데이터베이스 사용자명] --from-literal=password=[비밀번호값]\n```\n\n두 파일 모두 만들어 주면 엔진 사용설정은 끝이 난다.\n\n<br>\n","excerpt":"이번 포스팅에서는 Google Cloud Storage를 사용하여 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다. 1. Cloud Storage에 버킷 생성 구글 클라우드 플랫폼에서는 Gunicorn 서버를 사용하여 앱…","fields":{"slug":"/ggcloudDeploy_04/"},"frontmatter":{"date":"Jan 29, 2018","title":"Google News Lab > 4. Kubernetes 버킷 및 클러스터 엔진 생성","tags":["Google News Lab","Kubernetes","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 배포에서는 웹서버로 `gunicorn`을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다.\n\n<br>\n\n## 1. Gunicorn 서버설정 + 도커파일 생성\n\n### (1) 도커파일 작성\n\n```docker\nFROM gcr.io/google_appengine/python\n\n# Create a virtualenv for the application dependencies.\n# # If you want to use Python 3, add the -p python3.4 flag.\nRUN virtualenv /env\nENV PATH /env/bin:$PATH\n\nADD requirements.txt /app/requirements.txt\nRUN /env/bin/pip install -r /app/requirements.txt\nADD . /app\n\nCOPY start.sh /start.sh\n\nEXPOSE 80 8000\n\n\nCMD gunicorn -b :$PORT config.wsgi\nCMD [\"/start.sh\"]\n```\n\n만들어준 도커파일은 위와 같다. 기본으로 제공하는 도커파일과 다른 점이 있다면 나는 Gunicorn 서버를 직접 실행해서 연결해줬다는 점이다.\n\n<br>\n\n### (2) Gunicorn 서버 설정\n\n이를 위해서 해당 폴더 경로에 Gunicorn 서버를 실행해주는 `start.sh`를 만들어줬다.\n\n로컬에서 테스팅할 때나 도커를 특정포트로 실행시킬 때 유용하게 사용했다.\n\n```sh\n#!/bin/bash\n\n# Start Gunicorn processes\necho Starting Gunicorn.\nexec gunicorn config.wsgi:application \\\n    --bind 0.0.0.0:8080 \\\n    --workers 3\n```\n\n다만 **주의할 점은 `bind`하는 포트번호를 `app.yaml`의 `TargetPort`와 동일하게 적어줘야한다는 점**이다. (나는 이걸 모르고 하루를 낭비했다...)\n\n<br>\n\n### (3) 도커 이미지 생성\n\n구글에서는 Cloud SQL Proxy 서비스를 위해 기본적으로  퍼블릭 도커 이미지를 제공한다. 다음 명령어로 다운받을 수 있다.\n\n```powershell\n$ docker pull b.gcr.io/cloudsql-docker/gce-proxy:1.05\n```\n\n위의 이미지를 이용해서 내 도커이미지를 만들어준다.\n\n```powershell\n$ docker build -t gcr.io/[프로젝트명]/test .\n```\n\n만들어준 도커이미지는 다시 구글 컨테이너 레지스트리에 올려준다.\n\n```powershell\n$ gcloud docker push gcr.io/[프로젝트명]/test\n```\n\n이렇게 만든 도커이미지는 클라우드에서 액세스 가능한 프로젝트 스냅샷을 제공하게 된다.\n\n<br>\n\n## 2. 배포하기\n\n도커이미지까지 모두 준비가 끝났다. 이제는 배포 환경설정 파일에 서비스를 만들어주는 환경설정을 추가해주는 일만 남았다.\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: test\n  labels:\n    app: test\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 8080\n  selector:\n    app: test\n```\n\n위의 기본 로드밸런서 설정을 `app.yaml`에 추가해준다.\n\n다음 명령어로 설정을 클러스터에 등록해준다.\n\n```powershell\n$ kubectl create -f app.yaml\n```\n\n파일을 등록해준 후 몇 분 기다리면 `pod`가 생긴다. 이전 포스팅에서 클러스터를 생성할 때 `node=2`로 설정한 부분이다.  \n\n`pods`를 실시간으로 확인하고 싶다면 다음 명령어를 사용하면 된다.\n\n```powershell\n$ kubectl get pods  \nNAME                       READY     STATUS    RESTARTS   AGE\ntest-*******************   2/2      Running    0          3h\ntest-*******************   2/2      Running    0          3h\ntest-*******************   2/2      Running    0          3h\n```\n<br>\n\n`Pods`들이 `Running` 상태인 것을 확인했다면 이제 외부 IP를 통해 브라우징이 가능하다. 세세한 오류들은 콘솔 홈페이지의 오류보고를 살펴보고 디버깅이 가능하다.\n\n```powershell\n$ kubectl get services test\n```\n\n이상으로 배포를 완료했다!\n\n<br>\n\n---\n\n## 3. 마치며\n\nAWS를 사용한 배포에 익숙한 나에게 선택권이 많고 레퍼런스를 찾기 힘든 구글 클라우드 엔진은 만만치 않은 툴이었다.\n\n결국 배포 성공한 후 내가 얻은 깨달음은 어렵고 생소했다기 보다는 네트워크 설정에 너무 겁을 먹었다는 것이다. (마지막 에러를 해결했을 때 그 허무함이란...)\n\nAWS로 배포하는 것과 잠시 비교를 해보자면 설정이 훨씬 줄어들었다는 점에서는 구글 클라우드를 칭찬할만 하지만 문서나 인터페이스는 아직 AWS에 비하면 한참 멀었다. ~~후발 주자니까 당연하겠지만...~~\n\n그래도 오랜만에 일주일동안 머리 싸매고 배포를 해보니 개발에 대한 욕구가 샘솟는다! 헠헠! 이상으로 구글 클라우드로 장고 배포(~~고군분투~~)를 마친다.\n\n<br>\n","excerpt":"이번 배포에서는 웹서버로 을 사용하였는데, 도커파일 생성하는 방법과 함께 웹서버를 어떻게 구성했는지 설명할 예정이다. 또, 배포 마지막 단계에 대해 서술했다. 1. Gunicorn 서버설정 + 도커파일 생성 (1) 도커파일 작성 만들어준 도커파일은 …","fields":{"slug":"/ggcloudDeploy_05/"},"frontmatter":{"date":"Jan 29, 2018","title":"Google News Lab > 5. 도커파일 생성 및 배포","tags":["Google News Lab","Kubernetes","Django","Docker","Gunicorn"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다.\n\n<br>\n\n## 1. 서비스 계정(Service Account) 생성\n\n서비스 계정은 IAM 내에서 제공중이다. <a href=\"https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts\" target=\"_blank\">해당 콘솔페이지</a>에서 콘솔 탭메뉴의 `IAM`을 선택한 후 `서비스 계정` 탭을 눌러 알맞은 프로젝트 내에 계정을 생성하면 된다.\n\n이 때, 역할에서 `Cloud SQL` 내의 `Cloud SQL Client`를 부여해준다. 이 서비스 계정 ID는 반드시 유일할 필요는 없지만 알아보기 쉬운 프로젝트 관련 이름으로 정해주는 것이 좋다.\n\n계정 생성이 완료되면 `json`으로 선택한 프라이빗 키 파일이 다운받아진다. 이 키는 서비스계정을인스턴스에 연결할 때, 엔진 생성할 때 필요하므로 안전한 곳에 보관한다.\n\n<br>\n\n## 2. Kubernetes(쿠버네트) 엔진 환경설정 생성\n\n이전 포스팅에서 구글 엔진용 배포 환경설정 파일로  `app.yaml`을 생성해주어야 한다고 언급했다.\n\n이제 이 파일을 생성해보자. 이 때도 `connectionName`이 필요하다. 이 부분을 생략했다면 이전 포스팅을 참고하면 된다.\n\n```yaml\n# app.yaml\n\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: test-app\n  labels:\n    app: test\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: test\n    spec:\n      containers:\n      - name: test-app\n        # Replace  with your project ID or use `make template`\n        image: gcr.io/<프로젝트명>/test\n        # This setting makes nodes pull the docker image every time before\n        # starting the pod. This is useful when debugging, but should be turned\n        # off in production.\n        imagePullPolicy: Always\n        env:\n            - name: DATABASE_USER\n              valueFrom:\n                secretKeyRef:\n                  name: cloudsql\n                  key: username\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: cloudsql\n                  key: password\n        ports:\n        - containerPort: 8080\n\n      - image: b.gcr.io/cloudsql-docker/gce-proxy:1.05\n        name: cloudsql-proxy\n        command: [\"/cloud_sql_proxy\", \"--dir=/cloudsql\",\n                  \"-instances=<connectionName을 써줘야함>=tcp:5432\",\n                  \"-credential_file=/secrets/cloudsql/credentials.json\"]\n        volumeMounts:\n          - name: cloudsql-oauth-credentials\n            mountPath: /secrets/cloudsql\n            readOnly: true\n          - name: ssl-certs\n            mountPath: /etc/ssl/certs\n          - name: cloudsql\n            mountPath: /cloudsql\n      volumes:\n        - name: cloudsql-oauth-credentials\n          secret:\n            secretName: cloudsql-oauth-credentials\n        - name: ssl-certs\n          hostPath:\n            path: /etc/ssl/certs\n        - name: cloudsql\n          emptyDir:\n```\n\n위의 설정은 아직 **배포 서비스에 대한 환경 설정은 포함하지 않은 엔진 자체에 대한 정보**를 담고 있다. 예를 들면 데이터베이스 설정, 장고 프로젝트를 담을 도커 이미지 설정, 그리고 볼륨에 대한 설정 등으로 구성되어 있다.\n\n<br>\n\n## 3. 장고 마이그레이션 및 어드민 생성\n\n장고 프로젝트 생성시 만든 앱을 마이그레이션 해준다. (데이터베이스를 생성하는 작업이다.)\n\n```powershell\n./manage.py makemigrations\n./manage.py migrate\n```\n\n로컬 웹서버를 돌려서 페이지가 정상작동하는지 확인해준다.\n\n```\n$ ./manage.py runserver\n```\n\n<br>\n\n## 4. 마치며\n\n다음 포스팅에서는 정적 파일을 저장해줄 버킷을 생성하고 연동하는 방법에 대해서 알아볼 예정이다.\n\n\n\n<br>\n","excerpt":"이번 포스팅에서는 서비스 계정을 생성하여 Kubernetes 엔진 환경을 구성하는 방식에 대해 설명할 예정이다. 1. 서비스 계정(Service Account) 생성 서비스 계정은 IAM 내에서 제공중이다. 해당 콘솔페이지에서 콘솔 탭메뉴의 을 선택…","fields":{"slug":"/ggcloudDeploy_03/"},"frontmatter":{"date":"Jan 29, 2018","title":"Google News Lab > 3. Kubernetes 엔진 생성 전 설정","tags":["Google News Lab","Kubernetes","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> toWeirdCase함수는 문자열 s를 매개변수로 입력받습니다.\n문자열 s에 각 단어의 짝수번째 인덱스 문자는 대문자로, 홀수번째 인덱스 문자는 소문자로 바꾼 문자열을 리턴하도록 함수를 완성하세요.\n예를 들어 s가 \"try hello world\"라면 첫 번째 단어는 \"TrY\", 두 번째 단어는 \"HeLlO\", 세 번째 단어는 \"WoRlD\"로 바꿔 \"TrY HeLlO WoRlD\"를 리턴하면 됩니다.\n\n> 주의 : 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단합니다.\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/115\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n초반에는 `replace()`를 사용하려고 했었는데, `replace()`는 인덱스에 상관없이 문자열 자체에 같은 문자가 있으면 일괄 변환시켜버렸다.\n\n```python\ns = 'try hello world'\na = s.split()\nanswer = []\nfor i in a:\n    for j in range(len(i)):\n        if j & 1 == 0:\n            i = i.replace(i[j], i[j].upper())\n        else:\n            i = i.replace(i[j], i[j].lower())\n    answer.append(i)\n\np = ' '.join(answer)\nprint(p)\n# TrY HellO WoRlD\n```\n\n<br>\n\n문자열을 단어 단위로 쪼개서 반복문으로 짝수 인덱스만 대문자화한 다음 합치는 방식을 사용하였다.\n\n그래서 작성한 코드는 다음과 같다.\n\n```python\ndef toWeirdCase_1(s):\n    answer = []\n    for i in s.lower().split():\n        for j in range(0, len(i)):\n            if j % 2 == 0:\n                i = i[:j] + i[j].upper() + i[j+1:]\n        answer.append(i)\n    return ' '.join(answer)\n\ntoWeirdCase_1(s=\"hello world\")\n# 'HeLlo WoRlD'\n```\n\n<br>\n\n다음 코드는 리스트 컴프리헨션과 `enumerate()`를 사용하여 한 줄로 작성한 것이다.\n\n단어 단위로 리스트에 저장한 다음 또 단어마다 글자를 돌면서 짝수 인덱스를 대문자화(`upper()`)시킨다. 홀수 인덱스는 이미 대문자일 수도 있으므로 소문자화(`lower()`)시킨다.\n\n그리고 해당 단어들을 공백 기준으로 합치면 원하는 형태의 문자열이 출력된다.  \n\n```python\ndef toWeirdCase_2(s):\n    return ' '.join([''.join([j.upper() if i % 2 == 0 else j.lower() for i, j in enumerate(a)]) for a in s.split()])\n\nprint(toWeirdCase_2(\"try new hello world\"))\n# TrY NeW HeLlO WoRlD\n```\n\n<br>\n","excerpt":"문제 설명 toWeirdCase함수는 문자열 s를 매개변수로 입력받습니다.\n문자열 s에 각 단어의 짝수번째 인덱스 문자는 대문자로, 홀수번째 인덱스 문자는 소문자로 바꾼 문자열을 리턴하도록 함수를 완성하세요.\n예를 들어 s가 \"try hello wo…","fields":{"slug":"/level2. 이상한문자만들기/"},"frontmatter":{"date":"Nov 13, 2017","title":"Python _ Lv2. 이상한 문자 만들기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.\nlongest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.\ns의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.\n예를들어 s가 \"토마토맛토마토\"이면 7을 리턴하고 \"토마토맛있어\"이면 3을 리턴합니다.\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/85\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n처음에는 반복문으로 가능한 경우의 수를 하나하나 나눠서 생각했다. (정렬에 대한 기반이 약해서 이러지 않았나 싶다.)\n\n이중 반복문을 사용했는데, 비교할 부분문자열 범위를 잘 생각해봐야 한다. 먼저 인자로 받은 **문자열 `s`를 반대로 나열한 `rs`**를 만든다.\n\n`s` 문자열에 대하여 반복문을 돌면서 한 글자 이상의 부분문자열 슬라이스가 `rs`에 있으면 해당 문자열의 길이를 `result` 리스트에 저장한다. 그 후 `result` 리스트를 정렬하여 최대 길이를 반환한다.\n\n\n```python\ndef longest_palindrom(s):\n    rs = s[::-1]\n    ls = len(s)\n    result = []\n\n    for i in range(ls+1):\n        for j in range(ls+1):\n            t = s[i:ls-j]\n            if len(t) > 1 and t in rs:\n                result.append(len(t))\n\n    return sorted(result)[-1]\n\nprint(longest_palindrom(\"토마토맛있어토마토마토\")) # 5\nprint(longest_palindrom(\"토마토맛있어\")) # 3\nprint(longest_palindrom(\"토마토마토마토\")) # 7\nprint(longest_palindrom(\"맛있어토마토\")) # 3\nprint(longest_palindrom(\"맛있어토마토네\")) # 3\n```\n\n위의 코드는 다음과 같은 문자열 비교 관련 파이썬 문법을 사용하였다.\n\n```python\na = \"토마토마토\"\nb = \"어있맛토마토마토\"\nif a in b:\n    print(True)\nelse:\n    print(False)\n\n# True\n```\n\n또, 빈문자열이나 길이가 1인 문자도 함께 제외시켜 리스트에 포함되지 않도록 했다.\n\n<br>\n\n리펙토링으로 줄인 코드는 다음과 같다.\n\n```python\ndef longest_palindrom(s):\n    rs = s[::-1]\n    ls = len(s)\n\n    result=[len(s[i:ls-j]) for i in range(ls+1) for j in range(ls+1) if s[i:ls-j] in rs and (len(s[i:ls-j]) > 1)]\n    return sorted(result)[-1]\n```\n\n사실 이 문제는 재귀로 푸는 것이 가장 쉽다..\n\n<br>\n\n## 다른 방식의 코드 및 풀이\n\n재귀로 푼 코드를 보자.\n\n먼저 인덱싱을 통해 거꾸로 만든 문자열이 원래 문자열과 같으면 `s` 길이를 리턴하는 것으로 종료조건을 설정한다.\n\n`s`의 마지막 글자부터 하나씩 슬라이스하는 재귀함수와, s의 첫 글자부터 하나씩 슬라이스하는 재귀함수 값 중 일치하는 것(종료조건 적용)의 최대길이를 `max()`로 찾았다.\n\n\n```python\ndef longest_palindrom(s):\n    if s[::-1] == s:\n        return len(s)\n\n    return max(longest_palindrom(s[:-1]), longest_palindrom(s[1:]))\n```\n\n매우 간단하지 않은가?\n\n<br>\n\n다음 코드는 파이썬에서 제공하는 `difflib` 라이브러리에서 해시 가능한 값이면 자료형에 상관없이 순서비교가 가능한 `SequenceMatcher`를 사용해 푼 방식이다.\n\n```python\nfrom difflib import SequenceMatcher as SM\n\ndef longest_palindrom_3(s):\n    return SM(None, s, s[::-1]).find_longest_match(0, len(s), 0, len(s)).size\n\nprint(longest_palindrom(\"토마토맛있어토마토마토\")) # 5\n```\n\n`SequenceMatcher`에 대해 간략히 정리해보면 다음과 같다.\n\n더 자세한 사항은 <a href=\"https://docs.python.org/3.6/library/difflib.html\" target=\"_blank\">파이썬 3.6 문서 - difflib</a>을 참고하면 된다.\n\n```python\nfrom difflib import SequenceMatcher as SM\n\n# 첫 번째 인자값은 isjunk로, 무시할 값이 있으면 여기에 설정한다.\n# 보통 None으로 설정하며, lambda x: 0;과 같은 뜻이다.\ns = SM(None, a=\" abcd\", b=\"abcd abcd\")\n```\n\n```python\n# find_longest_match(a의 찾을 시작인덱스, a의 찾을 끝인덱스, b의 찾을 시작인덱스, b의 찾을 끝인덱스)\ns.find_longest_match(0, 5, 0, 9)\n\n# a의 i부터 j까지 size가 k인 값을 찾았음을 알려준다.\n# Match(a=i, b=j, size=k)\n# Match(a=0, b=4, size=5)\n# 대입해보면 a[i:i+k] == b[j:j+k]와 같다.\n```\n\n<br>\n\n## 실행시간 측정하기\n\n```python\nprint(e.longest_palindrom_1(\"수박수박수박맛있어수박\"))\n# 0.4620087565854192 ~ 0.5309993866831064\n\nprint(e.longest_palindrom_2(\"수박수박수박맛있어수박\"))\n# 0.5870097083970904 ~ 0.5980109563097358\n\nprint(e.longest_palindrom_3(\"수박수박수박맛있어수박\"))\n# 0.5979964043945074 ~ 0.9469949873164296\n\nprint(e.longest_palindrom_4(\"수박수박수박맛있어수박\"))\n# 0.4210014594718814 ~ 0.5869951564818621\n```\n\n<br>\n","excerpt":"문제 설명 앞뒤를 뒤집어도 똑같은 문자열을 palindrome이라고 합니다.\nlongest_palindrom함수는 문자열 s를 매개변수로 입력받습니다.\ns의 부분문자열중 가장 긴 palindrom의 길이를 리턴하는 함수를 완성하세요.\n예를들어 s가 …","fields":{"slug":"/level2. 가장 긴 펠린드롬/"},"frontmatter":{"date":"Nov 03, 2017","title":"Python _ Lv2. 가장 긴 펠린드롬","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각\n> SUN,MON,TUE,WED,THU,FRI,SAT\n를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 TUE를 반환하면 됩니다.\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/177\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n두려워했던 달력 관련 문제다. 2016년 1월 1일은 금요일이므로 그에 맞는 결과 출력용 리스트를 생성해주고 달별 날짜를 딕셔너리로 만들었다.\n\n```python\n# 2016년 1월 1일은 금요일\n\ndef getDayName_1(a,b):\n    day_name = ['FRI', 'SAT', 'SUN', 'MON', 'TUE', 'WED', 'THU']\n    month_dict = {\n        \"1\":31,\n        \"2\":29,\n        \"3\":31,\n        \"4\":30,\n        \"5\":31,\n        \"6\":30,\n        \"7\":31,\n        \"8\":31,\n        \"9\":30,\n        \"10\":31,\n        \"11\":30,\n        \"12\":31\n    }\n\n    days = 0\n    for i in range(1, a):\n        days += month_dict[str(i)]\n    days += b\n    index = days % 7 - 1\n\n    return day_name[index]\n\nprint(getDayTime(5, 24))\n# TUE\n```\n\n사실 `month_dict`를 리스트로 만들면 편하긴 하지만 딕셔너리로 한 이유는 가독성을 높이기 위해서... 해봤다^^\n\n알고리즘은 간단하다. 원하는 달까지의 날짜들을 모두 합하고 요일을 출력하려는 날짜를 더해준 후 7로 나눈 인덱스를 구한다. 이 인덱스로 `day_name` 리스트에서 값을 뽑으면 된다.\n\n<br>\n\n## 다른 방식의 코드 및 풀이\n\n연산하지 않고 내장함수를 사용할 수도 있다.(~~반칙이지만..~~) 파이썬에서 지원하는 `datetime`은 장고를 사용한 프로젝트를 진행할 때도 자주 봤던 시간 계산 모듈이다. 알아두면 좋은 함수들이라 소개한다.\n\n```python\nimport datetime\ndef getDayName_2(a,b):\n    week = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"]\n    return week[datetime.date(2016, a, b).weekday()]\n\n#아래 코드는 테스트를 위한 출력 코드입니다.\nprint(getDayName(5,24))\n# TUE\n```\n\n<br>\n\n`date` 모듈에서는 `isoweekday()`라는 내장함수를 지원하고 있다. 해당 함수는 원하는 년/월/일의 요일을 정수형 값으로 리턴해준다. 예를 들어 월요일은 1로, 일요일은 7로 리턴해주는 식이다.\n\n```python\nimport time, datetime\n\ndef getDayName_3(a,b):\n    t = datetime.date(2016,a,b)\n    week = ['MON','TUE','WED','THU','FRI','SAT','SUN']\n\n    return  week[t.isoweekday()-1]\n\n\n#아래 코드는 테스트를 위한 출력 코드입니다.\nprint(getDayName(5,24))\n```\n\n<br>\n\n다음 코드는 리스트에 출력할 값을 미리 만들어서 저장하지 않고 문자열로 만든 다음 인덱싱과 슬라이싱을 통해 값을 출력한다.\n\n인덱싱과 슬라이싱의 규칙은 월별로 시작하는 요일의 리스트에서 시작한다. 인자 a를 그대로 넣으면 인덱싱이 0부터 시작하므로 역방향으로 인덱싱하였고, 리스트도 이에 따라 [`12월 1일의 요일`, `11월 1일의 요일`, ... , `1월 1일의 요일`] 순으로 만들어져 있다.\n\n```python\ndef getDayName_4(a,b):\n    # 숫자 리스트는 각 월별 1일의 요일을 숫자로 나타낸 것\n    # - (12월~1월로 거꾸로 봐야 함)\n    # [-a]는 인덱싱이 0부터 시작하므로 역순으로 처리하여 1부터 시작\n    return \"FSSMTWTRAUOUEHITNNEDU\"[([5,3,0,5,2,6,4,1,6,3,2,6][-a]+b)%7::7]\n\ngetDayName(5, 24)\n```\n\n원하는 달의 요일을 찾았다면 원하는 날짜(`b`)를 더해 7로 나눈 나머지를 구할 수 있다. 이 나머지값은 만들어 놓은 문자열의 슬라이싱 시작값이다.\n\n문자열을 자세히 보면 금요일(`FRI`)부터 한 글자씩 시작하여 7칸마다 나머지 글자가 나온다. 따라서 파이썬의 슬라이싱 기법을 통해 7칸씩 뛴 값을 출력하면 원하는 요일의 문자가 출력된다.\n\n> 코드 리뷰 및 공유를 허락해주신 pignu님께 감사드립니다:)\n\n<br>\n\n## 실행시간 측정하기\n\n```python\nprint(avg_time(e.getDayName_1(3,30)))\n# 7.429989636875689 ~ 9.140021575149149\n\nprint(avg_time(e.getDayName_2(3,30)))\n# 8.089991752058268 ~ 9.350005711894482\n\nprint(avg_time(e.getDayName_3(3,30)))\n# 5.43001078767702 ~ 6.269983714446425\n\nprint(avg_time(e.getDayName_4(3,30)))\n# 6.619993655476719 ~ 7.510025170631707\n```\n\n<br>\n\n---\n\n## 마치며\n\n- 2월은 28일이 아닌 29일이다.\n- 윤년 구하는 알고리즘도 풀어보고 싶다.\n- <a href=\"https://docs.python.org/3/library/datetime.html\" target=\"_blank\">시간 및 날짜관련 파이썬 내장 모듈 문서 바로가기</a>\n\n<br>\n","excerpt":"문제 설명 2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각\nSUN,MON,TU…","fields":{"slug":"/level2. 2016년/"},"frontmatter":{"date":"Nov 01, 2017","title":"Python _ Lv2. 2016년","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 1937년 Collatz란 사람에 의해 제기된 이 추측은, 입력된 수가 짝수라면 2로 나누고, 홀수라면 3을 곱하고 1을 더한 다음, 결과로 나온 수에 같은 작업을 1이 될 때까지 반복할 경우 모든 수가 1이 된다는 추측입니다.\n>\n>  예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. collatz 함수를 만들어 입력된 수가 몇 번 만에 1이 되는지 반환해 주세요. 단, 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/14\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n문제를 잘 읽는 것이 중요했다.\n\n```python\ndef collatz(num):\n    answer = 0\n    while num != 1:\n        if num % 2 == 0:\n            num = num / 2\n        else:\n            num = (num * 3) + 1\n        answer += 1\n\n    if answer >= 500:\n        return -1\n    else:\n        return answer\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(collatz(9720207773787777))\n# -1\n```\n\n문제에서 500번이 넘어도 1이 반환되지 않으면 `-1`을 리턴하라고 했다. while문의 종료조건을 `answer < 500`이라고 줄 수도 있는 문제였다. 하지만 종료하고 특정한 값(`-1`)을 반환해야 하기 때문에 따로 조건문을 써주었다.\n\n<br>\n\n짝수라는 조건을 판별할 때 위처럼 단순히 2로 나누어서 나머지가 0인 것을 찾을 수도 있지만, 논리연산자를 사용할 수도 있다.\n\n예를 들어, 2라는 정수는 이진수 `10` 으로 표현할 수 있다.\n\n이진수 `10`의 마지막 자리수는 `0`이고 이 값을 `1`과 함께 `&`연산할 경우 0이므로 짝수이다.\n\n```python\n2 & 1 == 10 & 1 == 0  # 짝수\n```\n\n<br>\n\n반면 3은 이진수로 `11`이며 마지막 자릿수인 `1`을 `1`과 `&`연산했을 때 1이므로 홀수이다.\n\n```python\n3 & 1 == 11 & 1 == 1  # 홀수\n```\n\n<br>\n\n아래 코드를 보면 `&`(AND) 연산자를 써서 비교하는 값에 따라 나온 결과로 짝수, 홀수를 판별하였다.\n\n```python\ndef collatz(num):\n    answer = 0\n    while num != 1:\n        if num & 1 == 0:\n            num = num // 2\n        else:\n            num = (num * 3) + 1\n        answer += 1\n\n    if answer >= 500:\n        return -1\n    else:\n        return answer\n```\n\n<br>\n\n## 다른 방식의 코드 및 풀이\n\nwhile문을 써서 풀었지만, 사실 이 문제는 반환값이 500을 넘으면 추가 연산을 하지 않아도 되므로 for 반복문을 사용할 수도 있다.\n\n```python\ndef collatz(num):\n    answer = 0\n    for i in range(501) :\n        if num == 1:\n            break\n        num = num //2 if num % 2 == 0 else num*3 + 1\n        answer += 1\n\n    return answer if i != 500 else -1\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(collatz(1))\n```\n\n<br>\n","excerpt":"문제 설명 1937년 Collatz란 사람에 의해 제기된 이 추측은, 입력된 수가 짝수라면 2로 나누고, 홀수라면 3을 곱하고 1을 더한 다음, 결과로 나온 수에 같은 작업을 1이 될 때까지 반복할 경우 모든 수가 1이 된다는 추측입니다.  예를 들…","fields":{"slug":"/level2. 콜라츠추측/"},"frontmatter":{"date":"Nov 01, 2017","title":"Python _ Lv2. 콜라츠 추측","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> numberOfPrime 메소드는 정수 n을 매개변수로 입력받습니다.\n> 1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하도록 numberOfPrime 메소드를 만들어 보세요.\n\n> 소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.(1은 소수가 아닙니다.)\n\n> 10을 입력받았다면, 1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환하고 5를 입력받았다면, 1부터 5 사이의 소수는\n[2,3,5] 3개가 존재하므로 3를 반환\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/171\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n소수는 1과 자기 자신으로만 나누어지는 수이다. 이 조건을 만족하기 위해서는 **매개변수가 n일 때 1에서 (n-1) 사이의 수로 나눈 나머지가 0이 될 수 없는 수**를 찾아야 한다.\n\n이 때, 에라토스테네스의 체를 사용하여 연산 과정을 줄일 수 있었다. 모든 자연수는 소수들의 곱으로 표현이 되는데, 제일 작은 소수 2부터 시작해 (n-1)까지의 수 중 나머지가 0이 되는 수들을 모두 거르고 $\\sqrt{n}$ 까지의 수로만 나눠보면 n 이 소수인지 아닌지 알 수 있다.\n\n\n```python\ndef numberOfPrime(n):\n    # 일단 리스트에 2부터 n까지의 수를 넣어둔다.\n    li = [i for i in range(2, n+1)]\n    # i는 n이 될 때까지 반복한다.\n    for i in range(2, n + 1):\n        # j는 2부터 루트 n까지 i를 나누는 수이다.\n        for j in range(2, int(n ** 0.5 + 2)):\n            # 자기 자신을 제외하고 나눠지는 숫자가 있을 때 리스트에서 해당 수를 제외시킨다.\n            if i != j and i % j == 0 and i in li:\n                li.remove(i)\n    return len(li)\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(numberOfPrime(10))\n```\n\n<br>\n","excerpt":"문제 설명 numberOfPrime 메소드는 정수 n을 매개변수로 입력받습니다.\n1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하도록 numberOfPrime 메소드를 만들어 보세요. 소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.…","fields":{"slug":"/level2. 소수찾기/"},"frontmatter":{"date":"Oct 31, 2017","title":"Python _ Lv2. 소수 찾기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> digit_reverse함수는 양의 정수 n을 매개변수로 입력받습니다.\nn을 뒤집어 숫자 하나하나를 list로 표현해주세요\n예를 들어 n이 12345이면 [5,4,3,2,1]을 리턴하면 됩니다.\n\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/117\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n숫자를 뒤집는 방법은 파이썬의 리스트 인덱싱과 슬라이싱을 활용하면 편리하다.\n\n```python\ndef digit_reverse(n):\n    sn = str(n)\n    ln = len(n)\n    li = []\n    for i in range(ln):\n        li.append(int(sn[ln - i - 1]))\n    return li\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(\"결과 : {}\".format(digit_reverse(12345)));\n```\n\n위의 코드에서 for문만 들여다보면 다음과 같은 방식으로 동작한다.\n\n```python\nsn = \"12345\"\nlen(sn) = 5\n\nfor i in range(len(sn)):\n    print(sn[len(sn)-i-1], end=\"\")\n\n# sn[5 - 0 - 1] = sn[4] = 5\n# sn[5 - 1 - 1] = sn[3] = 4\n# sn[5 - 2 - 1] = sn[2] = 3\n# sn[5 - 3 - 1] = sn[1] = 2\n# sn[5 - 4 - 1] = sn[0] = 1\n# end=\"\" 는 출력물을 띄어쓰기 없이 붙여준다.\n```\n\n<br>\n\n두 번째로 직접 푼 코드는 **재귀를 이용한 방식**이다.\n\n처음 코드를 짤 때는 숫자를 그대로 받아서 문자형으로 처리했기 때문에 나와야 할 결과 형태(리스트형)를 충족시키지 못했다.\n\n하지만 아래 코드에서 보듯이 외부함수 스코프에서 입력받은 n을 미리 숫자형 값으로 구성한 리스트로 바꾼 후 재귀를 적용하니 후처리를 하지 않아도 되었다!\n\n```python\ndef digit_reverse(n):\n    # 입력받은 n 값을 반복문으로 나눠서 숫자형으로 리스트에 넣는다.\n    ln = [int(num) for num in str(n)]\n\n    def digit_recursive(ln):\n        # 종료조건 - 값이 없을 때는 ln을 반환하여 재귀를 종료시킨다.\n        if len(ln) < 1:\n            return ln\n\n        # 마지막 인덱스값을 앞으로 더하면서 재귀를 진행한다.\n        r = [ln[-1]] + digit_recursive(ln[:-1])\n\n        # 재귀값을 반환한다.\n        return r\n    # 내부 재귀함수를 실행한 값을 반환한다.\n    return digit_recursive(ln)\n\n\ndigit_reverse(12345)\n# [5, 4, 3, 2, 1]\n```\n\n<br>\n\n## 다른 방식의 코드 및 풀이\n\n다른 사람의 코드를 참고하면 다음과 같다. `map()`함수를 사용하면 다음과 같이 한 줄로도 구현 가능하다. `map()` 함수는 제너레이터를 생성하기 때문에 `next()`로 값을 출력해볼 수 있다.\n\n```python\nn = \"12345\"\nnext(reversed(n))  # '5'\nnext(map(int, reversed(n)))  # 5\n```\n\n위의 식을 `list()`로 감싸주면 n 자리의 순서가 반대 순서대로 리스트에 삽입 및 출력된다.\n\n```python\n# 타인의 코드 - map(), reversed() 사용\n\ndef digit_reverse_2(n):\n    return list(map(int, reversed(str(n))))\n\nprint(\"결과 : {}\".format(digit_reverse_2(12345)));\n# 결과 : [5, 4, 3, 2, 1]\n```\n\n<br>\n\n3번째 방식은 리스트 인덱싱을 활용한 방법이다. 먼저 n의 값을 숫자 자료형으로 바꾸어 리스트에 저장한 후 인덱싱 (`[::-1]`)을 통해 반대 방향으로 출력하였다.\n\n```python\ndef digit_reverse_3(n):\n    return [int(x) for x in str(n)][::-1]\n\nprint(\"결과 : {}\".format(digit_reverse_2(12345)));\n# 결과 : [5, 4, 3, 2, 1]\n```\n\n<br>\n\n4번째 방식은 2번째 방식과 비슷하지만 이번에는 `reverse()`를  사용했다. `reverse()`는 리스트 요소 인덱스를 반대로 바꿀 때 편리하다.\n\n```python\ndef digit_reverse_4(n):\n    answer = list(map(int, str(n)))\n    answer.reverse()\n\n    return answer\n\nprint(\"결과 : {}\".format(digit_reverse_2(12345)));\n# 결과 : [5, 4, 3, 2, 1]\n```\n\n<br>\n\n5번째 방식은 n을 10으로 나눈 나머지를 리스트에 하나씩 추가하는 방법으로 풀이했다.\n\n```python\ndef digit_reverse_5(n):\n    li = []\n    while n > 0:\n        li += [n % 10]\n        n = n // 10\n    return li\n```\n\n위 while 반복문의 연산과정은 다음과 같다.\n\n```python\n# [5]\n# 1234\n# [5, 4]\n# 123\n# [5, 4, 3]\n# 12\n# [5, 4, 3, 2]\n# 1\n# [5, 4, 3, 2, 1]\n# 0\n```\n\n<br>\n\n마지막 방식은 `divmod()`라는 함수를 사용한 코드이다. `divmod(a, b)`는 2개의 숫자(a, b)를 입력받아 a를 b로 나눈 몫과 나머지를 튜플 형태로 리턴하는 함수이다.\n\n```\n>>> divmod(7, 3)\n(2, 1)\n>>> divmod(1.3, 0.2)\n(6.0, 0.099999999999999978)\n```\n\nn을 10으로 나누었을 때 몫과 나머지를 각각 n, a에 저장하고 a 값은 리스트에 저장한다. 5번째 방식을 내장함수로 쉽게 쓴 방법이라 할 수 있다.\n\n```python\ndef digit_reverse_6(n):\n    answer = []\n    while n:\n        n, a = divmod(n, 10)\n        answer.append(n)\n    return answer\n```\n\n위 코드의 내부 동작방식은 다음과 같다.\n\n```python\n# [5]\n# [5, 4]\n# [5, 4, 3]\n# [5, 4, 3, 2]\n# [5, 4, 3, 2, 1]\n```\n\n<br>\n\n\n## 풀이 별 실행시간 측정하기\n\n각각의 함수를 100,000번 반복한 실행시간의 평균을 구했을 때 다음과 같이 시간이 걸린다. 이번에는 리스트 인덱싱과 `divmod()`를 사용한 코드가 가장 시간이 적게 걸렸다.\n\n```python\nprint(avg_time(e.digit_reverse_1(1234567)))\n# 0.7139969966374338\n\nprint(avg_time(e.digit_reverse_2(1234567)))\n# 0.8409988367930055\n\nprint(avg_time(e.digit_reverse_3(1234567)))\n# 0.6010013748891652\n\nprint(avg_time(e.digit_reverse_4(1234567)))\n# 0.7819980964995921\n\nprint(avg_time(e.digit_reverse_5(1234567)))\n# 0.7530034054070711\n\nprint(avg_time(e.digit_reverse_6(1234567)))\n# 0.6839982233941555\n```\n\n<br>\n","excerpt":"문제 설명 digit_reverse함수는 양의 정수 n을 매개변수로 입력받습니다.\nn을 뒤집어 숫자 하나하나를 list로 표현해주세요\n예를 들어 n이 12345이면 5,4,3,2,1을 리턴하면 됩니다. 문제 보러가기 코드 및 풀이 숫자를 뒤집는 방법…","fields":{"slug":"/level2. 자연수뒤집어리스트만들기/"},"frontmatter":{"date":"Oct 31, 2017","title":"Python _ Lv2. 자연수 뒤집어 리스트로 만들기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.\n예를들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로\n18은 하샤드 수입니다.\n\n> Harshad함수는 양의 정수 n을 매개변수로 입력받습니다.\n이 n이 하샤드수인지 아닌지 판단하는 함수를 완성하세요.\n예를들어 n이 10, 12, 18이면 True를 리턴,\n11, 13이면 False를 리턴하면 됩니다.\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/130\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n이 문제는 주어진 인자 자릿수의 숫자들을 모두 더하는 것이 관건이다. 그러려면 자료형을 잘 구분하는 것이 중요하다. for 반복문에서는 문자 자료형으로 사용해야 하고, 연산을 할 때는 다시 숫자 자료형으로 바꿔주었다.\n\n```python\ndef Harshad_1(n):\n    is_harshad = 0\n    sn = str(n)\n    for i in sn:\n        is_harshad += int(i)\n    return True if n % is_harshad == 0 else False\n\nprint(Harshad_1(12))  # True\nprint(Harshad_1(42))  # True\nprint(Harshad_1(67))  # False\nprint(Harshad_1(44))  # False\n```\n\n<br>\n\n\n다른 사람의 코드를 참고하면 다음과 같다. `map()`함수를 사용하면 다음과 같이 한 줄로도 구현 가능하다. `map()` 함수는 제너레이터를 생성하기 때문에 `next()`로 값을 출력해볼 수 있다.\n\n```python\nn = 11\nprint(next(map(int, str(n))))\nprint(next(map(int, str(n))))\n# 1\n# 1\n```\n\n위의 식을 `sum()`으로 감싸주면 각 자릿수의 합이 구현된다. 이를 이용하여 함수를 정의하면 다음과 같다.\n\n```python\n# 타인의 코드 - zip() 사용\n\ndef Harshad_2(n):\n    retrun True if n % sum(map(int, str(n))) == 0 else False\n```\n\n<br>\n\n3번째는 2번째 방식과 비슷하지만 `map()`함수를 사용하지 않고 간단하게 구현한 방식이다. 역시 자료형을 바꿔가면서 조건을 분리해놓았기에 정리해보았다.\n\n```python\ndef Harshad_3(n):\n    return n % sum(int(x) for x in str(n)) == 0\n```\n\n<br>\n\n## 풀이 별 실행시간 측정하기\n\n각각의 함수를 100,000번 반복한 실행시간의 평균을 구했을 때 다음과 같이 시간이 걸린다. `map()` 함수를 사용했을 때가 가장 시간이 적게 걸렸다.\n\n```python\nprint(avg_time(e.Harshad_1(34)))\n# 0.6039990694262087\n\nprint(avg_time(e.Harshad_2(34)))\n# 0.42299507185816765\n\nprint(avg_time(e.Harshad_3(34)))\n# 0.6299960659816861\n```\n\n<br>\n","excerpt":"문제 설명 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.\n예를들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로\n18은 하샤드 수입니다. Harshad함수는 양의 정수 n을 매개변수로 입력받습니다.…","fields":{"slug":"/level2. 하샤드수/"},"frontmatter":{"date":"Oct 31, 2017","title":"Python _ Lv2. 하샤드 수","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트로 1부터 N까지의 합을 구하는 알고리즘을 풀이한다.\n\n<br>\n\n## 코드 및 풀이\n\n`this`의 개념은 매우 중요하다. 함수 안에서 `this`는 도큐먼트 객체를 참조한다. 만약 함수 내부에서 다른 콜백 함수를 실행하면 `this`는 다른 값으로 연결될 수 있으므로 주의하여야 한다.\n\n<a href=\"#\" target=\"_blank\">this 더 알아보기</a>\n\n\n```js\nvar num = 100;\n\nvar sumN = function() {\n    # num 값을 숫자형으로 명시적 변환\n    var n = Number(this.num);\n\n    #\n    if (Number.isNaN(n) || n < 1)\n        return 0\n    return (n + 1) * n / 2;\n};\n\nsumN()\n// 5050\n```\n\nHTML 요소 내부에서는 num 값이 문자열로 다루어진다.\n\n따라서 `Number()` 함수나 `parseInt()` 함수를 사용하여 명시적으로 숫자 값으로 변환해준 후 연산을 시행한다.\n\n```js\n> Number(\"100\");\n< 100\n\n> parseInt(\"100\");\n< 100\n```\n\n<br>\n\n## isNaN()\n\n`isNaN(value)`는 Number의 내장함수로, `value`가 NaN 자료형인지 boolean 자료형으로 출력해준다.\n\n```js\n> Number.isNaN(\"100\");\n< false\n\n> Number.isNaN(100);\n< false\n\n> Number.isNaN(\"*\" * 100);\n< true\n```\n\n<br>\n\n```js\n// 문자형은 난수가 아니다.\n> isNaN(\"100\");\n< false\n\n// 숫자형도 난수가 아니다.\n> isNaN(100);\n< false\n\n// 문자형과 숫자형을 연산하면 NaN 자료형이 출력된다.\n> isNaN(\"*\"*100);\n< true\n```\n\n<br>\n\n## 논리 연산자에 대한 간략 소개\n\n조건식에서 활용하는 논리연산자에 대해 간단히 소개한다.\n\n<br>\n\n### `||` (OR)\n\n논리연산자 중 `||`를 사용하면 조건이 하나 혹은 모두 참인 경우 `true`를 반환하고 그에 따른 실행문을 실행한다.\n\n<br>\n\n### `&&` (AND)\n\n논리연산자 중 `&&`를 사용하면 조건을 모두 만족해야 `true`를 반환하며 그에 따른 실행문을 실행한다.\n\n### `!` (NOT)\n\n논리연산자 중 `!`를 사용하면 피연산자가 true일 경우 반대인 false를, false일 경우 true를 반환하고 그에 따른 실행문을 실행한다.\n\n<br>\n\n### false로 평가되는 값들\n\n```js\n> null;\n> NaN;\n> 0;\n> empty string(\"\");\n> undefined;\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트로 1부터 N까지의 합을 구하는 알고리즘을 풀이한다. 코드 및 풀이 의 개념은 매우 중요하다. 함수 안에서 는 도큐먼트 객체를 참조한다. 만약 함수 내부에서 다른 콜백 함수를 실행하면 는 다른 값으로 연결될 수 있으므로 …","fields":{"slug":"/level1. 1-N까지의합/"},"frontmatter":{"date":"Oct 31, 2017","title":"JS _ Lv1. N 까지의 합 구하기","tags":["Vue.js","javescript","algorithm"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n>어떤 수를 입력받아 그 수의 약수를 모두 더한 수 sumDivisor 함수를 완성해 보세요.\n> 예를 들어 12가 입력된다면 12의 약수는 [1, 2, 3, 4, 6, 12]가 되고,\n> 총 합은 28이 되므로 28을 반환해 주면 됩니다.\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/2\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n최초의 풀이는 다음과 같다. answer의 값이 1이므로 2부터 시작하는 반복문을 돌면서 `num`을 나눈 나머지가 `0`인 `i`의 값을 `answer`에 더해주고 리턴한다.\n\n```python\ndef sumDivisor(num):\n    answer = 1\n    for i in range(2, num + 1):\n        if num % i == 0:\n            answer += i\n    return answer\n\nprint(sumDivisor(12))\n# 28\n```\n\n<br>\n\n\n다음과 같이 리스트 컴프리핸션을 통해 i 값을 모두 구한 뒤 `sum()`을 사용하여 더한 값을 리턴할 수도 있다.\n\n```python\ndef sumDivisor_2(num):\n    return sum([i for i in range(1, num + 1) if num % i == 0])\n```\n\n<br>\n\n3번째 방법은 약수의 성질을 이용한 것이다. 모든 수는 자기자신을 약수로 가지며 2로 나누어지는 것에 상관 없이 2로 나눈 값보다 작은 수들을 약수로 가지므로 다음과 같이 풀이할 수 있다.\n\n```python\ndef sumDivisor_3(num):\n    return num + sum([i for i in range(1, (num // 2) + 1) if num % i == 0])\n```\n\n<br>\n\n4번째 방법은 3번째와 비슷하지만 범위를 1에서부터 인자의 루트값으로 지정하여 조건에 맞는 값만 더한 후 자기자신을 더해준 값을 리턴해준다. 이렇게 하면 연산속도가 더욱 빨라진다.\n\n```python\ndef sumDivisor_4(num):\n    return num + sum([i for i in range(1, (num ** .5) + 1) if num % i == 0])\n```\n\n<br>\n\n## 풀이 별 실행시간 측정하기\n\n각각의 함수를 100,000번 반복한 실행시간의 평균을 구했을 때 다음과 같이 시간이 걸린다. 근소한 차이지만 4번째 방식으로 풀이했을 때가 가장 시간이 적게 걸리는 것을 알 수 있다.\n\n```python\nprint(avg(e.sumDivisor_1(12)))\n# 0.05220026650931686\n\nprint(avg(e.sumDivisor_2(12)))\n# 0.08070019248407334\n\nprint(avg(e.sumDivisor_3(12)))\n# 0.04699977580457926\n\nprint(avg(e.sumDivisor_4(12)))\n# 0.04630019247997552\n```\n\n<br>\n","excerpt":"어떤 수를 입력받아 그 수의 약수를 모두 더한 수 sumDivisor 함수를 완성해 보세요.\n예를 들어 12가 입력된다면 12의 약수는 1, 2, 3, 4, 6, 12가 되고,\n총 합은 28이 되므로 28을 반환해 주면 됩니다. 문제 보러가기 코드 …","fields":{"slug":"/level1. 약수의합/"},"frontmatter":{"date":"Oct 30, 2017","title":"Python _ Lv1. 약수의 합","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n>행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다.\n2개의 행렬을 입력받는 sumMatrix 함수를 완성하여\n행렬 덧셈의 결과를 반환해 주세요.\n\n> 예를 들어 2x2 행렬인\nA = ((1, 2), (2, 3)),\nB = ((3, 4), (5, 6)) 가 주어지면,\n같은 2x2 행렬인\n((4, 6), (7, 9))를 반환하면 됩니다.\n(어떠한 행렬에도 대응하는 함수를 완성해주세요.)\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/148\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n## 코드 및 풀이\n\n처음에 애를 먹은 이유는 **문제의 마지막 문장을 간과했기 때문**이다. 어떠한 행렬에도 대응하는 함수를 만들어야하는데, answer의 리스트 형식을 만드는 데에서 시간을 많이 잡아먹었다.\n\n결국에는 for 반복문 안에서 행렬 길이만큼 내부 리스트를 더해주는 식으로 해결했다.\n\n이렇게 해주면 `1 * 1`, `2 * 2`, `3 * 3` 등 모든 경우의 행렬에 대응을 할 수 있는 `answer` 리스트가 생성된다.\n\n```python\ndef sumMatrix(A,B):\n    answer = []\n    for i in range(len(A)):\n        answer.append([])\n        for j in range(len(A[0])):\n            answer[i].append(A[i][j] + B[i][j])\n    return answer\n\nprint(\"1\",sumMatrix([[1]], [[3]]))\nprint(\"2\",sumMatrix([[1,2]], [[3,4]]))\nprint(\"3\", sumMatrix([[1,2,3], [2,3,4]], [[3,4,5],[5,6,7]]))\nprint(\"4\", sumMatrix([[1,2,3,4], [3,4,5,6]], [[1,2,3,4], [3,4,5,6]]))\nprint(\"5\", sumMatrix([[1,2,3,4,5,6,7,8,9,10,11], [2,3,4,5,6,7,8,9,10,11,12]], [[3,4,5,6,7,8,9,10,11,12,13],[5,6,7,8,9,10,11,12,13,14,15]]))\nprint(\"6\", sumMatrix([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]]))\n\n# 1 [[4]]\n# 2 [[4, 6]]\n# 3 [[4, 6, 8], [7, 9, 11]]\n# 4 [[2, 4, 6, 8], [6, 8, 10, 12]]\n# 5 [[4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]]\n# 6 [[4, 6, 8, 10, 12, 14, 16, 18, 20], [7, 9, 11, 13, 15, 17, 19, 21, 23]]\n```\n\n<br>\n\n\n다른 사람의 코드를 참고하면 다음과 같다. 두 번째 방식은 `zip()` 내장함수를 사용했는데, `zip()`은 동일한 개수와 자료형을 갖는 리스트들의 공통 인덱스 값끼리 새로운 리스트로 묶어준다.\n\n```python\n# 타인의 코드 - zip() 사용\n\ndef sumMatrix_2(A,B):\n    answer = [[c + d for c, d in zip(a, b)] for a, b in zip(A, B)]\n    return answer\n\nprint(sumMatrix([[1,2], [2,3]], [[3,4], [5,6]]))\n# [[4, 6], [7, 9]]\n```\n\n<br>\n\n3번째는 `answer`라는 새로운 리스트를 만들지 않고 인자로 준 리스트를 활용하여 결과값을 리턴한다. (왜 이 방식을 생각하지 못했을까? 하는 생각이 들어 요약해보았다.)\n\n```python\ndef sumMatrix_3(A, B):\n    for i in range(len(A)):\n        for j in range(len(A[0])):\n            A[i][j] += B[i][j]\n    return A\n\nprint(sumMatrix([[1,2], [2,3]], [[3,4], [5,6]]))\n# [[4, 6], [7, 9]]\n```\n\n<br>\n\n4번째는 `numpy`를 사용한 방식이다. import를 해와야한다는 것이 꺼림칙하지만 배열을 사용하여 쉽게 연산한 후 `tolist()`를 사용하여 리스트 형태로 변환해주었다.\n\n```python\n# numpy 이용하기\n\nimport numpy as np\n\ndef sumMatrix_4(A, B):\n    A = np.array(A)\n    B = np.array(B)\n    answer = A + B\n\n    print(type(answer))\n    # <class 'numpy.ndarray'>\n\n    return answer.tolist()\n\nprint(sumMatrix([[1,2], [2,3]], [[3,4], [5,6]]))\n# [[4, 6], [7, 9]]\n```\n\n<br>\n\n5번째는 시도를 했으나 리스트 범위를 제대로 생각하지 못해서 사용할 수 없었던 리스트 컴프리핸션을 사용한 방식이다.\n\n```python\n# 타인의 코드 - list comprehension 사용하기\n\ndef sumMatrix_5(A, B):\n    # A의 행렬 갯수만큼 연산을 반복하는데, 내부에서는 A[0]의 갯수만큼 값들을 하나씩 더한 후 하나의 리스트로 반환한다.\n    answer = [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n\n    return answer\n\nprint(sumMatrix([[1,2], [2,3]], [[3,4], [5,6]]))\n```\n\n<br>\n\n## 풀이 별 실행시간 측정하기\n\n각각의 함수를 100,000번 반복한 실행시간의 평균을 구했을 때 다음과 같이 시간이 걸린다. `numpy`로 풀이할 때의 실행 시간이 가장 짧았다.\n\n```python\nprint(avg_time(e.sumMatrix_1([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]])))\n# 0.6800000846851617\n\nprint(avg_time(e.sumMatrix_2([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]])))\n# 0.5690017133019865\n\nprint(avg_time(e.sumMatrix_3([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]])))\n# 0.6039990694262087\n\nprint(avg_time(e.sumMatrix_4([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]])))\n# 0.6640002538915724\n\nprint(avg_time(e.sumMatrix_5([[1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10]], [[3,4,5,6,7,8,9,10,11],[5,6,7,8,9,10,11,12,13]])))\n# 0.6330010364763439\n```\n\n<br>\n","excerpt":"행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다.\n2개의 행렬을 입력받는 sumMatrix 함수를 완성하여\n행렬 덧셈의 결과를 반환해 주세요. 예를 들어 2x2 행렬인\nA = ((1, 2), (2,…","fields":{"slug":"/level1. 행렬의덧셈/"},"frontmatter":{"date":"Oct 30, 2017","title":"Python _ Lv1. 행렬의 덧셈","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트의 `이벤트(Events)`란 **사용자가 웹페이지에서 수행하는 모든 행위에 대한 페이지의 행동**\n을 말한다. 예를 들면 마우스를 올리고 메뉴를 내리고 스크롤을 하는 등의 행동이 모두 이벤트이다.\n\n<br>\n\n## Timers 이벤트\n\n### (1) 페이지 로딩 이후 알림 띄우기\n\n브라우저에 자바스크립트 코드가 실행되는 시간을 조절하고 싶다면 `Timers` 부분을 살펴보면 된다.\n\n![timersgoal](imgs/2017-10-23/timersgoal.png)\n\n웹페이지를 로드하고 3초가 지나면 메세지를 띄워주게끔 동작하도록 구현해보자.\n\n<br>\n\n```js\n// 알림 텍스트를 myMsg변수에 할당한다.\nvar myMsg = document.getElementById(\"message\");\n\n// 메세지를 보여줄 때 적용할 css를 제어하는 메소드 정의\nfunction showMsg(){\n    myMsg.className = \"show\";\n}\n\n\n// 페이지가 로드되고 3초 후에 showMsg()가 실행되도록\n// setTimeout 메소드를 사용했다.\nsetTimeout(showMsg, 3000);\n```\n\n<br>\n\n### (2) 정해진 시간마다 다른 스타일 적용하기\n\n```js\n// 색상을 변경할 div 요소를 colorChanger 변수에 할당\nvar colorChanger = document.getElementById(\"color-changer\");\n\n// 시간마다 적용할 스타일값을 담은 배열\nvar colors = [\"red\", \"green\", \"yellow\", \"pink\"];\n// 0부터 차례로 1씩 더하면서 스타일을 적용하는 데에 필요한 counter 변수 정의\nvar counter = 0;\n\n// 실행하면 div 요소의 배경색을 배열에 담긴 값으로 바꾼다.\n// 이 때 계속 변할 수 있도록 counter의 값은 1씩 증가시킨다.\nfunction changeColor(){\n\n    // counter는 무한히 늘어나므로 배열의 길이보다 길어지면 0으로 리셋시킨다.\n    if (counter >= colors.length){\n        counter = 0;\n    };\n    colorChanger.style.background = colors[counter];\n    counter++;\n}\n\n// setInterval을 사용하여 3초마다 changeColor 함수를 실행시킨다.\nsetInterval(changeColor, 3000);\n```\n\n결과는 다음처럼 `div` 요소의 색상이 3초마다 변화한다.\n\n![red](imgs/2017-10-23/red.png)\n\n![green](imgs/2017-10-23/green.png)\n\n![yellow](imgs/2017-10-23/yellow.png)\n\n![pink](imgs/2017-10-23/pink.png)\n\n<br>\n\n### (3) 클릭으로 Interval 제거하기\n\n`(2)`에서 적용해주었던 `setInterval()` 메소드를 변수에 할당하여 클릭 또는 호버 이벤트시 인터벌 이벤트를 종료하도록 해주려고 한다.\n\n그러기 위해 해당 메소드를 변수에 할당하였다.\n\n```js\nvar myTimer = setInterval(changeColor, 1000);\n\n// div 요소를 클릭하면\ncolorChanger.onclick = function(){\n\n    // 원하는 interval 이벤트를 제거해준다.\n    clearInterval(myTimer);\n    colorChanger.innerHTML = \"Timer Stopped\";\n}\n```\n\n<br>\n\n이제 브라우저에서 클릭하면 문자와 함께 Interval 이벤트가 멈춘다.\n\n![intervalstop](imgs/2017-10-23/intervalstop.png)\n\n<br>\n","excerpt":"자바스크립트의 란 사용자가 웹페이지에서 수행하는 모든 행위에 대한 페이지의 행동\n을 말한다. 예를 들면 마우스를 올리고 메뉴를 내리고 스크롤을 하는 등의 행동이 모두 이벤트이다. Timers 이벤트 (1) 페이지 로딩 이후 알림 띄우기 브라우저에 자…","fields":{"slug":"/js-20-events_02/"},"frontmatter":{"date":"Oct 24, 2017","title":"JS _ 21. 이벤트(Event)와 활용 <2부> times","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML 요소 중 `form`을 구성하는 태그들은 자바스크립트 `document.forms`로 접근할 수 있다. 이번 포스트에서는 폼에 이벤트를 적용하는 것까지 실습을 통해 정리하였다.\n\n<br>\n\n `form` 태그 내 `name` 속성이 `myForm`이라면 다음과 같이 접근하여 변수에 할당할 수 있다.\n\n```js\n> var myFormTag = document.forms.myForm\n< undefined\n\n> myForm\n< <form data-brackets-id=\"322\" action=\"#\" id=\"my-form\" name=\"myForm\">…</form>\n\n// name 속성값으로 원하는 폼 태그에 접근할 수 있다.\n> myForm.name\n< <input type=​\"text\" name=​\"name\">​\n\n// 아직 아무것도 입력하지 않았을 때 value는 빈값으로 출력된다.\n> myForm.name.value\n< \"\"\n\n// 입력창에 hello!!!라고 작성한 후 다시 입력해보면 입력한 값이 출력된다.\n> myForm.name.value\n< \"hello!!!\"\n```\n\n<br>\n\n## 폼 태그에 이벤트 적용하기\n\n```js\n// 입력 중일 때 이벤트를 선언하여 테두리 스타일을 다르게 지정\n> myForm.name.onfocus = function(){\n\n    myForm.name.style.border = \"4px solid pink\";\n\n};\n```\n\n하지만 포커스가 사라진 후에도 보더 스타일은 그대로 적용되어 있다.\n\n![onfocus](onfocus.png)\n\n위의 문제를 해결하려면 `onfocus`와 반대되는 기능인 `onblur` 이벤트를 적용해주면 된다.\n\n```js\n> myForm.name.onblur = function(){\n\n    myForm.name.style.border = \"1px solid gray\";\n\n};\n```\n\n이제는 입력하지 않을 때 기본 테두리스타일이 적용된다.\n\n<br>\n","excerpt":"HTML 요소 중 을 구성하는 태그들은 자바스크립트 로 접근할 수 있다. 이번 포스트에서는 폼에 이벤트를 적용하는 것까지 실습을 통해 정리하였다.   태그 내  속성이 이라면 다음과 같이 접근하여 변수에 할당할 수 있다. 폼 태그에 이벤트 적용하기 …","fields":{"slug":"/js-22-formelements/"},"frontmatter":{"date":"Oct 24, 2017","title":"JS _ 22. 폼(form) 엘리먼트 접근하기","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n지난 포스트에 이어 이번 포스트에서는 `submit` 버튼 클릭 시 추가적인 유효성 검사를 적용할 수 있는 `onsubmit` 이벤트에 대해 소개한다.\n\n<br>\n\n## onsubmit 이벤트 적용하기\n\n제출 버튼을 누르고 나면 서버와 통신을 하여 사용자가 입력한 정보가 유효한지 검사하고 정보를 (기능에 맞게) 처리한다.\n\n이 때 `onsubmit` 이벤트를 사용하면 통신을 하기 전에 자바스크립트로 클라이언트 측에서 필요한 추가적인 유효성 검사를 실시할 수 있다. 만약 이 검사를 통과하지 못했을 경우에는 서버와의 통신으로 넘어가지 않아 좀더 효율적이다.\n\n<br>\n\n```js\n// onsubmit event\nvar myForm = document.forms.myForm;\nvar message = document.getElementById(\"message\");\n\n\nmyForm.onsubmit = function(){\n  if (myForm.name.value == \"\"){\n\n      message.innerHTML = \"Please enter a name.\";\n      // return값을 정의해 통신을 하지 않게끔 처리.\n      return false;\n\n  } else{\n\n      message.innerHTML = \"\";\n      return true;\n\n  }\n};\n```\n\n<br>\n\n결과 화면은 다음과 같이 동작한다.\n\n![onsubmit](imgs/2017-10-24/onsubmit.png)\n\n<br>\n","excerpt":"지난 포스트에 이어 이번 포스트에서는  버튼 클릭 시 추가적인 유효성 검사를 적용할 수 있는  이벤트에 대해 소개한다. onsubmit 이벤트 적용하기 제출 버튼을 누르고 나면 서버와 통신을 하여 사용자가 입력한 정보가 유효한지 검사하고 정보를 (기…","fields":{"slug":"/js-23-formonsubmit/"},"frontmatter":{"date":"Oct 24, 2017","title":"JS _ 23. 폼(form)에 onsubmit 이벤트 적용하기","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 강력한 라이브러리인 `제이쿼리`(`JQuery`)에 대해 간단히 소개한다. 제이쿼리는 자바스크립트의 대표적인 라이브러리다. 이미 구현되어 있는 애니메이션 효과나 양식 처리, 비디오 등의 처리를 편리하게 구현할 수 있다.\n\n<br>\n\n## 제이쿼리 (JQuery) 사용해보기\n\nJQuery는 스크립트를 다운받아 사용할 수도 있고 간편하게 CDN 스크립트를 HTML 파일에 추가해서 써도 된다.\n\n<a href=\"https://jquery.com/\" target=\"_blank\">JQuery 홈페이지 바로가기</a>\n\n<a href=\"https://code.jquery.com/\" target=\"_blank\">JQuery CDN 다운받기</a>\n\n여기서는 실습을 위해 CDN 코드를 넣어 사용하였다.\n\n```html\n<body>\n    ...\n    <!-- JQuery CDN은 다른 스크립트보다 상단에 위치시킨다. -->\n    <script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n\n    <!--기타 커스텀 스크립트 파일들-->\n    <script src=\"45_jquery.js\"></script>\n</body>\n```\n\n<br>\n\nJQuery를 사용하면 자바스크립트만 사용하는 것보다 확실히 태그에 접근하기가 더 쉽다.\n\n```js\nvar myPara = document.getElementById(\"content\").getElementsByTagName(\"p\")[5];\n\n/* jquery를 사용할 경우 같은 태그를 더 쉽게 찾을 수 있다.\n찾으려는 태그는 클래스/태그명과 css 속성으로 찾는다. */\nvar myPara2 = $(\"#content p:last-child\");\n```\n\n<br>\n\nJQuery로 할 수 있는 간단한 예제들이다.\n\n```js\n// class 속성 추가/삭제\nmyPara2.addClass(\"test\");\nmyPara2.removeClass(\"test\");\n\n// 효과 주기\nmyPara2.fadeOut();  // 서서히 사라지는 효과\nmyPara2.fadeIn();  // 서서히 나타나는 효과\n\n// css 속성 주기\nmyPara2.css({position: \"relative\", color: \"red\"});\n\n// animation 효과 주기\nmyPara2.animate({left: 40px});  // 왼쪽에서 40px 이동\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 강력한 라이브러리인 ()에 대해 간단히 소개한다. 제이쿼리는 자바스크립트의 대표적인 라이브러리다. 이미 구현되어 있는 애니메이션 효과나 양식 처리, 비디오 등의 처리를 편리하게 구현할 수 있다. 제이쿼리 (JQuery…","fields":{"slug":"/js-24-jquery/"},"frontmatter":{"date":"Oct 24, 2017","title":"JS _ 24. JQuery 맛보기","tags":["javascript","jquery","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트의 `이벤트(Events)`란 **사용자가 웹페이지에서 수행하는 모든 행위에 대한 페이지의 행동**\n을 말한다. 예를 들면 마우스를 올리고 메뉴를 내리고 스크롤을 하는 등의 행동이 모두 이벤트이다.\n\n<br>\n\n```js\n// 먼저 이벤트를 걸어줄 a 태그를 변수에 할당한다.\n> var title = document.getElementById(\"homepage-bulletins\").getElementsByClassName(\"bulletin\")[0].getElementsByTagName(\"a\")[0];\nundefined\n> title\n<a href=​\"https:​/​/​www.youtube.com/​channel/​UCW5YeuERMmlnqo4oq8vwUpg\" class=​\"btn btn-red\" target=​\"_blank\">​Visit Channel​</a>​\n\n// 기존 a 태그를 클릭하면 경고창이 뜨는 이벤트를 만들어준다.\n> title.onclick = function(){\n    alert(\"You clicked me!\");\n};\nƒ (){\n    alert(\"You clicked me!\");\n}\n\n// 마우스를 해당 태그영역에 올리면 역시 경고창이 뜨도록 만들어주었다.\n> title.onmouseover = function(){\n    alert(\"You hovered your mouse over me\");\n};\nƒ (){\n    alert(\"You hovered your mouse over me\");\n}\n```\n\n<br>\n\n많이 쓰는 `onclick` 이벤트와 `onload` 이벤트를 사용해보았다.\n\n<br>\n\n## 예제 - `onclick` 이벤트\n\n![showmore](imgs/2017-10-23/showmore.png)\n\n다음과 같이 텍스트 박스를 만들고, `SHOW MORE` 버튼을 클릭하면 전체 글이 보여지도록 만들려고 한다.\n\n![showless](imgs/2017-10-23/showless.png)\n\n글이 펼쳐졌을 때 버튼의 텍스트는 `SHOW LESS`로 바뀌고, 버튼을 다시 클릭하면 원래 크기로 줄어들면서 버튼 텍스트가 다시 `SHOW MORE`로 바뀌도록 자바스크립트를 작성해본다.\n\n<br>\n\n```js\n// 문단텍스트가 있는 content를 변수에 할당\nvar content = document.getElementById(\"content\");\n\n// 버튼의 텍스트가 상태에 따라 변경되어야 하므로 button에 show-more id를 찾아 할당  \nvar button = document.getElementById(\"show-more\");\n\n// 버튼을 클릭할 때 동작을 정의해준다.\nbutton.onclick = function() {\n\n    // content의 클래스명이 open일 경우에는 박스가 줄어들어야한다.\n    if (content.className == \"open\"){\n        // 따라서 클래스명을 없앤 css가 적용된다.\n        content.className = \"\";\n        // 줄어들었으므로 버튼 텍스트는 SHOW MORE로 표시되도록 해준다.\n        button.innerHTML = \"Show More\";\n    // 줄어든 상태에서는 content가 모두 보여야한다.\n    } else {\n        // 따라서 클래스명이 open일 때의 css가 적용된다.\n        content.className = \"open\";\n        // 늘어났을 때 버튼 텍스트는 SHOW LESS로 표시되도록 해준다.\n        button.innerHTML = \"Show Less\";\n    }\n};\n```\n\n<br>\n\n## `onload` 이벤트\n\n자바스크립트 코드를 연결하는 `<script></script>` 라인은 항상 HTML 하단에 위치시켜야 한다. 만약 위 태그가 HTML 바디 태그 상단에 위치해있다면 페이지를 로드하기도 전에 자바스크립트 코드를 실행시키기 때문이다.\n\n하지만 여건 상 스크립트 코드를 상단에 배치해야할 때가 있는데, 이 때 `window.onLoad` 이벤트를 사용하여 페이지가 로드될 때까지 아무것도 실행하지 않게끔 해줄 수 있다.\n\n예를 들면 다음과 같다.\n\n```js\nwindow.onload = function(){\n    var content = document.getElementById(\"content\");\n    var button = document.getElementById(\"show-more\");\n\n    button.onclick = function() {\n\n        if (content.className == \"open\"){\n            // shrink the box\n            content.className = \"\";\n            button.innerHTML = \"Show More\";\n        } else {\n            // expand the box\n            content.className = \"open\";\n            button.innerHTML = \"Show Less\";\n        }\n    };\n};\n```\n\n즉, 실행할 코드를 `window.onLoad` 내부에 집어넣는 것이다. 하지만 이러한 방법은 깔끔하지 않고 코드가 많을 경우 번거로울 수 있으므로 추천하지 않는다.\n\n대신 `setUpEvent` 메소드를 정의하여 코드를 실행시키는 함수를 따로 만들어준다.  \n\n```js\nfunction setUpEvents(){\n    window.onLoad = function(){\n    var content = document.getElementById(\"content\");\n    var button = document.getElementById(\"show-more\");\n\n    button.onclick = function() {\n\n        if (content.className == \"open\"){\n            // shrink the box\n            content.className = \"\";\n            button.innerHTML = \"Show More\";\n        } else {\n            // expand the box\n            content.className = \"open\";\n            button.innerHTML = \"Show Less\";\n        }\n    };\n}\n\n// 페이지가 로드될 때까지 js 코드는 동작/실행되지 않는다.\nwindow.onload = function(){\n\n    setUpEvents();\n\n};\n```\n\n위의 방식으로 할 경우 **하나의 기능을 모듈화할 수 있어 유지보수가 훨씬 편리**\n해진다. 그렇다고 이러한 작업을 모든 자바스크립트 코드에 적용할 필요는 없다.\n\n단, 먼저 페이지가 로드되는 것이 필요한 자바스크립트 코드가 있다면 적용하는 것이 좋다.\n\n<br>\n","excerpt":"자바스크립트의 란 사용자가 웹페이지에서 수행하는 모든 행위에 대한 페이지의 행동\n을 말한다. 예를 들면 마우스를 올리고 메뉴를 내리고 스크롤을 하는 등의 행동이 모두 이벤트이다. 많이 쓰는  이벤트와  이벤트를 사용해보았다. 예제 -  이벤트  다음…","fields":{"slug":"/js-20-events_01/"},"frontmatter":{"date":"Oct 23, 2017","title":"JS _ 20. 이벤트(Event)와 활용 <1부> 개념, onclick, onload","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n일반적으로 객체지향 언어에서 생성자는 객체를 생성할 때 사용한다. 생성자를 실행하는 방식은 일반적으로 `new`를 사용하는 방법이 있다.\n\n<br>\n\n```js\nvar MyArray = new Array();\n```\n\n생성자 함수를 만들 때는 보통 **첫 글자를 대문자로** 쓴다.\n\n```js\n// 생성자 함수 정의\nvar Car = function(maxSpeed, driver){\n\n    this.maxSpeed = maxSpeed;\n    this.driver = driver;\n    this.drive = function(speed, time){\n        console.log(speed * time);\n    };\n    this.logDriver = function(){\n        console.log(this.driver);\n    };\n};\n```\n\n<br>\n\n## 생성자로 객체 생성하기\n\n다음과 같이 생성자에서 여러 개의 객체를 만들 수 있다.\n\n```js\nvar myCar1 = new Car(70, \"paul\");\nvar myCar2 = new Car(90, \"katie\");\nvar myCar3 = new Car(20, \"mina\");\nvar myCar4 = new Car(80, \"jason\");\nvar myCar5 = new Car(40, \"gordon\");\n\n// test\nmyCar3.drive(70, 3);  // 210\nmyCar4.logDriver();  // jason\nconsole.log(myCar1.maxSpeed);  // 70\n```\n\n<br>\n\n## 생성자 상속 시 주의할 점\n\n자바스크립트에서는 상속을 받으면 상속받은 함수클래스의 `prototype`은 모두 상속해준 함수클래스의 메서드로 오버라이딩된다.\n\n따라서 `constructor`, 즉, 생성자는 필요시 상속받은 함수클래스의 것으로 변수명을 사용하여 다시 정의해준다.\n\n```js\nEmployee.prototype.constructor = Employee;\n```\n\n<br>\n","excerpt":"일반적으로 객체지향 언어에서 생성자는 객체를 생성할 때 사용한다. 생성자를 실행하는 방식은 일반적으로 를 사용하는 방법이 있다. 생성자 함수를 만들 때는 보통 첫 글자를 대문자로 쓴다. 생성자로 객체 생성하기 다음과 같이 생성자에서 여러 개의 객체를…","fields":{"slug":"/js-15-constructor/"},"frontmatter":{"date":"Oct 20, 2017","title":"JS _ 15. 생성자 (Constructor)","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n자바스크립트가 동작하는 데에 꼭 이해해야 할 `DOM`(Document Object Model)의 개념과 활용방식에 대해 소개한다.\n\n<br>\n\n## 1. DOM이란?\n\n`DOM`은 Document Object Model의 약자로, 웹페이지와 상호작용할 때 사용한다. API(application programming interface)의 일종으로, 주로 HTML의 엘리먼트를 추가, 삭제, 변경할 때 사용한다.\n\n<br>\n\n![htmlstructure](imgs/2017-10-20/htmlstructure.png)\n\n- 모든 DOM Element는 `id`를 가진다.\n- 하나 이상의 attribute-value 쌍을 가지고 있다.\n- DOM Tree의 엘리먼트 내에는 `innerHTML`이 있다.\n\n```html\n<div>\n  <span></span><div></div> <!--innerHTML 부분-->\n</div>\n```\n\n<br>\n\n## 2. DOM의 사용 목적\n\nDOM 표준은 API 함수들의 집합이다.\n\n- 트리에 DOM 엘리먼트를 추가하기 위한\n- DOM 엘리먼트를 삭제하기 위한\n- 속성(attrs)을 지우거나 수정하기 위한\n- innerHTML을 읽거나 바꾸기 위한\n\n<br>\n\n### (1) Document\n\n`document`는 쉽게 말해 웹페이지, 즉, HTML 페이지를 의미한다.\n\n<br>\n\n### (2) Object\n\n`document` 내의 모든 HTML 엘리먼트들을 의미한다.\n\n- `<head></head>`\n- `<body></body>`\n- `<ul></ul>`\n- `<p></p>`\n\n등 모든 태그는 오브젝트이다.\n\n<br>\n\n\n### (3) Model\n\n![dommodel](imgs/2017-10-20/dommodel.png)\n\nHTML의 엘리먼트를 아래와 같이 트리 형태로 구조화하여 보여주고 어떠한 노드(`node`)에라도 접근할 수 있다. 접근한 노드에게는 특정 스크립트를 적용할 수 있다.\n\n<br>\n\n### (4) Node\n\n도큐먼트 내에서 바꿀 수 있는 모든 것을 노드라고 부른다. 이러한 노드는\n\n- 엘리먼트\n- 엘리먼트 내 텍스트\n- HTML 속성(attributes)\n\n등이 있다.\n\n<br>\n\n## 3. DOM 객체\n\n- document\n- window\n- div/span/img ...\n- 쉽게 말해 HTML 페이지 안의 모든 아이템(item)은 DOM 객체다.\n\n<br>\n\n## 4. 각 object에 대한 DOM APIs\n\n각 DOM 객체에 대해 3개의 API로 분류할 수 있다. 다음은 `document` 객체에 대한 분류 예시이다.\n\n- 프로퍼티(properties)\n  - `document.stylesheets` : css파일을 읽기 전용으로 출력해줌.\n  - `document.title` : page의 title 출력해줌.\n- 메소드(functions)\n  - `getElementByID` : method/function\n- 이벤트(events)\n    - `onReadyStateChange() : 이벤트 핸들러\n\n<br>\n\n## 5. 자주 사용하는 DOM API 함수들\n\n```js\ndocument.getElementById(\"list\")\ndocument.createElement(\"h1\")\ndocument.innerHTML  // HTML 콘텐트 읽기\ndocument.setAttribute // 속성 부여\ndocument.getAttribute  // 속성 읽기\nelement.style/color/style\nwindow.onload  // 이벤트 삽입하기\n```\n\n<br>\n","excerpt":"자바스크립트가 동작하는 데에 꼭 이해해야 할 (Document Object Model)의 개념과 활용방식에 대해 소개한다. 1. DOM이란? 은 Document Object Model의 약자로, 웹페이지와 상호작용할 때 사용한다. API(applic…","fields":{"slug":"/js-17-dom_01/"},"frontmatter":{"date":"Oct 20, 2017","title":"JS _ 17. DOM의 정의 <1부>","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트에는 브라우저에서 동적으로 시간을 표시할 수 있는 `Date` 내장함수를 제공하고 있다.\n\n<br>\n\n## Date()\n\n다음과 같이 `Date()`를 사용하여 객체를 생성한다.\n\n```js\nvar myDate = new Date();\nconsole.log(myDate); // Mon Oct 23 2017 12:50:59 GMT+0900 (KST)\n```\n\n위의 값은 페이지를 새로고침하면 계속 현재 시간으로 리프레시된다.\n\n<br>\n\n한편으로는 값을 직접 지정해서 변수에 할당할 수도 있다.\n\n```js\n// (년, 월(0~11), 일, 시간, 분, 초) 순\nvar myPastDate = new Date(2002, 3, 11, 23, 4, 21);\nvar myFutureDate = new Date(3002, 4, 29, 23, 4, 21);\n\n\nconsole.log(myPastDate);  // Thu Apr 11 2002 23:04:21 GMT+0900 (KST)\nconsole.log(myFutureDate); // Sat May 29 3002 23:04:21 GMT+0900 (KST)\n```\n\n<br>\n\n## 사용할 수 있는 내장함수들\n\n추가적인 내장함수는 다음과 같다.\n\n```js\nvar birthday1 = new Date(1990, 0, 15, 12, 30, 20);\nvar birthday2 = new Date(1990, 0, 15, 12, 30, 20);\n\n// getMonth() - 객체의 월 출력 (0 ~ 11)\nconsole.log(birthday1.getMonth());  // 0 (1월)\n\n// getFullYear() - 객체의 연도 출력 (YYYY)\nconsole.log(birthday1.getFullYear());  // 1990\n\n// getDate() - 객체의 날짜 출력 (1 ~ 31)\nconsole.log(birthday1.getDate());  // 15\n\n// getDay() - 객체의 요일 출력 (0 ~ 6)\nconsole.log(birthday1.getDay());  // 1 (화요일)\n\n// getHours() - 객체의 시간 출력 (0 ~ 23)\nconsole.log(birthday1.getHours());  // 12\n\n// getTime() - 1970년 1월 1일 기준으로 객체의 시간까지 밀리세컨드 단위의 시간 출력\nconsole.log(birthday1.getTime());  // 632374220000\n\n// 주로 두 객체 간 시간비교를 할 때 사용\nif (birthday1.getTime() == birthday2.getTime()){\n    console.log(\"Birthdays are equal.\");\n} else {\n    console.log(\"Birthdays are not equal.\")\n}\n```\n\n<br>\n","excerpt":"자바스크립트에는 브라우저에서 동적으로 시간을 표시할 수 있는  내장함수를 제공하고 있다. Date() 다음과 같이 를 사용하여 객체를 생성한다. 위의 값은 페이지를 새로고침하면 계속 현재 시간으로 리프레시된다. 한편으로는 값을 직접 지정해서 변수에 …","fields":{"slug":"/js-16-dateobj/"},"frontmatter":{"date":"Oct 20, 2017","title":"JS _ 16. Date Objects","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n지난 포스트에 이어 `DOM`을 활용하는 방식에 대해 실습을 통하여 소개한다. 값을 바꾸고 속성을 찾는 방법, 그리고 CSS 속성을 변경하는 방식에 대해 각각 정리하였다.\n\n<br>\n\n## 1. 실제 DOM에서 값 바꿔보기\n\n```html\n<div class=\"page-banner\">\n  <div class=\"banner-text\">\n    <h2>Javascript class for beginners</h2>\n  </div>\n</div>\n```\n\n위 HTML 코드에서 `h2` 태그 내의 텍스트를 바꿔보도록 하자.\n\n```js\n// myContent에 클래스명이 banner-text인 태그 값을 찾아 할당\n> var myContent = document.getElementsByClassName(\"banner-text\");\nundefined\n> myContent\n[div.banner-text]\n\n// 위 변수에서 내부 h2 값을 myH2에 할당\n> var myH2 = myContent[0].getElementsByTagName(\"h2\");\nundefined\n> myH2\n[h2]\n\n// myH2의 텍스트 값을 다른 값으로 변경\nmyH2[0].innerText = \"hello!\"\n\"hello!\"\nmyH2[0].innerText\n\"HELLO!\"\n```\n\n콘솔에서 실습해보면 브라우저에도 바뀐 값이 적용되어 있는 것을 확인할 수 있다.\n\n<br>\n\n**참고**\n\n텍스트를 변경할 때 사용한 `innerHTML`이나 `textContent`는 모두 객체가 가지고 있는 프로퍼티이다.\n\n<br>\n\n\n## 2. 실제 DOM에서 속성 찾기\n\n```html\n<nav id=\"header-links\">\n  <ul class=\"social-links\">\n    <li>\n      <a href=\"https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg\" class=\"youtube\">YouTube</a>\n    </li>\n  </ul>\n</nav>\n```\n\n위의 HTML 코드에서 `a` 태그의 속성인 `href`의 값을 출력해보자.\n\n```js\n> var myHeaderLinks = document.getElementById(\"header-links\");\nundefined\n> var youTubeLink = myHeaderLinks.getElementsByClassName(\"youtube\");\n> youTubeLink\n[a.youtube]\n\n// getAttribute() 메서드를 사용하여 찾고자 하는 속성(href)을 입력한다.\n> youTubeLink[0].getAttribute(\"href\");\n\"https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg\"\n\n```\n\n<br>\n\n만약 찾은 속성을 다른 값으로 변경하거나 새 속성을 추가하고 싶다면 `setAttribute()`를 사용한다.\n\n```js\n// setAttribute(속성, 추가 또는 변경할 값);\n\n// 추가\n> youTubeLink[0].setAttribute(\"alt\", \"newlink\");\n\n// 변경\n> youTubeLink[0].setAttribute(\"href\", \"https://juliahwang.kr/\");\n```\n\n그러면 다음과 같이 HTML이 변경된다.\n\n```html\n<!--변경 전-->\n <a href=\"https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg\" class=\"youtube\">YouTube</a>\n\n<!--변경 후-->\n<a href=\"https://juliahwang.kr/\" class=\"youtube\" alt=\"newlink\">YouTube</a>\n```\n\n<br>\n\n변경하는 방식은 다음과 같이 해줄 수도 있다.\n\n```js\nyouTubeLink.className = \"#\"\nyouTubeLink.href = \"#\"\n```\n\n<br>\n\n## 3. CSS 스타일 변경해보기\n\n물론 style 속성을 HTML에 직접 지정하는 것은 지양해야할 점이다. 다음과 같이 동작한다는 것만 알아두도록 하자.\n\n```js\n> var myBanner = document.getElementsByClassName(\"banner-text\");\nundefined\n> myBanner\n[div.banner-text]\n\n// h2 태그 찾기\n> var myTitle = myBanner[0].getElementsByTagName(\"h2\");\nundefined\n\n// setAttribute()로 직접 지정해줄 수 있지만 수정하게 되면 이전 속성은 오버라이딩되어 사라지는 단점이 있다.\n> myTitle[0].setAttribute(\"style\", \"color: purple;\");\nundefined\n\n// setAttirbute()는 이전에 지정한 속성을 지우고 다음 속성을 넣는다.\n> myTitle[0].setAttribute(\"style\", \"position: relative;\");\nundefined\n```\n\n<br>\n\n### (1) `setAttribute()`로 수정하기\n\n`setAttribute()`로 수정하면 다음과 같다.\n\n```html\n<!--첫번째 setAttribute(\"style\", \"color: purple;\") 적용 후-->\n<h2 style=\"color: purple;\">hello!</h2>\n\n<!--두번째 setAttribute(\"style\", \"position: relative;\") 적용 후-->\n<h2 style=\"position: relative;\">hello!</h2>\n```\n\n<br>\n\n### (2) `style` 프로퍼티로 직접 스타일 지정하기\n\n위의 대안으로는 `style` 프로퍼티에서 지정하고 싶은 CSS 속성을 직접 주는 것이다. 이는 지정 및 부분 수정에 모두 용이하다.\n\n```js\n> myTitle[0].style.color = \"purple\";\n\"purple\"\n\n// 아래와 같이 지정해도 style.color의 값은 그대로 존재한다.\n> myTitle[0].style.position = \"relative\";\n\"relative\"\n```\n\n또한 수정해도 그 값만 바뀐다.\n\n```html\n<!--첫번째 적용 후-->\n<h2 style=\"color: purple;\">hello!</h2>\n\n<!--두번째 적용 후-->\n<h2 style=\"color: purple; position: relative;\">hello!</h2>\n```\n\n<br>\n\n### (3) CSS 속성명 변경하기\n\ncss 속성명 중 하이픈(`-`)으로 연결된 속성명은 자바스크립트에서 style 프로퍼티로 직접 변경할 때 `Reference Error`를 일으킨다.\n\n따라서 하이픈을 지우고 `CamelCase` 방식으로 변경하여 사용해준다.\n\n```js\n// css 속성 중 background-color 속성을 변경할 때.\nmyTitle[0].style.background-color = \"blue\";  // (x)\nmyTitle[0].style.backgroundColor = \"blue\";  // (o)\n```\n\n<br>\n","excerpt":"지난 포스트에 이어 을 활용하는 방식에 대해 실습을 통하여 소개한다. 값을 바꾸고 속성을 찾는 방법, 그리고 CSS 속성을 변경하는 방식에 대해 각각 정리하였다. 1. 실제 DOM에서 값 바꿔보기 위 HTML 코드에서  태그 내의 텍스트를 바꿔보도록…","fields":{"slug":"/js-17-dom_02/"},"frontmatter":{"date":"Oct 20, 2017","title":"JS _ 18. DOM 활용하기 <2부>","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`DOM`을 활용하는 방식에 대해 실습을 통하여 소개한다. 이번 포스트에서는 `DOM`에 엘리먼트를 추가하고 삭제하는 방법에 대해 정리해보았다.\n\n<br>\n\n## 1. DOM에 새로운 엘리먼트 추가하기\n\n새로운 엘리먼트를 직접 원하는 곳에 추가해줄 수 있다. 이 때 자바스크립트 내장함수인 `createElement()`를 사용하면 된다.\n\n```js\n// 추가할 엘리먼트를 생성한다.\n> var newLi = document.createElement(\"li\");\n<li></li>\n\n> var newA = document.createElement(\"a\");\n<a></a>\n```\n\n<br>\n\n새 엘리먼트를 추가해 줄 위치를 찾은 후, `appendChild()` 메소드를 사용하여 추가해준다.\n\n```js\n// 새로운 엘리먼트를 추가할 Bulletin 게시판 태그를 찾는다.\n> var newBulletin = document.getElementById(\"homepage-bulletins\").getElementsByClassName(\"bulletin\")[0];\nundefined\n> newBulletin\n<div class=\"bulletin\">\n  <h4>Subscribe to channel</h4>\n  <p>Plus, you can go ahead and leave a nice comment</p>\n  <a href=\"https://www.youtube.com/channel/\" target=\"_blank\">Visit Channel</a>\n</div>\n\n// 찾은 태그에 새로운 엘리먼트들을 자식으로 추가한다.\n> newBulletin.appendChild(newLi);\n> newLi.appendChild(newA);\n\n// 마지막으로 생성한 엘리먼트에 텍스트를 집어넣는다.\n> newA.innerHTML = \"Don't forget to subscribe!!\";\n```\n\n<br>\n\n결과 HTML은 다음과 같이 출력된다.\n\n```html\n<div class=\"bulletin\">\n  <h4>Subscribe to channel</h4>\n  <p>Plus, you can go ahead and leave a nice comment</p>\n  <a href=\"https://www.youtube.com/channel/\" target=\"_blank\">Visit Channel</a>\n  <li>\n    <a>Don't forget to subscribe!!</a>\n  </li>\n</div>\n```\n\n<br>\n\n### 원하는 위치에 엘리먼트 추가하기\n\n만약 만들어준 `li` 태그를 newBulletin 태그 덩어리 내 마지막이 아닌 `p`태그 앞에 넣어주고 싶다면 내장함수 `insertBefore()`를 사용한다.\n\n```js\n> newBulletin.insertBefore(newLi, newBulletin.getElementsByTagName(\"p\")[0];\n<li>...</li>\n```\n\n결과 HTML은 다음과 같이 바뀐다.\n\n```html\n<div class=\"bulletin\">\n  <h4>Subscribe to channel</h4>\n  <li>\n    <a>Don't forget to subscribe!!</a>\n  </li>\n  <p>Plus, you can go ahead and leave a nice comment</p>\n  <a href=\"https://www.youtube.com/channel/\" target=\"_blank\">Visit Channel</a>\n</div>\n```\n\n<br>\n\n## 38. DOM에서 엘리먼트 삭제하기\n\n삭제할 엘리먼트가 있는 부모 엘리먼트를 찾아 `parent` 변수에 할당한다.\n\n```js\n> var parent = document.getElementById(\"homepage-bulletins\").getElementsByClassName(\"bulletin\")[0];\nundefined\n> parent\n<div class=​\"bulletin\">​…​</div>​\n```\n\n<br>\n\n삭제할 엘리먼트는 `removeChild()` 함수를 사용하여 지워준다.\n\n```js\n> var child = parent.getElementsByTagName(\"p\")[0];\n<p>​…​</p>​\n\n// 삭제\n> parent.removeChild(child);\n<p>​…​</p>​\n```\n\n결과 HTML은 다음과 같다.\n\n```html\n<div class=\"bulletin\">\n  <h4>Subscribe to channel</h4>\n  <li>\n    <a>Don't forget to subscribe!!</a>\n  </li>\n  <a href=\"https://www.youtube.com/channel/\" target=\"_blank\">Visit Channel</a>\n</div>\n```\n\n<br>\n\n엘리먼트를 지우더라도 지우면서 변수에 저장해놓으면 나중에 필요할 때 다시 `appendChild()`하여 쓸 수 있다.\n\n```js\n> var removed = parent.removeChild(child);\n<p>​…​</p>​\n> parent.appendChild(removed);\n<p>...</p>\n```\n\n<br>\n","excerpt":"을 활용하는 방식에 대해 실습을 통하여 소개한다. 이번 포스트에서는 에 엘리먼트를 추가하고 삭제하는 방법에 대해 정리해보았다. 1. DOM에 새로운 엘리먼트 추가하기 새로운 엘리먼트를 직접 원하는 곳에 추가해줄 수 있다. 이 때 자바스크립트 내장함수…","fields":{"slug":"/js-17-dom_03/"},"frontmatter":{"date":"Oct 20, 2017","title":"JS _ 19. DOM에 엘리먼트 추가, 삭제하기 <3부>","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트에서 중요한 개념인 변수의 스코프에 대해 실습한 내용을 소개한다.\n\n<br>\n\n## 변수 스코프\n\n```js\n// 전역 변수(global scope)\n// 같은 코드 내 어디서든지 사용가능하다.\nvar foo = 20;\n\n// 지역 변수(local scope)\n// 외부에서 사용할 수 없고 함수 내에서만 사용 가능하다.\nfunction myFunction() {\n    var bar = 10;\n}\n```\n\n<br>\n\n### 지역 변수\n\n```js\n// 지역 변수 예시\nfunction getAvg (a, b){\n\n    var avg = (a + b) / 2; // local variable - 함수 내에서만 사용가능\n    console.log(avg);\n    return avg;\n}\n```\n\n<br>\n\n### 전역 변수\n\n```js\n// 전역 변수 예시\nvar myAvg = getAvg(7, 11); // global variable - 어디서든지 사용가능\nconsole.log(\"The average is \" + myAvg);\n\n// 전역에서 출력해보기\nconsole.log(\"myAvg 변수 : \" + myAvg);\nconsole.log(\"avg 변수 : \" + avg);\n```\n\n다음과 같이 지역변수인 `avg`는 함수 내에서만 사용되고 찾지 못하므로 `Reference Error`를 발생시킨다.\n\n![localvar](imgs/2017-10-19/localvar.png)\n\n<br>\n\n## 변수에 함수 할당하기\n\n```js\n/* 평균값을 구하는 함수를 실행하고 나서\n변수를 로그 출력용 함수에 사용할 수도 있다. */\nvar myResult = getAvg(9, 10);\n\n\nfunction logResult(){\n\n    console.log(\"The average is \" + myResult + \" inside the function.\");\n\n}\n\nlogResult();\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트에서 중요한 개념인 변수의 스코프에 대해 실습한 내용을 소개한다. 변수 스코프 지역 변수 전역 변수 다음과 같이 지역변수인 는 함수 내에서만 사용되고 찾지 못하므로 를 발생시킨다.  변수에 함수 할당하기","fields":{"slug":"/js-09-varscope/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 9. 변수 스코프 (Scope)","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 숫자 자료형과 자료형 연산시 등장하는 `NaN`의 개념에 대해 소개한다.\n\n<br>\n\n## 숫자 자료형(Numbers)의 연산과 연쇄\n\n```js\n// 더하기 연산, add operation\nvar a = 7;\nvar b = 5;\nconsole.log(a + b);\nconsole.log(typeof (a + b));\n\n// 연쇄, concatenation\nvar a = \"7\";\nvar b = 5;\nconsole.log(a + b);\nconsole.log(typeof (a + b));\n```\n\n숫자형에 `\"\"`를 붙일 경우 문자형으로 변환된다. 문자형과 숫자형 자료를 더하면 띄어쓰기 없이 합쳐진다. 결과는 다음과 같이 나온다.\n\n![number](imgs/2017-10-19/number.png)\n\n<br>\n\n## NaN (Not a Number)\n\n```js\nvar a = \"8\";\nvar b = 4;\n\n\nconsole.log(a * b); // 32\n```\n\n위 로그의 결과는 32다. '22'에서 '+' 연산은 하나의 변수가 문자형일 때 두 수를 연쇄(concatenation)적으로 붙여서 출력했다면 '*' 연산은 그대로 연산을 진행한다.\n\n<br>\n\n```js\nvar c = \"apple\";\nvar d = 3;\n\n// 변수 'c' 가  NaN인지를 조건화하였다.\nif (isNaN(c)) {\n\n    console.log(\"That int isn't a number.\");\n\n} else{\n    // 숫자형이라면 곱하기 연산결과를 출력한다.\n    console.log(\"meaning of life is \" + (c * d));\n\n}\n\nconsole.log(c * d);\n```\n\n<br>\n\n## 이중부정\n\n다음은 이중부정을 사용한 조건문이다.\n\n```js\n// 이중부정, double negation\n// 'c'의 값이 숫자라면 (= 숫자가 아닌게 아니라면)\nif (!isNaN(c)) {\n\n    console.log(\"meaning of life is \" + (c * d));\n\n}\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 숫자 자료형과 자료형 연산시 등장하는 의 개념에 대해 소개한다. 숫자 자료형(Numbers)의 연산과 연쇄 숫자형에 를 붙일 경우 문자형으로 변환된다. 문자형과 숫자형 자료를 더하면 띄어쓰기 없이 합쳐진다. 결과는 다…","fields":{"slug":"/js-10-numbersnan/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 10. 숫자형 자료와 NaN","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 문자 자료형에 대한 소개와 비교연산, 그리고 `slicing`, `spliting` 방식에 대해 소개한다.\n\n<br>\n\n## 문자 자료형 (Strings)\n\n```js\n> var myString1 = \"I am a string\";\nI am a string\n\n/* 다음과 같이 큰따옴표 안에 큰따옴표를 또 쓰게 되면\n원래 감싸고 있던 큰따옴표가 내부 큰 따옴포에 의해 끊겨버린다. */\nvar myString2 = \"I am a \"fun\" string\"; // (x)\n\n// 다음과 같이 작은 따옴표를 외부에 사용한다.\nvar myString3 = 'I am a \"fun\" string';\n\n// 역슬래시(\\)로 따옴표 이스케이프 처리가 가능하다.\nvar myString4 = 'I\\'m a \"fun\" string';\n\nvar myString5 = \"I am a ninja string\";\n\n\nconsole.log(myString1);\nconsole.log(myString2); // - Error\nconsole.log(myString3);\nconsole.log(myString4);\n\nconsole.log(myString1.length);\n\n// 스트링의 모든 글자를 대문자로 출력해준다.\nconsole.log(myString1.toUpperCase());\n\n// 'string'이라는 문자열이 몇 번째 인덱스에 존재하는지 알려준다.\nconsole.log(myString1.indexOf(\"string\"));\n\n// 만약 찾는 인덱스가 없다면 mild warning으로 '-1'을 반환하여 예외처리가 가능하다.\nconsole.log(myString1.indexOf(\"ninja\"));\n\n// 예외처리 예시\nif (myString5.indexOf(\"ninja\") === -1) {\n\n    console.log(\"The world ninja is not in the string1\");\n\n} else{\n\n    console.log(\"The word ninja starts at position \" + myString1.indexOf(\"ninja\") === -1);\n\n}\n```\n\n<br>\n\n## 문자형의 비교연산\n\n다음은 스트링 값의 비교연산에 대한 예제들이다.\n\n```js\n// 예제 1\nvar string1 = \"abc\";\nvar string2 = \"cde\";\n// false 출력\nconsole.log(string1 === string2);\n\n// 예제 2\nvar string1 = \"abc\";\nvar string2 = \"abc\";\n// true 출력\nconsole.log(string1 === string2);\n\n// 예제 3\nvar string1 = \"abc\";\nvar string2 = \"ABC\";\n// false 출력. 대소문자 구분이 가능하다.\nconsole.log(string1 === string2);\n\n// 예제 4\nvar string1 = \"abc\";\nvar string2 = \"ABC\";\n// true로 출력. 내장함수사용 가능.\nconsole.log(string1.toLowerCase() === string2.toLowerCase());\n\n// 예제 5\nvar string1 = \"abc\";\nvar string2 = \"cde\";\n// a보다 c가 알파벳 순서상 크기 때문에 true 반환\nconsole.log(string1 < string2);\n\n// 예제 6\nvar string1 = \"abc\";\nvar string2 = \"Cde\";\n// 소문자가 대문자보다 크다. 따라서 false 반환\nconsole.log(string1 < string2);\n\n// 예제 7\nvar string1 = \"Abc\";\nvar string2 = \"Cde\";\n// 대문자에서도 예제 5와같이 비교하여 true 반환\nconsole.log(string1 < string2);\n```\n\n<br>\n\n## 문자열 잘라내기와 나누기 (String slicing & spliting)\n\n```js\n// slice() 사용하여 문자열 나누기\n> var str = \"Hello World\";\nundefined\n> str\n\"Hello World\"\n> var str2 = str.slice(2, 9);\nundefined\n> str2\n\"llo Wor\"\n\n> var str3 = str.slice(2);\nundefined\n> str3\n\"llo World\"\n```\n\n<br>\n\n`split`은 다음과 같이 문자열에서 기준문자에 의해 여러 조각으로 나누는 것을 말한다.\n\n![split](imgs/2017-10-19/split.png)\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 문자 자료형에 대한 소개와 비교연산, 그리고 ,  방식에 대해 소개한다. 문자 자료형 (Strings) 문자형의 비교연산 다음은 스트링 값의 비교연산에 대한 예제들이다. 문자열 잘라내기와 나누기 (String slic…","fields":{"slug":"/js-11-string/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 11. 문자형 자료의 연산","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 배열에 대해 간단히 소개한다.\n\n<br>\n\n## 배열 생성하기 (Arrays)\n\n```js\n> var myArray = []; // 배열 생성 방법 1\nundefined\n> myArray\n[]\n\n> var myArray3 = new Array(); // 배열 생성 방법 2\nundefined\n\n> var myArray4 = new Array(5); // 배열 생성 방법 3 - 길이값 부여\nundefined\n> myArray4\n(5) [empty × 5]\n  length: 5\n  __proto__: Array(0)\n\n```\n\n<br>\n\n## 배열 사용하기\n\n\n```js\n> myArray[0] = 25;\n25\n> myArray[0]\n25\n\n> console.log(myArray);\n(4) [25, true, false, \"hello\"]\n  0: 25\n  1: true\n  2: false\n  3: \"hello\"\n  length: 4\n  __proto__: Array(0)\n\n// 값변경하기\nmyArray[3] = \"goodbye\";\n\"goodbye\"\n\n> myArray4\n(5) [empty × 5]\n  length: 5\n  __proto__: Array(0)\n\n// 배열의 길이(값의 갯수)\n> myArray2.length\n4\n\n// 배열 정렬하기(숫자형 > 불리언형 > 문자형 순)\n> myArray2.sort()\n(4) [10, 20, false, \"hi\"]\n\n// 배열 반대로 정렬하기\n> myArray2.reverse();\n(4) [\"hi\", false, 20, 10]\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 배열에 대해 간단히 소개한다. 배열 생성하기 (Arrays) 배열 사용하기","fields":{"slug":"/js-12-array/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 12. 배열 (Array)","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 객체에 대해 간단히 소개한다.\n\n<br>\n\n## 객체 (Objects)\n\n- 자바스크립트에서는 객체를 사용한다.\n- strings, numbers, arrays... 등이 모두 객체이다.\n- 이러한 객체는 클래스의 프로퍼티와 메서드를 사용할 수 있다.\n\n```js\n// myString은 String의 객체이다.\n// 객체는 String의 내장 함수와 프로퍼티를 사용할 수 있다.\n> var myString = new String()\nundefined\n> myString = \"hello\";\n\"hello\"\n\n> myString.length\n5\n\n// 내장 메서드 사용가능\n> myString.toLowerCase();\n\"hello\"\n> myString.toUpperCase();\n\"HELLO\"\n```\n\n<br>\n\n## 자바스크립트 객체 만들기\n\n\n```js\n// 예시 - 배열 생성 및 데이터 삽입\nvar myArray = new Array();\nmyArray[0] = 8;\nmyArray[1] = \"hello\";\n\n// 새로운 객체 생성\nvar myCar = new Object();\n\n// 객체의 프로퍼티 생성\nmyCar.maxSpeed = 50;\nmyCar.driver = \"Julia\";\n\n// 객체의 프로퍼티 출력\nconsole.log(myCar.driver);\n\n// 객체의 메소드 생성\nmyCar.drive  = function(){\n    console.log(\"now driving\");\n};\n\n// 객체의 메소드 실행\nmyCar.drive();\n\n// 객체에 프로퍼티와 메소드를 딕셔너리로 선언해줄 수도 있다.\n// var myArray2 = [true, 15, \"hi\"];\nvar myCar2 = {\n    maxSpeed: 50,\n    driver: \"katie\",\n    // 인자를 주어 연산 가능\n    drive: function(speed, time){\n        console.log(speed * time);\n    }\n};\n\nconsole.log(myCar2.maxSpeed);\nmyCar2.drive(50, 3);\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 객체에 대해 간단히 소개한다. 객체 (Objects) 자바스크립트에서는 객체를 사용한다. strings, numbers, arrays... 등이 모두 객체이다. 이러한 객체는 클래스의 프로퍼티와 메서드를 사용할 수 있…","fields":{"slug":"/js-13-objects/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 13. 객체 (Objects)","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트의 `this`가 각 컨텍스트(context)마다 어떠한 방식으로 동작하는지 MDN 문서를 참고하여 정리해보았다.\n\n<br>\n\n## `this` 키워드\n\n`this`는 자바스크립트에서 **함수의 현재 실행 문맥**\n이다. 따라서 `this`가 쓰여지고 호출되는 방식에 따라 참조하는 객체가 달라진다.\n\n```js\nalert('Hello world');  // 함수 실행\nconsole.log('Hello world');  // 메소드 실행\nnew myConstructor();  // 생성자 실행\nalert.call(undefined, 'Hello world');  // 간접 실행\n```\n\n위와 같은 실행 타입의 차이와 실행모드(일반, 엄격)는 `this`의 실행 문맥에 영향을 미친다.\n\n<br> \t\n\n### 1. 전역 컨텍스트\n\n`this`는 기본적으로 window, 즉, 브라우저의 전역객체이다.\n\n```js\n\nconsole.log(this.document == document); // true\n\nconsole.log(this === window); // true\n\nthis.a = 30;\nconsole.log(window.a); // 30\n```\n\n<br>\n\n### 2. 함수 컨텍스트\n\n```js\n// 함수 내부에서 this는 함수를 호출한 방법에 의해 좌우된다.\n// - 아래 예시에서는 호출에 의해 설정되지 않는다.\n// -strict 모드가 아니므로 항상 전역 객체에서 기본이 되는 객체이다.\nfunction f1(){\n    return this;\n}\n\nconsole.log(f1() === window); // true\n\n\n// strict mode에서 this는 실행 컨텍스트에서 할당되고 유지된다.\nfunction f2(){\n    \"use strict\"\n    return this;\n}\n// f2()내의 this는 undefined인데, f2가 객체의 메소드나 프로퍼티가 아니라 직접 호출되었기 때문이다.\n// 결과적으로 window 객체로 잘못 반환한 것이다.\nconsole.log(f2() === undefined);  // true\n\n```\n\n<br>\n\n### 3. 객체의 메소드로서 this\n\n(1) `this`는 실행되는 시점의 문맥을 따른다.\n\n```js\nvar myCar2 = {\n\n    maxSpeed: 80,\n    driver: \"julia\",\n    drive: function(speed, time){\n        console.log(speed * time);\n    },\n    test: function(){\n        console.log(this);\n    }\n};\n\nvar myCar3 = {\n\n    maxSpeed: 90,\n    driver: \"katie\",\n    drive: function(speed, time){\n        console.log(speed * time);\n    },\n    test: function(){\n        console.log(this);\n        // 다음과 같이 써도 되지만 this를 쓰면 리팩토링을 줄여준다.\n        console.log(myCar3);\n    }\n};\n\nconsole.log(this);\nmyCar2.test();  // myCar2 객체 출력\nmyCar3.test();  // myCar3 객체 출력\n```\n\n<br>\n\n(2) `this`는 함수가 정의된 방법이나 위치에 구애받지 않는다. 다음과 같이 변수에 함수로 할당할 수도 있다.\n\n```js\nvar myVar1 = {\n    prop:30,\n    f: function(){\n    return this.prop;\n    }\n};\n\nconsole.log(myVar1.f());  // 30\n```\n\n<br>\n\n(3) (2)의 예제에서 f 함수를 밖에 정의해도 동일하게 동작한다.\n\n```js\nvar myVar2 = {prop: 30};\n\nfunction independent(){\n    return this.prop;\n}\n\nmyVar2.f = independent;\n\nconsole.log(myVar2.f()); // 30\n```\n\n<br>\n\n(4) `this`는 멤버 대상에 영향을 받는다.\n\n```js\nmyVar2.b = {f3: independent, prop: 51};\n\n/* 아래 myVar3.b의 메소드 f3이 실행되는 동안\n함수 내부의 this는 myVar3.b를 나타낸다. 가장 즉각적인 참조역할을 수행하는 것이다. */\nconsole.log(myVar2.b.f3()); // 51\n```\n\n<br>\n\n### 4. 객체의 prototype 체인에서 this\n\n```js\nvar myVar4 = {\n    f:function(){return this.a + this.b;\n    }\n};\n// 메소드가 한 객체의 prototype 체인에 있으면 메서드는 객체에 있는 것처럼 this는 메소드가 호출된 객체를 나타낸다.\n// myVar5는 f 속성을 가지고 있지 않지만 prototype으로부터 상속받았다.\n\nvar myVar5 = Object.create(myVar4);\nmyVar5.a = 1;\nmyVar5.b = 2;\n\n// myVar5는 f 멤버를 가지게 되고 함수 내부의 this는 myVar5를 나타낸다.\n// 이는 자바스크립트 prototype 상속의 특징이다.\nconsole.log(myVar5.f()); // 3\n```\n\n<br>\n\n### 5. 생성자 함수에서 this\n\n```js\n// - 생성자의 기본은 this에 의해 참조되는 객체를 반환하지만 가끔 다른 객체를 반환할 수 있다.\n// - 반환값이 객체가 아니면 this객체를 반환한다.\n\n/* 생성자 함수 작동원리\nfunction myConstructor(){\n    - 실제 함수로직코드를 작성하는 부분이다.\n    - this에 할당해 속성을 만든다.\n      ex_ this.myVar = 1;\n}\n\n생성자의 실행은 표현식 앞에 new라는 키워드가 붙었을 때\n함수 객체로 계산되어 수행된다.\nex_ var myVarEx = new myConstructor();\n*/\n\n// (1) 함수내에 return문이 없으면 객체는 'new 표현식'의 결과처럼 작동한다.\nfunction A1(){\n    this.p1 = 37;\n}\n\nvar a = new A1();\nconsole.log(a.p1);  // 37\n\n// (2) return값이 있으면 결과는 this에 연결된 객체로 반환된다.\nfunction A2(){\n    this.p2 = 60;\n    return {p2:63};\n}\n\nvar b = new A2();\n// 이 때 this.p2 = 60; 객체는 생성하는 동안 return되었으므로 this에 연결된 새로운 객체는 그냥 버려진다.\nconsole.log(b.p2);  // 63\n```\n\n<br>\n\n### 6. `f.call()`과 `f.apply()`에서 this\n\n```js\n// - 함수 내부에서 this를 사용할 때 특정 객체와 연결하여 사용할 수 있다.\n\nfunction add(c, d){\n    return this.a + this.b + c + d;\n}\n\nvar myVar6 = {a:1, b:3};\n\n// this로 사용할 객체와 매개변수 인자값을 전달하였다.\nconsole.log(add.call(myVar6, 4, 5));  // 1+3+4+5=13  \n\n// this로 사용할 객체와 함수의 인수로 사용되는 배열을 전달하였다.\nconsole.log(add.apply(myVar6, [7, 8]));  // 1+3+7+8=19\n\n// 이 때 this로 연결된 값이 객체가 아니면 내부 ToObject를 사용하여 객체로 변환될 것이다.\n// 기본 값이 전달되면 다음과 같이 객체로 생성된 후 전달된다.\nfunction foo(){\n    console.log(Object.prototype.toString.call(this));\n}\n\nfoo.call(7); // [object Number]\n```\n\n<br>\n\n### 7. bind 메소드에서의 this\n\n```js\n/* - ECMAScript5에서 Function.prototype.bind\n메소드를 도입하여 f.bind(객체)를 호출하면\n다음과 같은 asf 생명주기로 새로운 함수를 생성한다.\n보통 this는 메소드가 정의되어 있는 객체라고 생각하는데\n\n객체 밖에 있는 메소드를 사용할 경우\nbind 함수로 메소드를 객체에 포함시킬 수 있다. */\nfunction f(){\n    return this.a;\n}\n\nvar g = f.bind({a:\"julia\"});\nconsole.log(g());  // julia\n\nvar o = {a:29, f:f, g:g};\nconsole.log(o.f(), o.g()); // 29, \"julia\"\n```\n\n<br>\n\n### 8. DOM 핸들러로서의 함수에서 this\n\n```js\n/* - 함수가 이벤트 핸들러로 사용될 때\nthis는 이벤트가 발생한 엘리먼트로 설정된다.*/\nfunction turnBlue(e){\n    // 항상 true 반환\n    console.log(this === e.currentTarget);\n\n    // currentTarget과 target이 같은 객체이면 true\n    console.log(this === e.target);\n    this.style.backgroundColor = \"#blue\";\n};\n\n// document의 모든 엘리먼트 목록 반환\nvar elements = document.getElementsByTagName(\"*\");\n\n/* 클릭 리스너로 위 함수를 추가해준후\n엘리먼트를 클릭하면 파랗게 표시된다.\n몇몇 브라우저는 이외의 방법을 사용하기도 하므로\n이 관습을 따르지 않을 수 있다.\n*/\nfor(var i=0; i<elements.length; i++){\n    elements[i].addEventListener('click', turnBlue, false);\n}\n```\n\n<br>\n\n### 9. in-line 이벤트 헨들러로서의 함수에서 this\n\n```html\n<!--코드가 in-line 핸들러에서 호출될 때\nthis는 리스너가 위치한 DOM 엘리먼트로 할당된다.\n-->\n\n<!--(1) 오직 외부 코드에서 this를 할당 가능-->\n<button onclick=\"alert(this.tagName.toLowerCase());\">Show this  <!--클릭시 button 출력-->\n</button>\n\n<!--(2) this는 전역/window 객체가 반환\n- 함수 내부의 this가 할당되지 않았기 때문이다.\n- 즉, 아래 코드의 this는 호출에 의해 할당되지 않고 non-strict 모드의 기본객체이다.-->\n<button onclick=\"alert(function(){return this}());\">Show inner this  <!--클릭시 [object Window] 출력-->\n</button>\n\n```\n\n<br>\n\n---\n\n## 참고자료\n\n1) [MDN 문서 - this](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this)\n\n2) [번역 및 추가예제](http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/)\n","excerpt":"자바스크립트의 가 각 컨텍스트(context)마다 어떠한 방식으로 동작하는지 MDN 문서를 참고하여 정리해보았다.  키워드 는 자바스크립트에서 함수의 현재 실행 문맥\n이다. 따라서 가 쓰여지고 호출되는 방식에 따라 참조하는 객체가 달라진다. 위와 같…","fields":{"slug":"/js-14-this/"},"frontmatter":{"date":"Oct 19, 2017","title":"JS _ 14. 자바스크립트의 this","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n`HTML`은 웹페이지의 구조를 제어한다. `CSS`은 `HTML` 구조의 디스플레이와 디자인을 제어한다. `JavaScript`는 `HTML` 요소의 행동과 인터렉티비티(상호작용, Interactivity)을 추가해준다.\n\n<br>\n\n## 1. JavaScript는 스크립트 언어이다.\n\n- 의도적으로 제한되어 있다.\n- `C++` 이나 `Java`같은 프로그래밍언어와 다른 특징들을 가진다.\n- 컴퓨터 내 파일시스템이나 데이터베이스와 직접 통신할 수 없다.\n- 웹페이지를 제어하기 위한 언어이다.\n- 클라이언트 사이드 언어이다.\n- 자바스크립트는 사용자 경험을 강화하기 위한 언어이다. 따라서 핵심 기능에서는 사용하지 않는다.\n- `JAVA`와는 상관없는 언어이다. 단지 당시 `JAVA`가 유명했기 때문에 이러한 이름이 붙여졌다.\n- 자바스크립트의 공식 이름은 `ECMAScript`이다.\n\n클라이언트, 즉 브라우저에서 동작하는 언어를 클라이언트 사이드 언어라고 한다. 서버에서 받은 데이터를 브라우저에 처리하는 언어들이다. (ex_ HTML, CSS, JS)\n\n<br>\n\n## 2. 기본 문법\n\n- JavaScript는 대소문자를 구별한다.(이름처럼...)\n- 세미콜론(`;`)으로 종료하는 선언으로 구성한다.\n- 공백이나 줄바꿈을 인식하지 못한다.\n- `//`를 사용하여 한줄 주석을 쓴다.\n- `/**/`를 사용하여 여러 줄 주석을 쓴다.\n- 자바스크립트는 위에서부터 아래로 실행한다.\n\n<br>\n\n## 3. 기본 변수 선언\n\n- 다음과 같이 `var`를 사용하여 변수를 선언한다.\n\n```js\nvar myVar1 = 40;\n```\n\n- 변수의 타입을 지정해줄 필요가 없다(동적타입을 지원한다)\n\n```js\nvar myVar2 = 20; (o)\nint myVar3 = 10; (x)\n```\n\n- 변수명은 `CamelCase`를 따른다.\n- 변수의 타입을 변환할 수 있다.(하지만 추천하지는 않는다.\n\n<br>\n\n## 4. 기본 연산자\n\n```js\n// '=' 는 변수를 선언할 때 사용.\n> var myVar = 5;\n> myVar\n5\n\n// 숫자끼리의 연산 가능\n> 5 + 5\n10\n\n// 변수와 숫자 연산 가능\n> myVar + 10\n15\n\n// 연산을 다시 변수에 할당\n> myVar = myVar + 10\n15\n> myVar = myVar / 2\n7.5\n\n// 숫자와 문자를 합하면 숫자가 문자형으로 변환되어 합쳐진다.\n> 5 + \"hello\"\n\"5hello\"\n\n> 100 + \"wow\"\n\"100wow\"\n\n// 문자와 문자형의 연산 가능\n> \"hello\" + \" david\"\n\"hello david\"\n\n// 숫자와 문자는 곱해지지 않는다.\n// NaN은 Not a Number 이라는 뜻.\n5 * \"hello\"\nNaN\n\n// myVar에 5를 더하여 새로 변수를 선언\n> var myVar = 10;\nundefined\n> myVar = myVar + 5;\n15\n> myVar\n15\n\n// 위의 과정은 \"<변수> <연산자>= <연산하려는 숫자>\" 형식으로 짧게 사용가능\n> myVar += 5;\n20\n> myVar\n20\n\n> myVar *= 2;\n40\n> myVar\n40\n\n// 전위/후위 연산자를 사용할 수도 있다.\n> myVar\n26\n\n// 전위연산자 - 1 더한 후의 값을 출력\n> ++myVar\n27\n\n// 후위연산자 - 출력하고 1 더하기 연산\n> myVar++\n27\n// 다시 출력해보면 1이 더해져있다.\n> myVar\n28\n```\n\n<br>\n","excerpt":"은 웹페이지의 구조를 제어한다. 은  구조의 디스플레이와 디자인을 제어한다. 는  요소의 행동과 인터렉티비티(상호작용, Interactivity)을 추가해준다. 1. JavaScript는 스크립트 언어이다. 의도적으로 제한되어 있다.  이나 같은 프…","fields":{"slug":"/js-01-intro/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 1. 자바스크립트의 정의와 기본 문법","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n브라우저 콘솔에서 자바스크립트로 로깅(=기록을 남기는, 출력하는) 방식을 소개한다.\n\n<br>\n\n```js\n// 변수 선언\n> var myVar = \"Julia\";\nundefined\n\n// 화면에 myVar 변수를 쓴다.\n> document.write(myVar);\nundefined\n\n// 콘솔에 myVar 변수값을 출력한다.\n> console.log(myVar);\nJulia\nundefined\n\n// 변수를 그대로 쓸 수도 있다.\n> document.write(10);\nundefined\n\n> console.log(40);\n40\nundefined\n\n// 두 방식 모두 연산도 가능하다.\n> document.write(20 / 4);\nundefined\n\n> console.log(20 + 4);\n24\nundefined\n```\n\n위의 코드를 진행하고 난 후의 브라우저 화면은 다음과 같다.\n\n![documentwrite](imgs/2017-10-18/documentwrite.png)\n\n<br>\n","excerpt":"브라우저 콘솔에서 자바스크립트로 로깅(=기록을 남기는, 출력하는) 방식을 소개한다. 위의 코드를 진행하고 난 후의 브라우저 화면은 다음과 같다.","fields":{"slug":"/js-02-console/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 2. 콘솔 로그 남기기","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트의 if 조건문은 조건을 충족하는 경우 특정 코드를, 만족하지 않을 경우 다른 특정 코드를 적용하는 방식으로 동작한다.\n\n<br>\n\n```js\n// 12_ifstatement.js\n\nvar youLikeMeat = true;\nvar myNum = 10;\n\nif (youLikeMeat) {\n    // 코드블록 영역\n    document.write(\"Here is the Meat Menu.\");\n} else{\n    document.write(\"Here is the Vegitarian Menu.\")\n}\n\nif (myNum > 10) {\n    // 코드블록 영역\n    document.write(\"My number is greater than 10\");\n} else{\n    // 다른 조건의 코드블록 영역\n    document.write(\"My number is smaller than 10\");\n}\n```\n\n<br>\n\n조건이 여러가지인 경우에는 `else if`를 쓸 수 있다.\n\n```js\n// 13_elseifstatement.js\n\nvar myAge = 39;\n\nif (myAge > 30) {\n\n    document.write(\"you are over 30.\");\n\n} else if (myAge > 20){\n\n    document.write(\"you are over 20.\");\n\n} else if (myAge > 10){\n\n    document.write(\"you are over 10.\");\n\n} else{\n\n    document.write(\"you are not over 10.\");\n\n}\n```\n\n<br>\n","excerpt":"자바스크립트의 if 조건문은 조건을 충족하는 경우 특정 코드를, 만족하지 않을 경우 다른 특정 코드를 적용하는 방식으로 동작한다. 조건이 여러가지인 경우에는 를 쓸 수 있다.","fields":{"slug":"/js-04-if/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 4. if & else if 조건문","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n자바스크립트의 자료형 중 `Boolean`형에 대해 알아보고 연산에 활용하는 방법을 소개한다.\n\n<br>\n\n```js\n> var iLikeMeat = true;\nundefined\n\n> iLikeMeat\ntrue\n\n// 따옴표를 붙이면 그냥 문자열로 인식한다.\n> iLikeMeat = \"true\";\n\"true\"\n\n> iLikeMeat\n\"true\"\n\n> iLikeMeat = false;\nfalse\n\n> iLikeMeat\nfalse\n\n> 7 > 3\ntrue\n\n> 7 < 5\nfalse\n\n// '='는 변수에 값을 할당할 때만 쓰인다.\n> 7 = 7\nVM771:1 Uncaught ReferenceError: Invalid left-hand side in assignment\n\n> 값을 비교하려면 '=='를 사용한다.\n7 == 7\ntrue\n7 == 5\nfalse\n\n// 0을 입력하면 false가 나오지 않고 그대로 0이 출력된다.\n> 0\n0\n> 1\n1\n```\n\n<br>\n\n## Boolean()\n\n```js\n// 자바스크립트 중 값의 true, false를 반환해주는 함수인 Boolean()\n> Boolean(7 > 5);\ntrue\n> Boolean(6);\ntrue\n> Boolean(1);\ntrue\n\n// 함수에 넣은 0은 false로 출력된다.\n> Boolean(0);\nfalse\n> Boolean(-0);\nfalse\n> Boolean(-4);\ntrue\n> Boolean(\"hello\");\ntrue\n> Boolean(\"\");\nfalse\n```\n\n<br>\n","excerpt":"자바스크립트의 자료형 중 형에 대해 알아보고 연산에 활용하는 방법을 소개한다. Boolean()","fields":{"slug":"/js-03-boolean자료형/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 3. Boolean 자료형","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 `while` 루프와 `for` 루프에 대해 소개한다.\n\n<br>\n\n## 1. while 루프\n\n```js\nvar age = 5;\n\n//while (condition) {\n    // execute the given code here\n//}\n\nwhile (age < 10) {\n\n    console.log(\"Your age is less than 10.\");\n\n    // 무한루프를 돌지 않도록 age에 1을 더해준다.\n    age++;\n\n}\n\ndocument.write(\"you are now over 10.\");\n```\n\n<br>\n\n브라우저에서 작동한 화면은 다음과 같다.\n\n![whileloops](imgs/2017-10-18/whileloops.png)\n\n<br>\n\n## 2. for 루프\n\n```js\nvar age = 5;\nvar links = document.getElementById(\"a\");\n\n//for (var, condition, operator) {}\nfor (age = 5; age < 10; age++) {\n\n    console.log(\"Your age is less than 10.\");\n\n}\n\ndocument.write(\"You are now over 10.\");\n```\n\n범위를 정하여 돌릴 수도 있다.\n\n```html\n<!--index.html-->\n<body>\n\n    <a href=\"#\">link1</a>\n    <a href=\"#\">link2</a>\n    <a href=\"#\">link3</a>\n    <a href=\"#\">link4</a>\n    <a href=\"#\">link5</a>\n\n    <script src=\"17_forloops.js\">\n    </script>\n</body>\n```\n\n```js\n// 17_forloops.js\n\nvar links = document.getElementByTagName(\"a\");\n\n//for (var, condition, operation) {}\nfor (i = 1; i <= links.length; i++) {\n\n    console.log(\"This is link number\" + i);\n\n}\n\ndocument.write(\"All links now looped.\");\n```\n\n다음과 같이 작동하는 것을 확인할 수 있다.\n\n![forloops](imgs/2017-10-18/forloops.png)\n\n<br>\n\n## 3. loop문 활용하기\n\nloop를 활용하는 예시를 보자.\n\n```js\nvar links = document.getElementByTagName(\"a\");\n\nfor (i = 0; i < links.length; i++) {\n    links[i].className = \"links-\" + i;\n}\n```\n\n브라우저 HTML 요소의 `a` 태그 마다 지정해준 클래스명이 적용되었다.\n\n![applyloop](imgs/2017-10-18/applyloop.png)\n","excerpt":"이번 포스트에서는 자바스크립트의  루프와  루프에 대해 소개한다. 1. while 루프 브라우저에서 작동한 화면은 다음과 같다.  2. for 루프 범위를 정하여 돌릴 수도 있다. 다음과 같이 작동하는 것을 확인할 수 있다.  3. loop문 활용하…","fields":{"slug":"/js-06-loops/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 6. while과 for 루프","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 비교연산자(Comparison Operators)와 논리연산자(Logical Operators)에 대해 소개한다.\n\n<br>\n\n## 1. 비교연산자 (Comparison Operators)\n\n\n```js\n> var x = 5;\nundefined\n\n> x > 4\ntrue\n\n> x > 5\nfalse\n> x >= 5\ntrue\n\n> x < 5\nfalse\n> x <= 5\ntrue\n\n// 값 비교\nx == 5\ntrue\n\n// 자료형 비교\nx === 5\ntrue\n\nx = \"5\"\n\"5\"\n\n// x의 값은 문자형이고 5는 숫자형이므로 false를 출력한다.\nx === 5\nfalse\n\nx == 5\ntrue\nx === \"5\"\ntrue\n\n// 값이 다른지를 비교할 때는 '!'를 사용한다.\nx = 5\n5\nx != 4\ntrue\nx != 5\nfalse\nx !== 5\nfalse\n\n// 이 때는 숫자형 값을 가진 x가 문자형과 자료형이 다르므로 true를 출력한다.\nx !== \"5\"\ntrue\n```\n\n<br>\n\n## 2. 논리연산자 (Logical Operators)\n\n```js\n// 14_logicaloperator.js\n\nvar myAge = 40;\n\n// '&&' 는 and 연산자와 같다.\nif (myAge >= 18 && myAge <= 30) {\n\n    document.write(\"You can enter the club!\");\n\n} else {\n\n    document.write(\"You ain't coming.\");\n\n}\n\n// '||' 는 or 연산자와 같다.\nif (myAge < 15 || myAge > 30) {\n\n    document.write(\"You ain't coming.\");\n\n} else {\n\n    document.write(\"You can enter the club!\");  \n}\n\n// '||' 는 or 연산자와 같다.\nif (myAge < 18 || myAge > 30 || myAge === 25) {\n\n    document.write(\"You ain't coming.\");\n\n} else {\n\n    document.write(\"You can enter the club!\");  \n}\n```\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 비교연산자(Comparison Operators)와 논리연산자(Logical Operators)에 대해 소개한다. 1. 비교연산자 (Comparison Operators) 2. 논리연산자 (Logical Operato…","fields":{"slug":"/js-05-comparisonlogical/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 5. 비교연산자와 논리연산자","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 자바스크립트의 루프문과 조건문에서 사용할 수 있는 `break`, `continue`에 대해 정리하였다.\n\n<br>\n\n\n## Break & Continue\n\n`break`는 코드의 실행을 종료시킨다. 반면 `continue`는 코드를 건너뛰고 계속 진행시킨다.\n\nif문을 사용하여 다음과 같이 10 이하일 때 7에 도달하면 for문을 종료시키는 코드를 작성할 수 있다.\n\n```js\nfor (i = 0; i < 10; i++) {\n\n    console.log(i);\n\n    if (i == 7) {\n\n        break;\n\n    }\n}\n\nconsole.log(\"I have broken out of the loop.\")\n```\n\n실행시 다음과 같이 출력된다.\n\n![break](imgs/2017-10-18/break.png)\n\n<br>\n\n다음으로 `continue`를 사용한 조건문이 있는 for문을 작성하였다.\n\n```js\nfor (i = 0; i < 10; i++) {\n\n    if (i === 5 || i === 3) {\n\n        continue;\n\n    }\n\n    console.log(i);\n\n    if (i == 7) {\n\n        break;\n\n    }\n}\n\nconsole.log(\"I have broken out of the loop.\")\n```\n\n<br>\n\n실행시 다음과 같이 출력된다. (3, 5일 때는 로그 출력을 건너뛰었다.)\n\n![break](images/2017-10-18/breakncontinue.png)\n\n<br>\n","excerpt":"이번 포스트에서는 자바스크립트의 루프문과 조건문에서 사용할 수 있는 , 에 대해 정리하였다. Break & Continue 는 코드의 실행을 종료시킨다. 반면 는 코드를 건너뛰고 계속 진행시킨다. if문을 사용하여 다음과 같이 10 이하일 때 7에 …","fields":{"slug":"/js-07-breakcontinue/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 7. break와 continue","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에는 자바스크립트에서 함수를 정의하는 방법과 return 값 유무의 차이에 대해 정리하였다.\n\n<br>\n\n## 함수 작성하기\n\n```js\nfunction getAverage (a,b) {\n\n    var avg = (a + b) / 2;\n    console.log(avg);\n\n}\n\n// 함수 실행 시 매개변수가 필요한 경우 주어야 한다.\ngetAverage(8, 2);\n\n// 3개의 인자를 줄 경우 마지막값이 무시된다.\ngetAverage(7, 9, \"10\");\n```\n\n다른 변수에 값을 할당하여 출력방식을 바꿔줄 수도 있다. 이 때 함수에서는 `return` 값이 정의되어야 한다.\n\n그렇지 않으면 함수에서 반환하는 값이 없기 때문에 로그만 출력되고 변수에 넘겨주는 값은 `undefined`로 표시된다.\n\n```js\nfunction getAverage (a,b) {\n\n    var avg = (a + b) / 2;\n    console.log(avg);\n    return avg;\n\n}\n\nvar myAvg = getAverage(8, 9);\nconsole.log(\"The result is \" + myAvg);\n```\n\n<br>\n","excerpt":"이번 포스트에는 자바스크립트에서 함수를 정의하는 방법과 return 값 유무의 차이에 대해 정리하였다. 함수 작성하기 다른 변수에 값을 할당하여 출력방식을 바꿔줄 수도 있다. 이 때 함수에서는  값이 정의되어야 한다. 그렇지 않으면 함수에서 반환하는…","fields":{"slug":"/js-08-function/"},"frontmatter":{"date":"Oct 18, 2017","title":"JS _ 8. 함수 (function)","tags":["javascript","basic grammar"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n지난 포스트에서는 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 `디렉티브`(directive)에 대해 알아보았다. 이번 포스트에는 기타 디렉티브들에 대해 정리하였다.\n\n<br>\n\n\n## `v-pre` 디렉티브\n\n`v-pre`의 역할은 HTML 요소를 컴파일하지 않고 문자 그대로 출력하는 것이다.\n\n```html\n<body>\n<div id=\"example\">\n    <span v-pre>{% raw %}{{message}}{% endraw %}</span>\n</div>\n<script type=\"text/javascript\">\nvar vm = new Vue({\n    el : \"#example\",\n    data : {\n        message : \"Hello World\"\n    }\n})\n</script>\n</body>\n```\n\n<br>\n\n\n## `v-once` 디렉티브\n\n`v-once`는 HTML 요소를 한 번만 렌더링한다. `v-once`를 적용한 곳에는 콘솔에서 Vue 객체의 속성값을 변경해도 다시 렌더링되지 않는다. 값을 바꾸지 않을 템플릿 속성이 있을 때 적용한다.\n\n```html\n<body>\n<div id=\"example\">\n    <span v-once>{% raw %}{{message}}{% endraw %}</span>\n</div>\n<script type=\"text/javascript\">\nvar vm = new Vue({\n    el : \"#example\",\n    data : {\n        message : \"Hello World\"\n    }\n})\n</script>\n</body>\n```\n\n<br>\n\n## 계산형 속성\n\n`v-bind`가 간단한 데이터 바인딩에 사용된다면 좀더 복잡하고 연산이 필요한 부분은 `계산형 속성`(Computed Property)을 사용한다.\n\n```html\n<body>\n<div id=\"example\">\n    <input type=\"text\" v-model=\"num\" /><br />\n    1부터 입력된 수까지의 합 : <span>{{sum}}</span>\n</div>\n```\n\n아래의 자바스크립트 코드는 <a href=\"http://juliahwang.kr/algorism-javascript/2017/10/31/algorism-js-1-N%EA%B9%8C%EC%A7%80%EC%9D%98%ED%95%A9%EA%B5%AC%ED%95%98%EA%B8%B0.html\" target=\"_blank\">1. 자바스크립트 - N까지의 합 구하기</a>에 자세히 설명해놓았다.\n\n```js\n<script type=\"text/javascript\">\n    // 1부터 입력된 수까지의 합 구하기\n    var vmSum = new Vue({\n        el: \"example\",\n        data : {num : 0},\n        computed : {\n            sum : function() {\n                var n = Number(this.num);\n                if (Number.isNaN(n) || n < 1)\n                    return 0;\n                return (1 + n) * n / 2;\n            }\n        }\n    })\n</script>\n```\n\nVue 객체에 `computed` 속성으로 함수를 등록하여 사용할 수 있다.\n\n<br>\n","excerpt":"지난 포스트에서는 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 (directive)에 대해 알아보았다. 이번 포스트에는 기타 디렉티브들에 대해 정리하였다.  디렉티브 의 역할은 HTML 요소를 컴파일하지 않고 문자 그대로 출력하는 것…","fields":{"slug":"/vue-directives_03/"},"frontmatter":{"date":"Oct 17, 2017","title":"Vue.js _ 5. 디렉티브 (directives) <3부>","tags":["Frontend","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n지난 포스트에 이어 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 `디렉티브`(directive) 중 `v-show`, `v-if`에 대해 알아보고자 한다.\n\n<brs\n\n## `v-if`와 `v-show`의 차이\n\n`v-if` 디렉티브는 Vue 객체의 속성에 따라 렌더링 여부를 결정할 수 있는 기능이다. `v-show`도 `v-if`랑 비슷한 기능을 하지만 **실제 렌더링 여부**\n에 따라 다르다.\n\n`v-show` 디렉티브는 일단 HTML 요소를 렌더링한 후`display` 스타일 속성으로 화면에 보여줄지 여부를 판단한다. 따라서 모든 데이터가 렌더링이 일단 되고 `display: none`에 의해 표시되지 않는다.\n\n반면 `v-if` 디렉티브는 조건에 부합되지 않으면 렌더하지 않는다. 아예 데이터 속성을 불러오지 않는 것이다.\n\n<br>\n\n## `v-show`를 언제 쓸까?\n\n`v-show`는 조건을 만족하지 않을 때 `display` 속성을 `none`으로 표시하므로 자주 화면이 변경되는 부분에 적용한다.\n\n도서의 예제에서 마이너스 숫자형이 입력되면 에러 마크가 표시되는 코드를 소개했다.\n\n디렉티브를 사용한 부분만 보면 다음과 같다.\n\n```html\n<div id=\"account\">\n    예금액 : <input type=\"text\" v-model=\"amount\">\n    <img v-show=\"amount < 0\" src=\"images/error.png\"\n      title=\"마이너스는 허용하지 않습니다.\"\n      style=\"width:15px; height:15px; vertical-align:middle;\" />\n  </div>\n```\n\n`v-show` 디렉티브를 사용하면 실제 조건이 충족되지 않았음에도 이미지가 콘솔에 렌더링되어 있는 것을 확인할 수 있다.\n\n![v-show](imgs/2017-10-17/v-show.png)\n\n<br>\n\n반면 `v-if`를 사용한 경우 조건이 충족되지 않으면 콘솔창에 렌더링되지 않는다는 것을 확인할 수 있다.\n\n![v-if](imgs/2017-10-17/v-if.png)\n\n<br>\n\n## `v-if` 사용하기\n\n`if` 조건문을 사용할 수 있는 디렉티브는 `v-if`, `v-else-if`, `v-else`가 있다.\n\n각각 파이썬의 `if`, `elif`, `else`와 동일한 개념이다.\n\n```html\n<div id=\"account\">\n    잔고 : <input type=\"text\" v-model=\"balance\" />\n    <br />\n    회원님의 등급 :\n    <span v-if=\"balance >= 1000000\">Gold</span>\n    <span v-else-if=\"balance >= 500000\">Silver</span>\n    <span v-else-if=\"balance >= 200000\">Bronze</span>\n    <span v-else>Basic</span>\n  </div>\n```\n\n계좌 잔고에 따라 보여지는 등급이 달리 표시되게 하려면 `v-if` 디렉티브를 사용한다. 조건에 만족하지 않으면 아예 렌더되지 않으므로 적합하다.\n\n<br>\n\n## 반복 렌더링 디렉티브 `v-for`\n\n반복적인 데이터는 `v-for` 디렉티브를 사용하여 렌더링한다.\n\n### (1) 데이터를 반복하는 경우\n\n![v-for](https://github.com/juliahwang/juliahwang.github.io/blob/master/_posts/images/2017-10-19/v-for.png?raw=true)\n\n(~~위의 번호는 더미 번호이다.~~)\n\n다음과 같이 반복되는 값은 모델 내 배열 데이터에서 반복적으로 꺼내와 렌더해준다.\n\n<br>\n\n**인덱스 반복 출력하기**\n\n만약 배열 데이터에서 인덱스를 출력해주고 싶을 때는 다음과 같이 index 수를 증가시켜준다.\n\n```html\n<tr v-for=\"(contact, index) in contacts\">\n  <td>{% raw %}{{ index + 1 }}{% endraw %}</td>\n  ...\n```\n\n<br>\n\n### (2) 객체를 반복하는 경우\n\n객체의 경우에는 키를 사용하여 값에 접근하는 해시맵(`HashMap`) 구조이기 때문에 `key`와 `value` 값을 얻어낼 수 있는 구조를 사용한다.\n\n\n```html\n<div id=\"example\">\n  <select id=\"regions\">\n    <option disabled=\"disabled\" selected>지역을 선택하세요</option>\n        <option v-for=\"(val, key) in regions\" :value=\"key\">{% raw %} {{ val }} {% endraw %}</option>\n  </select>\n</div>\n```\n```js\n<script type=\"text/javascript\">\n    var regions = {\n        \"A\": \"Asia\",\n        \"B\": \"America\",\n        \"C\": \"Europe\",\n        \"D\": \"Africa\",\n        \"E\": \"Oceania\"\n    }\n\n    var list = new Vue({\n      el : '#example',\n      data : {regions : regions}\n    })\n</script>\n```\n\n`key` 값은 value 속성으로 들어가고, `val` 값은 실제 드롭다운 옵션에 표시된다.\n\n<br>\n\n**인덱스 반복 출력하기**\n\n객체 데이터의 경우 인덱스는 다음과 같이 표시할 수 있다.\n\n```html\n<div id=\"example\">\n  <select id=\"regions\">\n    <option disabled=\"disabled\" selected>지역을 선택하세요</option>\n    <option v-for=\"(val, key, index) in regions\" :value=\"key\">{% raw %} {{ index + 1 }} : {{ val }} {% endraw %}</option>\n  </select>\n</div>\n```\n\n<br>\n\n\n## `v-for`과 `v-if`\n\n`v-for`과 `v-if` 디렉티브는 함께 사용할 수 있다. 이 때 항상 `v-for`이 먼저 수행되고 나서 `v-if`가 적용된다.\n\n```html\n<tbody id=\"contacts\">\n  <tr v-for=\"(contact, index) in contacts\"\n    v-if=\"contact.address.indexOf('서울') > -1\">\n    <td>{% raw %}{{ index + 1 }}{% endraw %}</td>\n    <td>{% raw %}{{ contact.name }}{% endraw %}</td>\n    <td>{% raw %}{{ contact.tel }}{% endraw %}</td>\n    <td>{% raw %}{{ contact.address }}{% endraw %}</td>\n  </tr>\n</tbody>\n```\n\n<br>\n\n## 여러 개의 요소를 한번에 반복 렌더링하기\n\n여러 개의 HTML 요소를 반복하려면 `template` 태그를 써서 `v-for` 디렉티브를 적용하려는 모든 요소를 감싸주면 된다.\n\n```html\n<tbody id=\"contacts\">\n  <template v-for=\"(contact, index) in contacts\">\n    <tr>\n      <td>{% raw %}{{ index + 1 }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.name }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.tel }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.address }}{% endraw %}</td>\n    </tr>\n\n    <!-- index를 5로 나누었을 때 나머지가 4일 경우 -->\n    <tr class=\"divider\" v-if=\"index % 5===4\">\n      <td colspan=\"4\"></td>\n    </tr>\n  </template>\n</tbody>\n```\n\n<br>\n\n## `v-for`과 `key` 특성\n\nVue.js는 가상 DOM을 지원한다. 가상 DOM은 렌더링 속도를 빠르게 하기 위해 변경된 부분만을 업데이트한다.\n\n`v-for`로 렌더링한 배열 데이터의 순서가 바뀌면 DOM 요소(HTML DOM Element, 즉, 여기서는 `li` 태그를 의미함)를 이동시키지 않고 기존 DOM 요소의 데이터(자체)를 변경한다. (이는 태그 자체를 이동시키지 않고 내부의 콘텐트만 바꾼다는 의미이다.)\n\n<br>\n\n### 배열 데이터 변경의 문제점\n\n`v-for` 디렉티브를 주로 출력하는 데이터는 배열 속성을 가진다.\n\n배열 데이터를 인덱스번호로 직접 변경할 경우 콘솔에서 변경해도 화면에서는 바뀐 값으로 렌더링되지 않는다.\n\n```js\nlist.contacts[0] = {no:100, name:\"james\", tel:\"010-2020-3030\", address:\"제주\"};\n```\n\n따라서 배열값을 직접 변경해주려면 `Vue.set` 메서드를 사용한다.\n\n```js\n// Vue.set(엘리먼트, 인덱스 번호, 변경할 데이터)\nVue.set(list.contacts, 0, {no:100, name:\"james\", tel:\"010-2020-3030\", address:\"제주\"})\n```\n\n<br>\n\n하지만 인덱스로 찾은 배열의 속성을 직접 변경할 경우에는 Vue 인스턴스 내부의 감시자(Watcher)가 추적하여 화면을 변경해준다.\n\n```\nlist.contacts[0].name = \"james\";\n```\n\n`v-for` 디렉티브는 `push`,`pop`, `shift`, `unshift`, `splice`, `filter`, `contact`, `slice`, `reduce` 등과 같은 배열 메서드를 사용할 경우 감시자에 의해 변경을 추적할 수 있다.\n\n<br>\n\n## DOM 요소의 위치 직접 변경하기 `:key`\n\n만약 DOM 요소를 추적해 그 위치를 직접 변경하고 싶은 경우에는 `v-bind` 디렉티브와 함께 `key` 속성에 고유값을 지정해준다.\n\n```html\n<tbody id=\"contacts\">\n  <template v-for=\"(contact, index) in contacts\">\n    <tr :key=\"contact.no\">\n      <td>{% raw %}{{ index + 1 }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.name }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.tel }}{% endraw %}</td>\n      <td>{% raw %}{{ contact.address }}{% endraw %}</td>\n    </tr>\n  </template>\n</tbody>\n```\n\n<br>\n\n---\n\n## 마치며\n\n해당 포스트는 웹에서 얻은 참고 자료들과 원형섭님의 [Vue.js Quick Start] 도서를 바탕으로 공부한 내용을 요약, 정리하였다.\n\n<br>\n","excerpt":"지난 포스트에 이어 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 (directive) 중 , 에 대해 알아보고자 한다. <brs 와 의 차이  디렉티브는 Vue 객체의 속성에 따라 렌더링 여부를 결정할 수 있는 기능이다. 도 랑 비슷…","fields":{"slug":"/vue-directives_02/"},"frontmatter":{"date":"Oct 17, 2017","title":"Vue.js _ 4. 디렉티브 (directives) <2부>","tags":["Frontend","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 모델의 `_meta` API와 모델 매니저, 헬퍼 함수 등의 모델 인터페이스들에 대해 알아보고자 한다. 기본적인 모델에 대한 설명은 <a href=\"https://docs.djangoproject.com/en/1.11/topics/db/models/\" target=\"_blank\">장고 문서</a>를 참고하기 바란다.\n\n<br>\n\n## 1. 모델의 _meta API\n\n장고 1.8이 되기 전까지 `_meta` API는 공식적이지 않았다. 원래의 목적은 모델, 즉 테이블에 대한 부가적인 정보를 장고 내부적으로 이용하기 위해서였다. 예를 들어 다음과 같은 일을 쉽게 처리할 수 있다.\n\n- 모델 내 필드 정보를 가져올 경우\n\n```powershell\n# 모델의 필드 리스트를 가져오는 경우\n>>> from django.contrib.auth.models import User\n>>> User._meta.get_fields()\n(<ManyToOneRel: admin.logentry>,\n <django.db.models.fields.AutoField: id>,\n <django.db.models.fields.CharField: password>,\n <django.db.models.fields.CharField: username>,\n <django.db.models.fields.EmailField: email>,\n <django.db.models.fields.DateTimeField: date_joined>,\n <django.db.models.fields.related.ManyToManyField: groups>,\n <django.db.models.fields.related.ManyToManyField: user_permissions>)\n\n\n# 모델의 특정 필드를 가져올 경우\n>>> User._meta.get_field('username')\n<django.db.models.fields.CharField: username>\n```\n\n<br>\n\n- 모델 내 특정 필드의 클래스를 가져올 경우\n\t- 특히 상속 관계를 가져올 때 유용하다.\n-  장고 모델이 잘 생성되고 구조화되었는지 검사할 경우\n- 외부 라이브러리를 사용해서 모델을 커스터마이징할 경우\n- 모델 내의 데이터를 조정하거나 변경할 수 있는 일종의 관리도구를 제작할 경우\n- 시각화 혹운 분석의 목적으로 모델의 필드에 대한 분석이 필요할 경우\n\n\n<br>\n\n## 2. 모델 매니저\n\n장고의 `모델 매니저`(Model Manager)는 **장고의 ORM에서 데이터베이스와 연동하는 인터페이스**이다. 원하는 모델 클래스를 제어하기 위해 모델 클래스(테이블 내 모든 데이터)의 모든 인스턴스에 작동이 가능하다. 또, 장고는 기본적으로 모델을 생성할 때마다 기본 모델 매니저를 제공하며, 우리가 원하는 목적에 맞는 모델 매니저를 생성할 수도 있다.\n\n```python\nfrom django.db import models\nfrom django.utils import timezone\n\n\n# 생성해준 커스텀 모델 매니저.\nclass PublishedManager(models.Manager):\n    user_for_related_fields = True\n\n    def published(self, **kwargs):\n        return self.filter(pub_date__lte=timezone.now(), **kwargs)\n\n\nclass FlavorReview(models.Model):\n    review = models.TextField()\n    pub_date = models.DateTimeField()\n\n    # 커스텀으로 만든 모델 매니저를 추가\n    objects = PublishedManager()\n```\n\n만들어준 모델 매니저를 사용하려면 다음과 같이 사용하면 된다.\n\n```powershell\n$ FlavorReview.objects.filter().count()\n35\n$ FlavorReview.objects.published().count()\n31\n```\n\n<br>\n\n기존 모델 매니저를 변형해서 커스텀 모델 매니저를 만들게 되면 다음과 같은 문제가 발생할 수 있다.\n\n- 모델을 상속받았을 때 추상화 기초 클래스의 자식 모델 클래스들은 부모 모델의 모델 매니저를 받지만 접합기반 클래스들의 자식 모델 클래스들은 그렇지 못하다.\n- 모델 클래스에 적용되는 기본적인 모델 클래스는 장고가 기본으로 제공하는 것으로, 이를 바꾸어서 생기는 문제는 파이썬의 일반적인 패턴을 무시하는 것과 같다.\n\n만약 기존 모델 매니저와 커스텀 모델 매니저를 함께 사용하고 싶은 경우 모델 클래스 내에 다음 구문은 반드시 상위에 배치한다.\n\n```python\nobjects = models.Manager()\n```\n\n<br>\n\n## 3. 거대 모델 이해하기\n\n`거대 모델`(Fat Model)이란 **데이터 관련 코드를 뷰나 템플릿보다는 모델 메서드, 클래스 메서드, 프로퍼티, 매니저 메서드 등에 넣어 캡슐화(Encapsulation) 하는 것**이다.\n\n위의 방식은 프로젝트 전체를 통틀어 코드 재사용을 개선할 수 있는 최고의 방법이다. 뷰나 템플릿에 로직을 배치하는 것보다 모델에 배치하려는 '리펙토링'이 이루어져오기도 했다.\n\n하지만 모든 로직을 모델에 넣고 어플리케이션을 서빙하다보면 시간이 지남에 따라 거대 모델이 생겨나게 되며, 이는 반대로 테스트와 유지 보수를 어렵게 할 수 있다.\n\n이를 막기 위해서는 모델 간 공통으로 사용할 수 있는 메서드나 프로퍼티를 그대로 유지한 채 로직만 `모델 행동`(`믹스인`, Mixin)으로 분리하여 관리하거나 `상태없는 헬퍼 함수`(Stateless Helper Function) 등으로 이전할 수 있다.\n\n<br>\n\n### (1) 모델 행동 (믹스인, MixIn)\n\n모델 행동은 캡슐화와 구성화의 개념으로 이루어져 있다.\n\n```python\n# 기존 정의를 따른 모델 클래스\n# blog.py\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    body = models.TextField()\n    slug = models.SlugField()\n    author = models.ForeignKey(User, related_name='posts')\n    create_date = models.DateTimeField(auto_now_add=True)\n    modified_date = models.DateTimeField(auto_now=True)\n    publish_date = models.DateTimeField(null=True)\n```\n\n위의 클래스는 다음과 같이 줄이고 다른 모델 클래스와 공유하는 필드를 모델행동에서 불러와서 재사용할 수 있다.\n\n```python\nfrom .behaviors import Authorable, Permalinkable, Timestampable, Publishable\n\n\nclass BlogPost(Authorable, Permalinkable, Timestampable, Publishable, models.Model):\n    title = models.CharField(max_length=255)\n    body = models.TextField()\n```\n\n<br>\n\n다음은 재사용가능한 필드를 정의한 모델 클래스들이다.\n\n```python\n# behaviors.py\nclass Authorable(models.Model):\n    author = models.ForeignKey(User)\n\n    class Meta:\n        abstract = True\n\n\nclass Permalinkable(models.Model):\n    slug = models.SlugField()\n\n    class Meta:\n        abstract = True\n\n\nclass Publishable(models.Model):\n    publish_date = models.DateTimeField(null=True)\n\n    class Meta:\n        abstract = True\n\n\nclass Timestampable(models.Model):\n    create_date = models.DateTimeField(auto_now_add=True)\n    modified_date = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        abstract = True\n```\n\n<br>\n\n### (2) 상태없는 헬퍼 함수\n\n모델로부터 로직을 떼어내서 유틸리티 함수로 관리할 수도 있다. 대표적으로 커스텀 필드나 커스텀 퍼미션을 정의할 경우 `utils` 폴더에 생성하고 모델에서 임포트하여 사용한다.\n\n<br>\n\n---\n\n## 참고 자료\n\n<a href=\"http://blog.kevinastone.com/django-model-behaviors.html\" target=\"_blank\">장고 모델 행동 - 케빈 스톤(Kevin Stone)의 블로그</a>\n","excerpt":"이번 포스트에서는 모델의  API와 모델 매니저, 헬퍼 함수 등의 모델 인터페이스들에 대해 알아보고자 한다. 기본적인 모델에 대한 설명은 장고 문서를 참고하기 바란다. 1. 모델의 _meta API 장고 1.8이 되기 전까지  API는 공식적이지 않…","fields":{"slug":"/2scoops-6-modeling_03/"},"frontmatter":{"date":"Oct 17, 2017","title":"BookReview > Two Scoops of Django _  6장. 장고에서 모델 이용하기 <3부>","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`Vue.js`는 단일페이지 사용자 인터페이스(SPA, Single Page Application)를 만들기 위한 프론트엔드 프레임워크이다. 이번 포스트에서는 `Vue.js`의 기본적인 특징과 설치법에 대해 정리해보았다.\n\n<br>\n\n## Vue.js의 특징\n\n- jquery처럼 `<script>` 태그를 사용하여 CDN(Content Delivery Network)상의 주소를 간단히 참조할 수 있다.\n- 디렉티브를 사용하여 손쉬운 구현이 가능하다.\n- 뷰 라우터(vue-router)를 사용항 단일페이지 어플리케이션 구현이 쉽다.\n- ES6와 Webpack 번들링을 통해 대규모 어플리케이션을 단일 파일 컴포넌트로 빌드할 수 있다.\n- 가상 DOM을 지원하여 빠른 UI 렌더링 속도를 제공한다.(Vue 2.0 기준으로 React나 Angular보다 빠르다)\n- MVVM 패턴을 지향한다.(해당 패턴에 대해서는 다음 포스트에서 예제와 함께 설명해 놓았다.)\n\n<br>\n\n## Vue의 개발환경 설정\n\n|도구|내용|설치 링크|\n|:---:|:---|:---|\n|Node.js|서버 측 자바스크립트 언어 및 플랫폼|<a href=\"https://nodejs.org/ko/\" target=\"_blank\">Node.js 홈페이지</a>|\n|npm|노드 패키지 관리자|터미널에서 설치|\n|크롬 브라우저|렌더 환경을 위한 브라우저|-|\n|Vue.js devtools|크롬 브라우저 기반으로 작동하는 <br>Vue.js 전용 디버깅 도구.| 크롬 브라우저 주소창에 <br>chrome://extensions/|\n|Vue-cli|터미널에서 앱 작성을 위한 <br>기본 틀(폴더구조)을 제공하는 도구|터미널에서 설치|\n|Visual Studio Code||<a href=\"http://code.visualstudio.com\" target=\"_blank\">VSCode 홈페이지</a>|\n\n<br>\n\n\n## npm 및 vue-cli 설치\n\n### npm\n\n```powershell\n# window\n$ npm install -g npm\n\n# mac os - 루트권한으로 설치\n$ sudo npm install -g npm\n```\n\n<br>\n\n### vue-cli\n\n커멘드라인 인터페이스 기반의 스캐폴딩 도구. 스캐폴딩 도구라 함은 애플리케이션을 개발할 때 필요한 기본적인 인터페이스와 틀을 제공해주는 도구를 말한다.\n\n```powershell\n# window\n$ npm install -g vue-cli\n\n# mac os - 역시 루트권한으로 설치\n$ sudo npm install -g vue-cli\n```\n\n<br>\n\n\n## Vue 프로젝트 생성하기\n\n설치한 `vue-cli`로 프로젝트의 규모를 고려한 템플릿을 선택하여 프로젝트를 생성한다.\n\n\n```powershell\n# vue init <템플릿명> <프로젝트명>\n\n# simple 템플릿으로 설치한 경우\n$ vue init simple startvue\n\n? name startvue\n? author bbrubi <bbrubidev@gmail.com>\n\n   vue-cli · Generated \"startvue\".\n\n\n# webpack 템플릿으로 설치한 경우\n$ vue init webpack vuebookpractice\n\n? Project name vuebookpractice\n? Project description Vue.js book practice and study\n? Author bbrubi <bbrubidev@gmail.com>\n? Vue build standalone\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Setup unit tests with Karma + Mocha? No\n? Setup e2e tests with Nightwatch? No\n\n   vue-cli · Generated \"vuebookpractice\".\n\n   To get started:\n\n     cd vuebookpractice\n     npm install\n     npm run dev\n\n   Documentation can be found at https://vuejs-templates.github.io/webpack\n```\n\n프로젝트를 생성했으니 해당 폴더를 VSCode로 열면 된다.\n\n<br>\n\n## 첫 페이지 생성하고 브라우저에서 확인하기\n\n`simple` 템플릿으로 스캐폴딩한 경우 html 파일 하나만 생성된다. html 파일을 편집한 후 크롬 브라우저에 바로 띄워 확인해본다.\n\n\n### VSCode 플러그인으로 크롬 브라우저에 페이지 띄우기\n\n먼저 VSCode 플러그인 검색창에서 View in browser 항목을 찾아 설치한 후 반드시 `reload`해준다.\n\n그리고 (맥 기준으로) `cmd`+`fn`+`F1` 또는 펑션키 우선인 경우 `cmd`+`F1`을 누르면 바로 브라우저에 렌더되는 것을 확인할 수 있다.\n\n<br>\n\n### 개발자 도구 단축키\n\n`cmd`+`alt`+`I`(맥 기준)\n\n<br>\n\n### 직접 변수값 변경해보기\n\n렌더된 페이지는 다음과 같다.\n\n![vuesimple1](imgs/2017-10-16/vuesimple1.png)\n\n<br>\n\n직접 모델의 `message` 변수값을 개발자도구에서 변경해보면 다음과 같이 출력되는 것을 확인할 수 있다.\n\n![vuesimple2](imgs/2017-10-16/vuesimple2.png)\n\n<br>\n\n## 생소한 단어 정리\n\n### 1) 번들링 (`bundling`)\n\n여러 파일을 모아서 하나로 만드는 행위. 대표적인 도구(번들러)로는 `browerify`가 있다.\n\n<br>\n\n### 2) `browserify`\n\n여러 개의 의존성 있는 자바스크립트 코드를 참조하여 개발한 경우 이를 단일 자바스크립트 파일로 묶어주는 번들링 도구이다. (<a href=\"http://browserify.org/\" target=\"_blank\">홈페이지</a>)\n\n\n<br>\n\n### 3) `vueify`\n\nVue.js를 컴포넌트로 번들링하기 위한 browerify 변환 기능을 제공한다.\n\n<br>\n\n### 4) `Webpack`\n\n현재 많이 사용하고 있는 자바스크립트 모듈 번들링 도구.\n\n<br>\n\n### 5) `vue-loader`\n\nWebpack에서 vue 컴포넌트를 번들링하기 위한 확장도구\n\n<br>\n\n### 6) `hot-reload`\n\n`*.vue` 파일을 수정할 때 서버의 재시작없이 변경내용으로 교체되는 것을 말한다. 또, 브라우저에서 페이지를 리로딩(re-loading)하지 않고 변경해주는 기능이다.\n해당 기능은 `vue-cli`로 프로젝트를 스캐폴딩했을 경우 바로 사용할 수 있다.\n\n<br>\n\n### 7) `linting`\n\n코드 검사도구. `*.vue` 파일에서는 ESLint를 사용한다. 초기 스캐폴딩시 사용하겠다고 하면 자동으로 적용해준다.\n\n<br>\n\n### 8) `PWA`(Progressive Web App)\n\n웹에 기반을 두고 앱을 지원하는 웹페이지를 뜻한다. 기존의 웹앱과 다른 점은 좀더 '네이티브 앱'에  가까운 경험을 제공하는 웹을 목표로 한다는 것이다. 즉, 좀더 안정적이고 사용자 인터렉션에 빠르게 반응하며 마치 앱을 사용하는 것처럼 몰입감 높은 사용자 경험을 제공해야 한다. 더 자세한 내용은 <a href=\"https://developers.google.com/web/progressive-web-apps/\" target=\"_blank\">구글 개발자 블로그 - PWA</a>를 참고하면 된다.\n\n<br>\n\n---\n\n## 마치며\n\n해당 포스트는 웹에서 얻은 참고 자료들과 원형섭님의 [Vue.js Quick Start] 도서를 바탕으로 공부한 내용을 요약, 정리하였다.\n\n<br>\n","excerpt":"는 단일페이지 사용자 인터페이스(SPA, Single Page Application)를 만들기 위한 프론트엔드 프레임워크이다. 이번 포스트에서는 의 기본적인 특징과 설치법에 대해 정리해보았다. Vue.js의 특징 jquery처럼  태그를 사용하여 C…","fields":{"slug":"/vue-1-setup/"},"frontmatter":{"date":"Oct 16, 2017","title":"Vue.js _ 1. Vue 소개 및 설치","tags":["Frontend","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 앞선 포스트에서 만든 예제를 바탕으로 Vue.js의 `MVVM 패턴`을 설명해보았다.\n\n<br>\n\n## Vue.js의 `MVVM` 패턴\n\nVue는 `Model`-`View`-`ViewModel`으로 구성된 `MVVM 패턴`을 따른다.\n\n**어플리케이션 로직과 UI를 분리하기 위해 설계된 패턴으로, UI를 가지는 응용 프로그램을 위한 아키텍처 패턴**이다.\n\n장고에서 일반적으로 사용하는 `MVC 패턴`의 변형으로 뷰를 추상화하여 재사용하거나 테스트하기 쉽게 만든 것이다.\n\n모델과 뷰는 `MVC 패턴`과 동일하다. 다른 점은 `MVC 패턴`의 컨트롤러(Controller)가 `MVVM 패턴`에서는 뷰모델(ViewModel)의 역할을 한다는 것이다.\n\n<br>\n\n![msdn-mvvm](https://i-msdn.sec.s-msft.com/dynimg/IC416621.png)\n\n- View\n\t- 유저 인터페이스.\n\t- HTML/CSS/XML/YAML 등으로 작성\n\n- View Model\n\t- 상태와 연산(명령)\n\t- View의 실제 논리 및 데이터 흐름을 담당한다.\n\t- 상태 데이터를 변경하면 즉시 View에 반영된다.\n\n- Model\n\t- 도메인 특화 데이터\n\n<br>\n\n`뷰모델(ViewModel)`은 '뷰의 모형'으로 이해하면 되며, 세 가지 특징이 있다.\n\n첫째, '추상화된 뷰 상태(ViewState)'로 존재한다. 뷰는 HTML과 CSS를 조합하여 사용자에게 시각적으로 접근한다면 뷰모델은 이 뷰를 `추상화`하여 텍스트 입력기 컨트롤을 추상화하거나 뷰 상태 컬렉션을 사용하는 식이다.\n추상화된 뷰모델은 구체적인 뷰에 대한 정보를 가지고 있지 않기 때문에 다양한 플랫폼에서 재사용할 수 있다는 장점이 있다.\n\n두번째로, 모델에서 제공하는 데이터를 사용자 인터페이스에 맞게 '상대적인 표현'으로 변환하여 표기하는 경우 뷰모델은 `값 변환기`(ValueConverters)를 가진다.\n\n마지막으로, 사용자가 서비스에서 특정 동작을 수행할 수 있도록 그 수단을 제공하는 것도 뷰모델의 `명령`(Commands) 기능이 있기 때문이다.\n\n그렇다면 추상화된 뷰와 실제 뷰를 연결해줄 수 있는 수단이 필요한데, `MVVM 패턴`에서는 기존의 컨트롤러가 했던 작업흐름 제어의 역할보다는 뷰와 뷰모델의 상태를 동기화해줄 `데이터 바인딩(Data Binding)`을 필요로 한다. 해당 요소를 통해 뷰모델이나 뷰가 변경되었을 경우 서로에게 변경사항이 반영되는 것이다.\n\n참고 1 - <a href=\"https://justhackem.wordpress.com/2017/03/05/mvvm-architectural-pattern/\" target=\"_blank\">MVVM 아키텍처 패턴 - 프로그래머 이규원의 블로그</a> (~~꼭 읽어보길 추천한다~~)\n\n참고 2 : <a href=\"https://msdn.microsoft.com/en-us/library/ff798384.aspx\" target=\"_blank\">Implementing the Model-View-ViewModel Pattern - MSDN</a>\n\n<br>\n\n## 예제에서 알아보기\n\n이전 포스트에서 `simple` 템플릿으로 만든 html 파일 코드는 다음과 같다. 아래 파일은 html과 javascript 코드로 구성되어 있는 하나의 파일이다. (블록을 구별하기 쉽게 나누어 설명하였다.)\n\n```html\n<!--index.html-->\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Start Vue.js</title>\n  <script src=\"https://unpkg.com/vue/dist/vue.min.js\"></script>\n</head>\n<body>\n  <div id=\"simple\">\n    <!--보간법을 사용하여 문자열을 삽입하는 {{}} 형태의 템플릿표현식-->\n    <h2>`{{`message`}}`</h2>\n  </div>\n```\n\n```js\n  <script type=\"text/javascript\">\n    // 데이터를 저장하는 model 객체 선언\n    var model = {\n      message : '첫번째 vue 앱이다!'\n    };\n\n    // Vue 객체이자 ViewModel 객체인 simple 객체 선언\n    var simple = new Vue({\n      // HTML 요소를 나타냄\n      el : '#simple',\n      // 모델 객체 참조\n      data : model\n    })\n  </script>\n```\n\n위에서 데이터(모델)가 변경되면 뷰모델 객체는 즉시 html 요소(뷰)에 반영한다.\n\n```html\n</body>\n</html>\n```\n\n위의 코드로 모든 작업은 반응형을 지향한다. 즉, 모델이 변경되면 뷰모델 객체를 통해 HTML DOM이 즉시 변경된다.\n\n위의 코드를 `MVVM 패턴`에 각각 대입해보면 다음과 같다.\n\n### 1) View\n\n사용자에게 보여줄 틀, 구조\n\n```html\n<div id=\"simple\">\n  <h2>{{ message }}</h2>\n</div>\n```\n\n<br>\n\n### 2) ViewModel\n\n뷰 객체이자 뷰모델 객체를 선언하여 뷰(구조) 와 모델(데이터)를 연결하고 보여줄 정보를 제어.\n\n지금 예제에서는 Vue 객체가 데이터만 가지고 있지만 MVVM 패턴에서는 상태(state, 데이터)와 연산(operations, 메서드) 모두 가질 수 있다.\n\n```js\nvar simple = new Vue({\n  el : #simple,\n  data : model\n})\n```\n\n<br>\n\n### 3) Model\n\n보여줄 데이터를 담은 객체를 선언하고 저장.\n\n```js\nvar model = {\n  message : \"hello!\"\n}\n```\n\n<br>\n\n---\n\n## 마치며\n\nVue.js 프레임워크의 기본 동작원리를 파악하는 것은 매우 중요하다. 특히 ViewModel이 어떻게 뷰와 모델을 가지고 추상화되는지에 대해서는 심화적인 공부가 필요할 것 같다.\n\n해당 포스트는 웹에서 얻은 참고 자료들과 원형섭님의 [Vue.js Quick Start] 도서를 바탕으로 공부한 내용을 요약, 정리하였다.\n<br>\n","excerpt":"이번 포스트에서는 앞선 포스트에서 만든 예제를 바탕으로 Vue.js의 을 설명해보았다. Vue.js의  패턴 Vue는 --으로 구성된 을 따른다. 어플리케이션 로직과 UI를 분리하기 위해 설계된 패턴으로, UI를 가지는 응용 프로그램을 위한 아키텍처…","fields":{"slug":"/vue-2-mvvmpattern/"},"frontmatter":{"date":"Oct 16, 2017","title":"Vue.js _ 2. vue파일에서 MVVM 패턴 구현하기","tags":["Frontend","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 템플릿 표현식(\n\n```\n{% raw %} {{}} {% endraw %}\n```\n\n) 말고도 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 `디렉티브`(directive)에 대해 알아보고자 한다.\n\n<br>\n\n## `v-text`와 `v-html`\n\n기존에 템플릿 표현식으로 데이터를 삽입했다. 그렇지만 `Vue.js`에서는 HTML 요소에 목적에 따라 다양한 디렉티브를 사용할 수 있다.\n\n```html\n<div id=\"simple\">\n  {% raw %}{{ message }}{% endraw %}\n\n  <!--위와 같은 효과.-->\n  <h2 v-text=\"message\"></h2>\n</div>\n```\n\n위의 코드로 변경한 후에도 브라우저에서는 템플릿 표현식을 사용한 것과 동일하게 보인다. 하지만 모델 객체의 `message` 속성값을 태그가 있는 것으로 바꿔보면 변경시 추가해준 태그는 다음과 같이 적용되지 않는 모습을 보여준다.\n\n![v-text](imgs/2017-10-16/v-text.png)\n\n`v-text` 디렉티브가 `innerText` 속성에 연결되어 태그문자열을 인코딩하기 때문에 화면에 태그를 그대로 출력하기 때문이다.\n\n<br>\n\n또 `v-html` 디렉티브를 사용하여 같은 페이지를 렌더할 수 있다.\n\n```html\n<div id=\"simple\">\n  <h2 v-html=\"message\"></h2>\n</div>\n```\n\n`v-html` 디렉티브는 태그를 파싱하여 화면에 태그가 적용된 모습을 보여준다.\n\n![v-html](imgs/2017-10-16/v-html.png)\n\n그 이유는 `innerHTML` 속성과 연결되어 HTML의 인코딩, 디코딩을 수행하지 않기 때문이다.\n\n하지만 `v-html` 디렉티브는 `<script>` 태그를 그대로 바인딩하므로 사이트 간 스크립팅 공격(XSS)에 취약하다. 따라서 `v-text`를 사용하도록 한다.\n\n<br>\n\n## `v-bind`\n\n`v-bind`는 요소 객체의 속성(즉, 데이터)들을 바인딩하기 위해 사용한다.\n\n```html\n<body>\n  <div id=\"v-bind-example\">\n    <input id='a' type=\"text\" v-bind:value=\"message\">\n    <br />\n    <img v-bind:src=\"imagePath\" />\n  </div>\n```\n\n```js  \n  <script type=\"text/javascript\">\n    var model = {\n      message : 'v-bind 디렉티브',\n      imagePath : \"https://twistedsifter.files.wordpress.com/2015/07/combo-photos-by-stephen-mcmennamy-22.jpg?w=200&h=200\"\n    };\n\n    var bind = new Vue({\n      el : '#v-bind-example',\n      data : model\n    })\n  </script>\n```\n\n위의 코드에서와 같이 HTML 요소의 속성이 모델의 데이터로 변경되었다.\n\n개발자도구에서는 다음과 같이 렌더링된다.\n\n![v-bind](imgs/2017-10-16/v-bind.png)\n\n<br>\n\n## `v-model`\n\n지금까지 본 디렉티브들은 단방향으로만 데이터가 바인딩되었다. 즉, 브라우저에서 HTML 요소에 직접 값을 변경해도 모델 객체의 값은 변경되지 않는다.\n\n이를 양방향으로 동작하도록 해주는 것이 `v-model` 디렉티브이다.\n\n`v-bind` 디렉티브는 단방향 데이터바인딩을 통해 기존 데이터를 렌더하는 역할을 하고 `v-model` 디렉티브는 사용자가 입력한 값을 양방향 데이터바인딩으로 모델의 속성에 업데이트해주는 역할을 하기 때문이다.\n\n<br>\n\n### (1) 텍스트 박스에 v-model 적용하기\n\n따라서 `v-model` 디렉티브를 설정할 때 input 태그 안에 보여질 기본 텍스트를 넣어주고 싶다면 `placeholder`에 `v-bind`를 적용시켜주면 된다.\n\n![v-model](imgs/2017-10-16/v-model.png)\n\n브라우저 콘솔에서 직접 `name` 값을 변경해보면 실제로 입력한 데이터가 바인딩되어있는 것을 확인할 수 있다.  \n\n<br>\n\n`v-model` 디렉티브를 사용했을 때 아쉬운 점은 영어를 제외한 언어 입력시 마지막 글자가 표시되지 않는다는 점이다.\n\n![diff](imgs/2017-10-16/diff.png)\n\n<br>\n\n이 경우에는 자바스크립트 이벤트로 글자를 입력할 때마다 `v-model`이 데이터바인딩을 할 수 있도록 해주었다.\n\n![v-event](imgs/2017-10-16/v-event.png)\n\n<br>\n\n\n### (2) 입력 폼 필드에 v-model 적용하기\n\n`v-model` 디렉티브를 사용하면 체크박스 타입의 input 태그와 같이 여러 개의 값을 양방향 바인딩할 때도 유용하다.\n\n![v-model-cb](imgs/2017-10-16/v-model.png)\n\n스크립트의 코드를 보면 사용자가 체크하는 값을 뷰모델 객체를 통해 model 객체의 fruits 배열에 들어있는 값을 즉시 변경해준다.\n\n```html\n<div id=\"vm-checkbox1\">\n  <div>좋아하는 과일을 모두 골라주세요 : </div>\n  <br />\n  <input type=\"checkbox\" value=\"사과\" v-model=\"fruits\">사과.\n  <input type=\"checkbox\" value=\"포도\" v-model=\"fruits\">포도.\n  <input type=\"checkbox\" value=\"키위\" v-model=\"fruits\">키위\n  <!--...-->\n</div>\n<hr />\n<div id=\"vm-checkbox2\">\n    선택한 과일들 : <span v-text=\"fruits\"></span>\n</div>\n```\n\n```js\n<script type=\"text/javascript\">\n    var model = {\n        fruits : []\n    };\n\n    var vmodel1 = new Vue({\n      el : '#vm-checkbox1',\n      data : model\n    })\n    var vmodel2 = new Vue({\n      el : '#vm-checkbox2',\n      data : model\n    })\n</script>\n```\n\n다음의 그림처럼 사용자가 데이터(model)를 입력할 때 배열에 추가된 값이 `vm-checkbox2`에도 연결되어 있기 때문에 체크한 즉시 `v-model` 디렉티브에 의해 변경된 데이터가 화면에 렌더링 된다.\n\n![how-vm-checkbox-works](imgs/2017-10-16/how-vm-checkbox-works.png)\n\n<br>\n\n---\n\n## 마치며\n\n다음 포스트에서는 `v-show`, `v-if` 등 이번 포스트에 이어 디렉티브들을 계속 소개할 것이다.\n\n\n해당 포스트는 웹에서 얻은 참고 자료들과 원형섭님의 [Vue.js Quick Start] 도서를 바탕으로 공부한 내용을 요약, 정리하였다.\n\n<br>\n","excerpt":"이번 포스트에서는 템플릿 표현식( ) 말고도 선언적 렌더링을 위해 HTML 요소 내부에서 사용할 수 있는 (directive)에 대해 알아보고자 한다. 와  기존에 템플릿 표현식으로 데이터를 삽입했다. 그렇지만 에서는 HTML 요소에 목적에 따라 다…","fields":{"slug":"/vue-directives_01/"},"frontmatter":{"date":"Oct 16, 2017","title":"Vue.js _ 3. 디렉티브 (directives) <1부>","tags":["Frontend","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 장고 모델 디자인에 관련된 내용을 정리해보았다. 기본적인 모델에 대한 설명은 <a href=\"https://docs.djangoproject.com/en/1.11/topics/db/models/\" target=\"_blank\">장고 문서</a>를 참고하기 바란다.\n\n<br>\n\n## 데이터베이스 정규화\n\n데이터베이스를 설계할 때 기본 원칙으로 삼을 수 있는 것이 `정규화`이다. 정규화에 대해 간략하게 정리해보았다.\n\n### 정규화의 개념\n\n**관계형 데이터베이스에서 중복을 최소화하고 일치하지 않는 종속성을 제거하여 데이터를 구조화하는 프로세스**이다.\n\n위의 개념에서 `일치하지 않는 종속성`이란 데이터를 찾을 수 있는 경로가 없거나 끊겨있어 데이터를 찾기 어려운 상태를 말한다.\n\n데이터가 중복되면 디스크 공간이 낭비되거나 유지관리상 문제가 생기므로 대부분의 데이터베이스 설계시 정규화를 만족하는 것이 좋다.\n\n반면, 이러한 정규화는 굳이 따르지 않을 수도 있다. 예를 들어, 성능상의 이유로 정규화를 따르지 않을 수도 있다. 대부분 **3정규화를 만족하면 정규화가 되었다**고 한다. 아래에 3정규화의 개념까지 정리해보았다.\n\n<br>\n\n### (1) 제 1 정규화\n\n- 반복된 데이터를 없앤다.\n- 각 관련 데이터 집합에 따른 테이블이 있다.\n- 기본 키를 사용하여 각 로우(row)를 식별한다.\n\n<br>\n\n### (2) 제 2 정규화\n\n- 레코드는 테이블의 기본 키 이외에 어떤 항목에도 종속되면 안된다.\n- 외래 키를 사용하여 테이블 간의 관계를 설정한다.\n\n<br>\n\n### (3) 제 3 정규화\n\n- 키에 종속되지 않는 필드를 제거한다.\n- 레코드 내에서 해당 레코드 키의 일부가 될 수 없는 값을 테이블에서 제외시키거나 관련 테이블로 이동시킨다.\n\n[데이터베이스 정규화 기본사항 설명](https://support.microsoft.com/ko-kr/help/283878/description-of-the-database-normalization-basics)\n\n<br>\n\n## 정규화를 해야하는가?\n\n데이터 정규화 개념에 대해 낯선 개발자들은 모델설계시 비정규화를 따르는 경향이 있다. 결론부터 말하면 정규화를 따르는 것이 맞다. 초기 설계시 뿐만 아니라 추후 관리측면에서 살펴보면 말이다. 비정규화는 프로젝트를 복잡하게 만들 뿐만 아니라 데이터 손실을 유발할 수도 있다.\n\n모델을 비정규화할 때 발생하는 문제들은 `캐시(cache)`를 사용하여 대부분 극복할 수 있다. 적절한 위치에 캐시를 세팅해놓고 데이터 손실을 방지하는 것이다. 어디에 캐시를 설정할 지는 다음과 같은 기준에 따라 결정하면 된다.\n\n- 가장 많은 쿼리를 포함하는 뷰와 템플릿\n- 가장 많은 요청을 받는 URL\n- 캐시를 삭제해야할 시점이 있는 곳\n\n인기있는 캐시 장고 패키지는 `django-cache-machine`, `johny-cache`를 살펴보기 바란다.\n\n<br>\n\n## 헷갈리는 필드 옵션 - `null`과 `blank`\n\n장고 모델에서 제공하는 각 필드별로 옵션을 지정할 때 가장 헷갈리는 `null`과 `blank`에 대해 정리해보았다.\n\n<br>\n\n### `null`과 `blank`의 개념 차이\n\n기본 필드에서 `null`과 `blank`는 모두 False로 지정되어 있다.\n\n`null=True` 옵션을 주면 해당 필드에 값을 입력하지 않을 경우 `NULL`, 즉, `없는 값`이 저장된다. 반면에 `blank=True` 옵션을 주면 해당 필드에 값을 입력하지 않을 경우 빈 문자열이나 빈 값(`''`)으로 저장된다.\n\n<br>\n\n### 언제 `null`을 쓰고 언제 `blank`를 쓸 것인가?\n\n|필드타입|null=True|blank=True|\n|:---:|:---:|:---:|\n|CharField,<br>TextField,<br> SlugField,<br>EmailField, CommaSeperatedIntegerField,<br>UUIDField|사용안함<br>장고 표준에 따르면 빈 값(value)을 빈 문자열(string)로 저장하는 것이 옳다.|사용<br>빈 값이 저장되어야하는 필드라면 해당 옵션을 사용한다.|\n|FileField,<br>ImageField|사용안함<br> 장고는 MEDIA_ROOT의 경로를 CharField에 파일, 이미지로 저장하므로 blank 옵션을 사용한다.|사용<br>CharField와 같은 원리|\n|BooleanField|사용안함<br>NullBooleanField 사용|사용안함|\n|IntegerField<br>FloatField<br>DecimalField<br>DurationField|사용가능|사용가능<br>빈 값을 받고싶은 경우에는 `null=True`와 함께 사용|\n|DateTimeField<br>DateField<br>TimeField|사용가능|`auto_now`, `auto_now_add`옵션을 사용하고 있을 경우 `null=True`와 함께 사용|\n|ForeignKey<br>ManyToManyField<br>OneToOneField|사용가능|사용가능|\n|GenericIPAddressField|사용가능|사용가능|\n|IPAddressField|사용 안함<br> 해당 필드는 사용하지 않는 추세이다|사용 안함<br>해당 필드는 사용하지 않는 추세이다|\n\n<br>\n\n### PostgreSQL 전용 필드에서 언제 `null`을 쓰고 언제 `blank`를 쓸 것인가?\n\n\n\n<br>\n\n## BinaryField 사용하기\n\n장고 1.8에 추가된 `BinaryField`는 **로우 바이너리 데이터(row binary data) 및 바이트(byte)를 저장하는 필드**이다.\n\n해당 필드는 `filter`, `exclude` 및 SQL문이 적용되지 않는다. 보통 메세지팩 형식의 콘텐츠나 원본 센서데이터, 압축된(base64 등) 데이터 등을 저장할 때 쓴다.\n\n<br>\n\n**`메세지팩`**\n\n> 바이너리 직렬화 포맷으로 데이터를 다양한 언어 간에 교환할 수 있게 해준다. JSON과 비슷하지만 더 빠르고 용량도 적게 차지한다. <a href=\"http://msgpack.org/\" target=\"_blank\">메세지팩 홈페이지</a>\n\n<br>\n\n`BinaryField`에 저장되는 데이터는 크기가 클 경우 병목현상이 발생하기 쉬운 지점을 만든다. 따라서 해당 필드로부터 바로 파일을 서비스하면 절대 안된다. 해당 필드 뿐만 아니라 `FileField`, `ImageField`에도 직접 파일을 저장하는 것은 좋지 않다. 그 이유는 다음과 같다.\n\n- 데이터베이스에서 읽고 쓰는 속도는 파일 시스템의 읽고 쓰는 속도보다 느리다.\n- 데이터베이스 백업에 드는 시간과 공간이 계속적으로 늘어난다.\n- 파일 자체에 접근할 때마다 장고와 데이터베이스 레이어를 거쳐야만 한다.\n\n<br>\n\n## 범용관계 피하기\n\n장고 프레임워크를 사용하여 미디어 콘텐츠 앱을 만든다고 가정해보자. 텍스트 형식의 콘텐츠를 저장하는 `Post` 모델과 비디오 형식의 콘텐츠를 저장하는 `Video` 모델을 각각 만들었다. 두  모델에 공통적으로 태그를 띄워줄 수 있는 `Tag` 모델을 구현하려면 어떻게 해야할까?\n\n가장 단순하고 기본적인 방식은 `Tag`에 해당 필드를 `ForeignKey`와 `ManyToManyField`를 사용하여 각각의 연결관계를 만들어주는 것이다. 하지만 장고에는 이러한 범용관계를 더 쉽게 만들어주는 모듈이 있다. 바로 `Contenttypes Application`이다.\n\n**하나의 테이블에서 범용적으로 다른 테이블에 조인(=foreign key)을 걸고 싶을 때 사용한다.**\n\n즉, `Tag`에서 `Post`와 `Video`로 동일한 필드를 사용하여 링크(=조인)를 걸고싶을 때 사용할 수 있다. `contenttypes application`은 장고 프로젝트 내에 installed된 모든 모델을 추적하여 `ContentType` 이라는 장고 제공모델의 인스턴스로 저장한 후 각 모델에 대한 정보를 관리해준다.\n\n기본적으로 장고의 `authentication_framework`가 `contenttypes`를 사용하여 서비스 사용자들의 권한을 관리한다.\n\n더 읽어보기 : <a href=\"https://docs.djangoproject.com/en/1.10/ref/contrib/contenttypes/\" target=\"_blank\">장고 문서 - contenttypes application</a>\n\n<br>\n\n앞서 장고에서 사용할 수 있는 범용관계의 예시를 들었는데, 범용관계는 **한 테이블에서 다른 테이블로 서로 제약조건이 없는 외부키(GenericForeignKey)로 바인딩하는 것**이다.\n\n외래키 참조시에는 한 테이블의 기본 키값을 가지고 있는 열을 다른 테이블에서 참조할 때 테이블 간 연결이 생성된다. 제약조건이 없는 외부키를 사용하게 되면 다음과 같은 문제를 유발한다.\n\n- 모델 간의 인덱싱이 존재하지 않으므로 쿼리 속도가 (상대적으로) 느리다.\n- 기본 테이블에서 데이터를 삭제했을 때 외래키 테이블에 있는 데이터로의 관계 무결성이 손상받게 될 여지가 있다.(즉, 기본테이블 데이터가 삭제된 경우 외래 키 테이블의 관련 데이터를 수동으로 삭제해주거나 다른 데이터와 연결해주어야함)\n\n\n<br>\n\n이러한 문제 때문에 범용관계는 **여러 모델과 상호작용이 필요하나 단일 행위만 수행하는 태그, 메세지, 투표, 평점 매기기 등의 목적으로만 사용**한다.\n\n하지만 이러한 단일 행위 앱이 메인 서비스라면 관리 측면에서 서드파티 패키지를 사용하거나 모델 디자인을 새로 하는 것이 더 나을 수 있다.\n\n<br>\n\n---\n\n## 마치며\n\n이번 시간에는 모델을 디자인할 때 가장 근본적인 개념인 데이터베이스 정규화에 대해 알아보았다. 그리고 모델 내의 필드에 대하여 도서에 소개해놓은  정보들을 개인적으로 공부한 내용과 함께 정리하였다. 마지막 3부에서는 모델의 `_meta` API와 매니저 등의 유틸리티/헬퍼 클래스에 대해 알아볼 것이다.\n\n<br>\n","excerpt":"이번 포스트에서는 장고 모델 디자인에 관련된 내용을 정리해보았다. 기본적인 모델에 대한 설명은 장고 문서를 참고하기 바란다. 데이터베이스 정규화 데이터베이스를 설계할 때 기본 원칙으로 삼을 수 있는 것이 이다. 정규화에 대해 간략하게 정리해보았다. …","fields":{"slug":"/2scoops-6-modeling_02/"},"frontmatter":{"date":"Oct 15, 2017","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <2부>","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n장고 프레임워크에서 모델은 서비스의 기본 구조이자 뼈대이다. 따라서 초기 모델링이 매우매우 중요하다.(~~아무리 강조해도 모자란다~~) 프로젝트를 진행하다가 새로운 모델을 추가하거나 기존 모델을 수정할 때도 전체 디자인을 고려하여 설계해야한다. 이번 포스트에서는 장고의 모델을 이용하는 방법과 주의할 점들에 대하여 알지 못했던 내용들을 정리해보고자 한다. 기본적인 모델에 대한 설명은 <a href=\"https://docs.djangoproject.com/en/1.11/topics/db/models/\" target=\"_blank\">장고 문서</a>를 참고하기 바란다.\n\n<br>\n\n## 1. 모델의 상속 스타일\n\n장고에서는 세 가지 모델 상속방식을 제공하고 있다. 모델에서 중복되는 필드가 별로 없다면 상속은 굳이 사용하지 않아도 된다. 한두 개의 필드만 겹치는 경우에는 그냥 모델 두 개에 따로 필드를 각각 선언해주는 것이 낫다.\n\n<br>\n\n### (1) 추상화 기초 클래스 (abstract base class)\n\n> 참고. 장고의 추상화 기초 클래스는 파이썬의 추상화 기초 클래스와 사용 목적이 다르다.\n\n>> 파이썬의 `abc` 모듈(Abstract Base Class)에서 제공하는 추상화 클래스의 이용목적은 부모 클래스에서 상속을 받는 서브 클래스를 인스턴스화 했을 때 부모 클래스의 메서드들이 서브클래스에도 구현이 되었는지 점검해주는 데에 있다. 특히 클래스의 크기가 크고 선언해준 메서드들이 많을 때 버그를 미연에 방지하고 클래스 계층을 쉽게 관리할 수 있도록 해준다. <a href=\"https://dbader.org/blog/abstract-base-classes-in-python\" target=\"_blank\">파이썬 abc 모듈의 목적에 대해 더 읽어보기</a>\n\n<br>\n\n장고의 추상화 기본 클래스는 오직 상속받아 생성된 모델의 테이블만 데이터베이스에 생성된다.\n\n|장점|단점|\n|:---:|:---:|\n|추상화 클래스에서 공통적인 필드를 제공하므로 불러와 사용하면 된다.|부모 클래스를 여러 모델에서 상속받을 수 있기 때문에 특정 모델에서만 독립적으로 사용할 수 없다.|\n|추가적인 테이블이 생성되지 않으므로 성능에 영향을 미치지 않는다.|-|\n\n<br>\n\n### (2) 멀티 테이블 상속 (Multi-Table Inheritance)\n\n\n`접합 상속`(Concrete Inheritance)이라고도 부른다. 부모 모델 클래스와 자식 모델 클래스 모두 테이블을 생성한다.\n\n멀티 테이블 상속을 사용하여 여러 모델을 직접 연결하기 보다는 `OneToOneField`를 사용하거나 `ForeignKey`를 사용하여 조인을 해주는 것이 성능과 관리 측면에서 훨씬 효율적이다.\n\n|장점|단점|\n|:---:|:---:|\n|부모와 자식 모두 테이블을 생성하므로<br> 쿼리가 용이하다.|상속받은 필드들 모두 부모 클래스의 필드로<br> 조인이 필요하므로 성능저하가 생길 수 있다.|\n|부모 객체에서 자식 객체를<br> 호출할 수 있다.|성능에 대한 문제때문에 거의 사용하지 않는다.|\n\n<br>\n\n### (3) 프록시 모델 (Proxy Model)\n\n기존 모델에 대해서만 테이블이 생성되고, 프록시모델 자체는 테이블을 생성하지 않는다.\n\n|장점|단점|\n|:---:|:---:|\n|각기 다른 행위(behavior)를 하는<br> 모델을 생성하고 별칭을 붙일 수 있다.|모델 필드를 변경할 수 없다.|\n\n\n<br>\n\n\n모델에서 중복된 필드가 대부분이거나 계속에서 사용할 필드가 있는 모델을 생성해야한다면 보통 추상화 기초 클래스를 사용하여 공통 필드를 상속받아 사용한다.\n\n<br>\n\n## 2. 추상화 기본 클래스 상속해보기 - `TimeStampedModel`\n\n모델마다 중복되는 생성일/수정일 필드를 `TimeStampedModel`이라는 하나의 추상클래스로 선언하여 여러 모델에서 각 필드를 일일히 선언해주지 않고 상속받아 사용할 수 있게끔 해주려고 한다.\n\n```python\n# core/models.py\n\nfrom django.db import models\n\n\nclass TimeStampedModel(models.Model):\n    \"\"\"\n    상속받으면 'created와 modified 필드를 자동으로 업데이트해주는 추상화 클래스\n    \"\"\"\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now=True)\n\n    # 해당 모델을 추상화 기본 클래스로 선언\n    class Meta:\n        abstract=True\n```\n\n<br>\n\n위의 추상클래스는 다음 모델 클래스에서 상속받기만 하면 된다.\n\n```python\n# flavors/models.py\n\nfrom django.db import models\nfrom core.models import TimeStampedModel\n\n\nclass Flavor(TimeStampedModel):\n    title = models.CharField(max_length=200)\n```\n\n`Flavor` 모델은 `TimeStampedModel`을 상속받았기 때문에  `created`와 `modified` 필드가 자동 생성 및 관리된다.\n\n만약 `TimeStampedModel`을 멀티 테이블 상속으로 관리해야했다면 해당 테이블이 추가로 생성될 뿐만 아니라 필드의 데이터를 외부키로 쿼리하여 가져와야 하는 불편함이 있었을 것이다.  \n\n<br>\n\n## 3. 장고의 모델 관련 패키지 소개\n\n||`django-model-utils`|`django-extensions`|\n|:---:|:---:|:---:|\n|역할|각 모델에서 공통적으로 필요로 하는<br> 일반적인 패턴을 상속받아 사용할 수 있게 <br>해주는 모델 관련 패키지|모든 앱에 모델 클래스를 자동으로<br> 로드해주는`shell_plus` 관리명령어 제공|\n|단점|-|`작지만 분명한 앱`에 맞지 않게<br> 너무 다양한 기능을 포함하고 있음|\n\n\n<br>\n\n## 4. DB 마이그레이션\n\n마이그레이션은 장고에서 제공하는 `django.db.migration` 모듈을 통해  ORM 과정을 거쳐 모델 별로 데이터베이스에  테이블을 생성하는 것을 말한다.\n\n마이그레이션에 필요한 유용한 명령어들을 소개한다.\n\n```powershell\n# 새로운 앱 및 모델에 대해 django.db.migration을 실행하는 명령.\n# 마이그레이션 파일을 생성한다.\n$ python manage.py makemigrations\n\n# 마이그레이션 파일을 토대로 DB에 테이블 생성하는 명령\n$ python manage.py migrate\n\n# DB에 마이그레이션을 실행하기 전에 생성된 코드를 살펴볼 수 있는 명령\n$ python manage.py sqlmigrate\n\n# 마이그레이션 생성 개수를 압축해주는 명령\n$ python manage.py squashmigrations\n\n# 외부 앱 마이그레이션\n$ export MIGRATION_MODULES=<장고 마이그레이션 스타일로 이루어지지 않는 외부 앱의 클래스>\n```\n\n<br>\n\n---\n\n## 마치며\n\n지금까지 모델 설계에서의 가장 중요한 개념인 상속에 대해 알아보았다. 또 데이터베이스로의 마이그레이션에 대해서도 유용한 명령어들을 배울 수 있었다. 2부에서는 장고 모델 디자인과 모델 매니저에 대해 알아볼 것이다.\n\n<br>\n","excerpt":"장고 프레임워크에서 모델은 서비스의 기본 구조이자 뼈대이다. 따라서 초기 모델링이 매우매우 중요하다.(아무리 강조해도 모자란다) 프로젝트를 진행하다가 새로운 모델을 추가하거나 기존 모델을 수정할 때도 전체 디자인을 고려하여 설계해야한다. 이번 포스트…","fields":{"slug":"/2scoops-6-modeling_01/"},"frontmatter":{"date":"Oct 14, 2017","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <1부>","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`오늘의 vim`에서는 알아두면 유용한 `vim` 단축키 및 기능을 하루에 하나씩 정리합니다. 이번 포스트에서는 빔 에디터에서 지원하는 6개의 모드들에 대해 소개합니다.\n\n<br>\n\n## Vim의 모드들\n\n빔 에디터는 6개의 모드를 지원한다. 간단하게 어떤 모드들이 있는지 알아보자.\n\n### 1. Normal (=Command) mode\n\n- 빔 에디터를 실행했을 때(~~아무런 초기모드 옵션이 없을 때~~) 기본 창의 상태이다.\n- 해당 모드에서 입력되는 글자들은 모두 명령으로 인식된다.\n- `evim` 인터페이스를 사용하는 경우에는 기본 창이 `Insert mode`이다. (이 때는 `Ctrl + O`를 통해 `Normal mode`로 변경할 수 있다.)\n- `Command mode`라고도 부른다.\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Normal-mode`을 입력하면 된다.\n\n<br>\n\n### 2. Insert mode\n\n- 새로운 텍스트를 입력하거나 수정, 삭제를 할 경우 사용할 수 있는 편집모드이다.\n- 커서 키가 활성화된다.\n- 다양한 단축키로 해당 모드를 실행할 수 있다.\n\n|단축키|설명|\n|:--:|:--:|\n|`a`|커서 위치 뒤에 추가|\n|`i`|커서 위치 앞에 삽입|\n|`A`|해당 줄의 끝에 추가|\n|`I`|해당 줄의 처음에 삽입|\n|`C`|해당 줄 전체를 선택하여 삭제하고 대체|\n|`s`|커서 앞의 문자 대체|\n\n<br>\n\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Insert-mode`을 입력하면 된다.\n\n<br>\n\n### 3. Visual mode\n\n- `Normal mode`와 비슷하지만 이동 명령을 하이라이트 영역에서 사용할 수 있다.\n- 비이동 명령들을 사용할 경우 하이라이트된 영역에 적용된다.\n- `showmode` 옵션이 활성화되어있을 경우 창 하단에 `--VISUAL--` 표시가 뜬다.\n- `Visual mode`에는 `plain`, `block`, `linewise` 이렇게 3가지의 강조 모드가 지원된다.\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Visual-mode`을 입력하면 된다.\n\n<br>\n\n#### (1) Plain visual mode\n\n- 기본 `Visual mode`의 형태로 이동명령을 수행한다.\n- 만약 명령이 원하는 대로 동작하지 않았을 경우에는 `u`(undo)를 통해 이전 상태로 되돌릴 수 있다.\n\n<br>\n\n#### (2) block visual mode\n\n![block1](imgs/2017-10-11/block1.png)\n\n블록 형태로 원하는 영역을 선택하여 `Insert mode`에서 텍스트를 삽입(변경)할 수 있다.\n\n<br>\n\n![block2](imgs/2017-10-11/block2.png)\n\n여러 줄에 특정 문자를 동시에 삽입하고 싶을 경우 편리하다.\n\n<br>\n\n![block3](imgs/2017-10-11/block3.png)\n\n`Insert mode`에서 `c`를 입력하면  문자를 변경할 수 있다.\n\n`Insert mode`에서는 커서의 위치에만 입력한 문자가 표시된다.(모드를 나갈 때까지는 선택한 블록영역에 적용되지 않는다.)\n\n<br>\n\n![block4](https://github.com/juliahwang/juliahwang.github.io/blob/master/_posts/images/2017-10-12/block4.png?raw=true)\n\n`ESC`를 누르면 변경하려는 문자가 선택한 영역 모두에 적용된다.\n\n- 문자를 변경하지 않고 입력하고 싶은 경우에는 `I` 또는 `A`를 사용한다.\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help visual-block`을 입력하면 된다.\n\n<br>\n\n#### (3) linewise visual mode\n\n![linewise](https://github.com/juliahwang/juliahwang.github.io/blob/master/_posts/images/2017-10-12/linewise.png?raw=true)\n\n- `plain visual mode`와 유사하다.\n- 다른 점이 있다면 모드를 실행했을 때 커서가 있는 줄 전체가 하이라이트 처리된다.\n- 화살표 키로 여러 줄을 선택할 수도 있다.\n\n<br>\n\n#### (4) 모드별 단축키 요약\n\n||plain|block|linewise|\n|:---:|:---:|:----:|:-----:|\n|실행|`Normal mode`에서 `v`|`Normal mode`에서 `Ctrl+V` 또는 `Ctrl+Q`(`cmd` 아님)|`Shift+V`|\n|종료|`ESC` 또는 `v`|`ESC`|`ESC`|\n|동작|선택된 영역에 이동명령 수행|선택된 여러줄의 블록영역에 문자 삽입 또는 변경|커서가 위치한 줄 전체를 선택가능|\n|돌아가기|`u`|-|-|\n\n<br>\n\n### 4. Select mode\n\n- `Visual mode`와 비슷하지만 사용가능한 명령어가 다르다.\n- 출력가능한 문자열을 입력할 경우 선택된 부분을 삭제하고 `Insert mode`로 변한다.\n- `showmode` 옵션이 활성화되어 있을 경우 창 하단에 `--SELECT--` 표시가 뜬다.\n- 다음과 같이 명령행에 입력하여 활성화시킨다.\n\n|단축키|설명|\n|:--:|:--:|\n|`gh`|`Normal mode`에서 셀렉트 모드 활성화 |\n|`gH`|`Normal mode`에서 셀렉트 모드 활성화|\n|`g+CTRL+H`|`Normal mode`에서 셀렉트 모드 활성화|\n|`CTRL+G`|`Visual mode`에서 셀렉트 모드 활성화|\n\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Select-mode`을 입력하면 된다.\n\n<br>\n\n### 5. Command-line mode\n\n- 에디터 창 하단에 명령어를 입력할 수 있는 모드이다.\n- `Normal mode`에서 `:`를 입력하면 해당 모드가 활성화되며 창 하단에 명령어를 입력할 수 있다.  \n\n```txt\n:set number\n:help Command-line-mode\n```\n\n- `/`와 함께 찾으려는 문자를 입력하면 파일내에서 검색이 가능하다.\n- 정규표현식을 사용하여 일치하는 패턴을 찾을 수도 있다.\n\n```txt\n/\\<worth\\>\n\n정규표현식을 사용하면 heyworth, worthless와 같은 단어도 검색이 된다.\n```\n\n- 명령어 입력 후에는 에디터가 `Normal mode`로 돌아온다.\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Command-line-mode`을 입력하면 된다.\n\n<br>\n\n### 6. Ex mode\n\n- `Command-line mode`와 비슷해서 실행되면 `Ex mode`도 실행된다.\n- 하지만 커맨드 라인 모드와 다르게 `Normal mode`로 자동으로 돌아오지 않는다.\n- Ex 모드는 일괄처리(batch processing)를 위해 설계되었으므로 매핑이나 명령줄 편집은 지원하지 않는다.\n- 일괄처리를 위해서는 빔을 실행할 때 `-E`를 입력하여 바로 해당 모드를 활성화할 수 있다.\n- 되돌아오려면 `:visual`을 입력한다.\n- 더 자세한 설명을 보려면 빔 에디터창 명령행에 `:help Ex-mode`을 입력하면 된다.\n\n<br>\n\n---\n\n## 마치며\n\n참고자료 - <a href=\"https://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes\" target=\"_blank\">Learning the vi Editor/Vim/Modes</a>\n","excerpt":"에서는 알아두면 유용한  단축키 및 기능을 하루에 하나씩 정리합니다. 이번 포스트에서는 빔 에디터에서 지원하는 6개의 모드들에 대해 소개합니다. Vim의 모드들 빔 에디터는 6개의 모드를 지원한다. 간단하게 어떤 모드들이 있는지 알아보자. 1. No…","fields":{"slug":"/vim_modes/"},"frontmatter":{"date":"Oct 11, 2017","title":"Vim _ Vim Editor의 다양한 Mode","tags":["Vim editor"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n오늘의 `vim`에서는 알아두면 유용한 vim 단축키 및 기능을 하루에 하나씩 정리합니다. 이번 포스트에서는 원하는 줄번호로 한번에 이동하여 편집할 수 있는 방법에 대해 소개합니다.\n\n<br>\n\n## 원하는 줄번호로 한번에 이동하기\n\n원하는 라인번호로 이동하기 위해서는 다음과 같이 입력한다.\n\n- vim 에디터에 들어와서 이동하고자 하는 라인 번호를 입력한다. (입력할 때 번호는 화면에 보이지 않는다)\n\t- 혹은 `:`를 입력한 후 줄번호를 추가해도 된다.\n- `Shift + G`를 누른다.\n- 바로 해당 줄로 이동한 것을 확인할 수 있다.\n\n<br>\n","excerpt":"오늘의 에서는 알아두면 유용한 vim 단축키 및 기능을 하루에 하나씩 정리합니다. 이번 포스트에서는 원하는 줄번호로 한번에 이동하여 편집할 수 있는 방법에 대해 소개합니다. 원하는 줄번호로 한번에 이동하기 원하는 라인번호로 이동하기 위해서는 다음과 …","fields":{"slug":"/vim_linenum/"},"frontmatter":{"date":"Oct 03, 2017","title":"Vim _ 원하는 라인으로 한번에 이동하기","tags":["Vim editor"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nREST 프레임워크를 이용하여 로그인을 구현하는 방식에는 2가지가 있다. 바로 토큰과 세션 기반인데, 프로젝트에서는 토큰 기반 인증을 사용하여 다음과 같은 로직에 따라 구현하였다.\n\n<br>\n\n## 장고의 REST 로그인 - Token 인증\n\n\n- 사용자에게서 User Credential 정보를 받아 `authenticate`를 진행한다. User Credential은 로그인할 때 입력받을 정보로, 보통 `username`과 `password`를 생각하면 된다. 프로젝트 내 `username`은 이메일 형식으로 받았다.\n- 해당 유저를 특정할 수 있는 Hash 값을 데이터베이스에 저장한다.\n- 세션에 저장된 Hash 값을 특정할 수 있는 `token`를 생성한다.\n- 생성된 `token`을 로그인 요청이 왔을 때 `response`로 돌려준다.\n- 이후 요청에서, 전달해준 `token`값이 `request`의 `Header`에 담겨올 경우 해당 `request`는 전달받은 `token`값에 해당하는 사용자를 인증된(=로그인된) 상태로 간주한다.\n\n```txt\n[Header] Authorization: Token \"토큰값(문자열)\"\n```\n\n<br>\n\n## 필요한 것들\n\n### 설정\n\n`base.py`에 레스트 프레임워크에서 제공하는 토큰 기반 인증을 사용하겠다는 설정을 넣어주고 `migrate`를 통해 `Token` 테이블을 생성해준다. 테이블을 생성하기 위해서는 반드시 `INSTALLED_APPS`에 토큰 앱을 표기하여야 한다.\n\n\n```python\n# config/base.py\n\n# REST_API 설정\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n      'rest_framework.authentication.TokenAuthentication'\n    )\n}\n\nINSTALLED_APPS = [\n\t'rest_framework.authtoken',\n\t...\n]\n```\n\n이 때 `BasicAuthentication`은 보안이 취약하므로 사용하지 않는다.\n\n<br>\n\n### 토큰 생성하기\n\n토큰 테이블이 생성되었다면 인터프리터를 실행하여 토큰을 만들어보자.\n\n```python\nfrom rest_framework.authtoken.models import Token\n\nuser = MyUser.objects.get(id=1)\ntoken = Token.objects.create(user=user)\nprint(token)\n\n# 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n```\n\n<br>\n\n이미 유저가 생성되어 있는 경우에는 `get_or_create()` 메서드를 사용하여 토큰이 없을 경우 해당 사용자에 대한 토큰을 생성해주고 있는 경우 그대로 가져오는 방식으로 메서드를 정의한다.\n\n```python\nfor user in MyUser.objects.all():\n\tToken.objects.get_or_create(user=user)\n```\n\n같은 방식으로 유저 모델 아래에 토큰을 생성하는 메서드를 정의해준다.\n\n```python\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)\n```\n\n해당 메서드는 REST 프레임워크 문서에 자세하게 기술되어 있다. <a href=\"http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication\" target=\"_blank\">(문서 보러가기)</a>\n\n<br>\n\n## 로그인 API\n\n토큰기반 인증을 사용할 경우 이미 토큰을 보내는 API 또한 불러와 바로 사용할 수 있게 되어 있다. 바로 `rest_framework.authtoken.views` 내 `ObtainAuthToken` 클래스이다. 또, 해당 뷰에서 사용자 인증에 필요한 시리얼라이저도 제공하고 있어 그대로 사용할 수 있다.\n\n해당 클래스는 `APIView`를 상속받아 `post` 메서드를 정의하고 있다. 이 `post` 메서드는 위의 로그인 로직대로 인증을 거친 후 토큰을 반환해준다. 프로젝트에서는 해당 메서드를 참고하여 따로 `post` 메서드를 정의하고 사용하고 있다.\n\n<br>\n\n## 로그아웃 API\n\n토큰 기반 인증에서는 해당 토큰을 클라이언트 측에 넘겨주고 이후 요청이 올 때 넘겨받는 토큰값이 일치하면 로그인한 상태로 간주한다. 즉, 상태를 계속해서 체크하지 않고 요청이 올 때만 인증을 확인하는 stateless 방식의 인증이라 할 수 있다.\n\n그렇다면 로그아웃을 하는 경우에는 해당 토큰값이 더이상 유효하지 않도록 처리해주어야 한다. 그 방식에는 2가지가 있는데, 바로 넘겨준 토큰값을 지우는 것과 토큰 자체에 유효기간을 설정하는 방법이다.\n\n첫번째 방식으로는 로그아웃 요청이 왔을 때 데이터베이스에 저장되어 있는 토큰 값을 삭제하면 된다. 두번째 방식은 유효기간을 정한 뒤 그 시간을 넘길 경우 데이터베이스에서 토큰을 지우는 방식이다.\n\n<br>\n","excerpt":"REST 프레임워크를 이용하여 로그인을 구현하는 방식에는 2가지가 있다. 바로 토큰과 세션 기반인데, 프로젝트에서는 토큰 기반 인증을 사용하여 다음과 같은 로직에 따라 구현하였다. 장고의 REST 로그인 - Token 인증 사용자에게서 User Cr…","fields":{"slug":"/web-2-인증API제작하기_02/"},"frontmatter":{"date":"Sep 29, 2017","title":"Web _ 2.1 인증 API <2부> - REST의 토큰기반 인증","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 웹서비스의 기능에 해당하는 API들을 간략하게 소개해보려고 한다. 크게 3가지로 나뉘는데, 작품 목록 및 세부페이지 조회 API, 장르별 작품 목록 및 세부 페이지 API, 모티프 등록/수정/삭제 API 이다. API를 제작하면서 새롭게 배웠던 것들이나 개념을 정리해보고자 한다.\n\n<br>\n\n## 장르별 작품 목록 및 세부 페이지 API\n\n웹서비스에서 장르를 선택하면 해당 장르 내에 속한 작품 목록을 조회할 수 있도록 하려고 한다. 이 때 장르는 10가지로 제한하려고 하였다.\n\n### CHOICE 이중 튜플 사용하기\n\n장고에서는 입력 값을 제한(선택)하게 하고싶은 경우, 커스텀 옵션을 정의하여 필드에 젹용할 수 있다. 아래와 같이 이중 튜플을 사용하여 데이터베이스에 저장되는 값과  화면에 보이는 값을 다르게 설정하여 필드에서 선택할 수 있도록 하였다.\n\n```python\n# 작품 분류할 장르 모델\nclass Genre(models.Model):\n    GENRE_TYPE_CHOICES = (\n        # ('DB에 저장되는 값', '화면에 보이는 값'),\n        ('collage', '콜라주'),\n        ('drawing', '드로잉'),\n        ('installation', '설치미술'),\n        ('new-media', '뉴미디어'),\n        ('graphic-design', '그래픽디자인'),\n        ('photography', '사진'),\n        ('video-art', '비디오 아트'),\n        ('print-making', '프린팅'),\n        ('sculpture', '조각'),\n        ('others', '기타'),\n    )\n    # 장르명\n    name_genre = models.CharField(\n        max_length=50,\n        choices=GENRE_TYPE_CHOICES\n    )\n    ...\n```\n\n다음과 같이 정의할 경우 드롭다운 메뉴가 생성된다. 드롭다운 메뉴에서는 한글로 보이지만, 데이터베이스에 저장될 때는 영어로 저장된다.\n\n<br>\n\n### 카테고리명으로 장르별 작품목록 페이지  URI 생성하기\n\n변하지 않는 값이라면 URI에서 값을 가져오는 데에 사용할 수 있다. 예를  들어 `id`값을 사용하는 경우 URL은 다음과 같을 것이다.\n\n```txt\nhttp://{{ domain }}/art/genre/1/\nhttp://{{ domain }}/art/genre/2/\n...\nhttp://{{ domain }}/art/genre/9/\nhttp://{{ domain }}/art/genre/10/\n```\n\n장르 모델에서 사용하는 장르의 갯수가 10개이고 변하지 않는 이름값을 가지므로 `id`보다는 `이름(string)`을 사용하여 URI를 만들어보았다.\n\n목표로 하는 장르별 작품 목록의 전체 URL은 다음과 같다.\n\n```txt\nhttp://{{ domain }}/art/genre/collage/\nhttp://{{ domain }}/art/genre/drawing/\nhttp://{{ domain }}/art/genre/installation/\nhttp://{{ domain }}/art/genre/new-media/\n...\n```\n\n해당 장르에 속하는 작품 정보를 JSON 구조로 반환하는 뷰는 다음과 같다. 눈여겨볼 점은 사용자가 선택한  `genre_info`를 url에서 해당하는 이름으로 가져온다는 것이다.\n\n```python\nclass GenreArtListView(generics.ListAPIView):\n    \"\"\"\n    장르별 작품 목록 페이지\n    작품을 클릭하면 작품상세페이지로 가게끔 처리(template)\n    \"\"\"\n    serializer_class = ArtListSerializers\n    permission_classes = (IsOwnerOrReadOnly,)\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        장르명 별로 url을 보내면 해당 이름에 페이지를 보내준다.\n        \"\"\"\n        # name_genre를 url에 있는 genre_cate와 일치하는 것으로 쿼리한다.\n        genre_info = Genre.objects.get(name_genre=kwargs['genre_cate'])\n        genre_artlist = genre_info.art\n        genreinfo_serializer = GenreListSerializers(genre_info)\n        genreart_serializer = self.serializer_class(genre_artlist, many=True)\n\n        content = {\n            \"genreInfo\": genreinfo_serializer.data,\n            \"genreArtList\": genreart_serializer.data\n        }\n        return Response(content, status=status.HTTP_200_OK)\n```\n\n그리고 url에 다음과 같이 `genre_cate`와 일치하는 정규표현식을 작성해주면 된다.\n\n\n```python\n# art/urls.py\n\n# 장르별 작품 목록\n    url(r'^genre/(?P<genre_cate>.+)/$',\n        apis.GenreArtListView.as_view(),\n        name='genre_detail'\n        ),\n```\n\n이렇게 하면 장르명으로 작성된 URL을 보냈을 때 해당 장르 내의 작품정보목록을 JSON 구조로 반환한다.\n\n<br>\n\n\n## 모티프 등록/수정/삭제 API\n\n본 서비스에서 모티프란 `작품에 대해 이야기하고 싶은 주제공간`이다. 사용자가 모티프를 생성하면 내부에 관련 주제로 다른 사용자와 댓글을 통해  의견을 나눌 수 있게 구상하였다.\n\n<br>\n\n### 권한 설정하기\n\n이 경우 사용자가 **로그인한 경우**에만 모티프를 생성, 수정, 삭제할 수 있어야 하며, 특히 수정 및 삭제의 경우에는 해당 모티프를 생성한 사용자만 가능하도록 권한을 커스터마이징 하였다.\n\n로그인 인증확인의 경우에는 레스트에서 지원하는 `IsAuthenticated` 퍼미션 클래스를 임포트하여 사용하였다. 반면 수정 및 삭제용으로 커스터마이징한 퍼미션 클래스는 다음과 같다.\n\n```python\n# utils/permissions/motif_perms.py\n\n\nclass IsMotifOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    관리자 또는 자기자신일 경우 perm = True\n    또는 obj의 소유자가 요청을 보낸 사용자일 경우 perm = True\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS and \\\n                permissions.IsAdminUser:\n            return True\n        return obj.motif_author == request.user\n```\n\n메서드를 보면 관리자와 `obj`의 `motif_author`가 요청을 보낸 사용자일 경우에만 권한을 `True`로 반환하도록 하였다. 위의 클래스를 뷰 클래스의 멤버변수로 지정해주거나, 사용하기를 원하는 요청메서드에만 따로 지정할 수도 있다.\n\n```python\n# apis/motifs.py\n\npermission_classes = ('IsAuthenticated', 'IsMotifOwnerOrReadOnly', )\n```\n\n<br>\n\n### PUT 메서드로 부분수정하기\n\n`PUT` 요청의 경우 REST 관례 상 replace를 시켜버리기 때문에 일부 데이터만 보내도 값 전체가 변경되어 버린다. 이러한 `PUT` 메서드로 부분수정이 가능하도록 구현해보았다.\n\n**put 메서드 로직**\n\n- 수정을 원하는 객체를 쿼리해서 변수에 선언한다.\n- 시리얼라이저에 쿼리한 객체를 넣고 사용자가 입력한 정보(`request.data`)로 변경한다.\n- 넣은 정보에 대해 입력값 검증(`validate()`)을 실시한다.\n- 통과한 경우 변경된 값으로 저장(`save()`)한다.\n- 변경된 객체를 정보조회용 시리얼라이저에 대입한다. (선택)\n- 해당 시리얼라이저의 `.data`를 출력한다.\n\n<br>\n\n모티프 주제를 수정할 경우 해당 모티프의 작성자 값과 연결된 작품 객체값은 변경되면 안된다. 이 경우에는 serializer 내에서 `update()` 메서드를 사용하여 변경되지 않는 값을 명시해준 후 저장하는 것으로 값이 변경되는 것을 방지할 수 있다.\n\n```python\n# motif/serializers/motifs.py\n\nclass MotifUpdateSerializers(serializers.ModelSerializer):\n\n\t...\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        변경된 내용으로 저장\n        \"\"\"\n        self.instance.name_motif = validated_data['name_motif']\n        self.instance.name_art = validated_data['name_art']\n        self.instance.motif_author = validated_data['motif_author']\n        instance.save()\n        return instance\n```\n\n`validate()`를 통과한 데이터를 가지고 `instance`의 값에 변경/변경되지 않은 값의 `value`를 정의해주는 것이다.  \n\n<br>\n\n---\n\n## 마치며\n\n모티프에 저장할 댓글을 제외하고 기본 API 제작을 완료하였다. 코멘트와 태그기능을 제작한 후에는 프론트 작업을 본격적으로 해볼 예정이다.\n\n<br>\n","excerpt":"이번 포스트에서는 웹서비스의 기능에 해당하는 API들을 간략하게 소개해보려고 한다. 크게 3가지로 나뉘는데, 작품 목록 및 세부페이지 조회 API, 장르별 작품 목록 및 세부 페이지 API, 모티프 등록/수정/삭제 API 이다. API를 제작하면서 …","fields":{"slug":"/web_3.1-기능API제작-작품조회/"},"frontmatter":{"date":"Sep 29, 2017","title":"Web _ 3.1 기능 API 구현하기","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n여러 개의 세팅파일을 적용할 경우 각 세팅파일에 해당하는 `requirements` 파일도 따로 관리해주어야 한다. 이는 서버마다 그 환경에 필요한 컴포넌트 및 패키지만 설치하자는 뜻이다. 이번 포스트에서는 패키지의 버전 관리를 도와주는 `requiremnets` 파일에 대해 알아볼 것이다. 또, 설정에서 템플릿 및 미디어 파일에 대한 경로를 설정하는 방법에 대해서도 알아보자.\n\n<br>\n\n## 여러 개의 requirements 파일 이용하기\n\n저장소 루트 아래 requirements/ 폴더를 생성하여 세팅폴더 내 파일들과 동일한 이름의 텍스트 파일을 생성한다.\n\n```powershell\nrequirements/\n  base.txt\n  local.txt\n  staging.txt\n  production.txt\n```\n\n<br>\n\n`base.txt`에는 모든 설정 환경에 걸쳐 공통적으로 설치할 의존성을 넣어준다.\n\n```txt\nDjango==1.8.0\npsycopg2==2.6\ndjangorestframework==3.1.1\n```\n\n<br>\n\n`base.txt`를 사용하면서 로컬환경에서만 사용하는 `local.txt`는 다음과 같이 작성한다.\n\n```txt\n-r base.txt\ncoverage==3.7.1\ndjango-debug-toolbar==1.3.0\n```\n\n`-r base.txt`는 `base.txt`의 의존성을 포함한다는 명령어이다.\n\n<br>\n\n### 설치\n\n각 환경에 따라 다음과 같이 파이썬 패키지 관리자 명령어 (`pip`)를 사용하여 설치할 수 있다.\n\n```powershell\n$ pip install -r requirements/local.txt\n$ pip install -r requirements/production.txt\n```\n\n<br>\n\n## settings와 파일 경로\n\n여러 개의 settings 파일이 있는 경우 프로젝트 내부의 템플릿과 미디어 파일을 찾을 수 있도록 경로를 설정할 때 주의할 점은 **하드 코딩하지 말라**는 것이다.\n\n1부에서 잠깐 언급하였지만, 장고의 기본 설정파일에는 상대 경로를 설정할 수 있도록 프로젝트의 `BASE_DIR` 설정을 제공하고 있다.\n\n`BASE_DIR`은 `base.py`의 위치에 따라 결정되기 때문에 어떤 설정이라도 상대적 위치만 정해놓으면 프로젝트를 구동할 수 있게 해준다.\n\n1부에서 사용한 방식으로 `os` 모듈의 `join` 메서드를 사용해도 되고, 도서에서는 `Unipath`라는 파이썬의 경로 정의 패키지를 소개하고 있다.\n\n### (1) os.path 라이브러리 사용\n\n```python\n# settings/base.py\n\n# 상대 임포트를 위해 지정해준 BASE_DIR 경로\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# 저장소루트 경로\nROOT_DIR = os.path.dirname(BASE_DIR)\n\n# 비밀값들이 저장된 폴더 경로\nSECRET_DIR = os.path.join(ROOT_DIR, '.secret')\n\n# 시크릿 JSON 파일의 위치\nSECRET_FILE = os.path.join(SECRET_DIR, 'secret.json')\n\n# 시크릿 파일 내부를 읽어와 그 값을 저장 (실사용 방식)\nsecrets = json.loads(open(SECRET_FILE).read())\n```\n\n<br>\n\n### (2) Unipath 패키지 사용\n\n```python\n# settings/base.py\n\nfrom unipath import Path\n\nBASE_DIR = Path(__file__).ancestor(3)\nMEDIA_ROOT = BASE_DIR.child(\"media\")\nSTATIC_ROOT = BASE_DIR.child(\"static\")\nSTATICFILES_DIRS = BASE_DIR.child(\"assets\")\n```\n\n<br>\n\n---\n\n## 마치며\n\n이상으로 여러 개의 세팅을 사용할 때 그에 따른 의존성을 `requirements`로 관리하는 방법에 대해 정리해보았다. 또, 부가적인 템플릿 및 미디어파일 또한 경로설정을 통해 상대적으로 지정해줄 수 있다는 것을 배웠다.\n\n무엇보다도, **보안에 관계된 값을 제외한 모든 설정은 버전 컨트롤로 관리하는 것이 좋다.** 패키지 관리도 마찬가지다. 특히 오픈소스가 강조되는 요즘 시대에서 패키지 버전관리는 버전 컨트롤에 필수적으로 포함시키는 것이 좋다.\n\n추가로, 커스텀 설정을 적용할 경우 어떤 부분이 달라졌는지(~~마치 git diff처럼~~) 알고싶다면 콘솔에서 해당 파일에 대해 `diffsettings` 명령어를 실행해볼 수 있다.\n\n<br>\n","excerpt":"여러 개의 세팅파일을 적용할 경우 각 세팅파일에 해당하는  파일도 따로 관리해주어야 한다. 이는 서버마다 그 환경에 필요한 컴포넌트 및 패키지만 설치하자는 뜻이다. 이번 포스트에서는 패키지의 버전 관리를 도와주는  파일에 대해 알아볼 것이다. 또, …","fields":{"slug":"/2scoops-5_02/"},"frontmatter":{"date":"Sep 29, 2017","title":"BookReview > Two Scoops of Django _ 5장. settings와 requirements 파일 <2부>","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"---\nlayout: post\ntitle: Two Scoops of Django - 4장. 장고 앱 디자인의 기본\ncategories: [도서 리뷰]\ntags: [django, 장고]\ndescription:\n---\n\n\n**장고에서는 하나의 프로젝트를 생성하고, 그 내부에 프로젝트에서 필요한 기능을 수행하는 앱들을 구성한다.** 이 앱들이 상호작용하는 과정을 짜는 것이 장고 웹 프레임워크를 사용한 개발이라 봐도 무방하다. 각각의 앱들은 개발자가 부여한 기능을 충실히 수행하며, 필요시에는 다른 앱과의 상호작용을 하기도 한다. 만약 하나의 앱을 설명하는 데에 말이 필요 이상으로 길어진다면 해당 앱은 더 작은 규모의 앱들로 나누어질 수 있다는 말이다. 이번 포스트에서는 장고 앱을 디자인하는 데에 필요한 기본적이고 필수적인 조건들에 대해서 알아보자.\n\n\n<br>\n\n## 장고 앱의 정의\n\n장고에서의 `앱(App)`은 다음을 지칭한다.\n\n- `장고 프로젝트` : 장고 프레임워크를 기반으로 한 웹 어플리케이션 하나를 지칭할 수 있다.\n- `장고 앱` : 프로젝트 내부 하나의 기능을 표현하기 위해 디자인된 작은 라이브러리다. 장고의 프로젝트는 여러 개의 장고 앱으로 구성되어 있으며 때로는 외부 장고 패키지를 지칭하기도 한다.\n- `INSTALLED_APPS` : 프로젝트에서 사용하기 위해 세팅파일에 등록한 장고 앱들을 말한다.\n- `서드파티(외부) 장고 패키지` : 파이썬 패키지 도구(ex_ `pip`)에 의해 재사용이 가능한 플러그인 형태로 이용할 수 있는 장고 앱을 말한다.\n\n<br>\n\n### 1. 앱 구성 가정하기\n\n현재 장고를 사용하여 웹서비스 `Wordy Gallery`의 앱구조를 들여다보면 다음과 같다.\n\n- `art` : 웹서비스의 주요 자원인 작품에 대한 정보를 기록하고 웹서비스에 보여준다.\n- `motif` : 작품에 대한 댓글 공간을 구성하고 그 안에서 사용자들이 댓글로 소통한다.\n- `member` : 사용자 정보를 저장하고 인증을 통해 해당 웹서비스를 사용할 수 있게 한다.\n\n각각의 앱들은 하나의 역할만 수행하지만 서론에서 말했듯이, 서로 상호작용을 할 수 있다. 이렇게 세분화하여 앱을 구성할 경우에는 각각의 기능을 모듈화하여 관리하기에도 쉽고 나중에 사이트를 확장하더라도 앱을 추가해나가면 되므로 관리상의 이점이 크다.\n\n<br>\n\n### 2. 장고 앱 이름 작명하기\n\n1. 독특한 이름보다는 일반적인 이름을 사용하자\n2. **앱의 이름은 곧 URL에 표시되는 이름일 수도 있다.** 따라서 주소를 고려하여 이해하기 쉬운 단어를 사용하자.\n3. 앱을 임포트하여 사용할 경우를 대비하여 적절한 작명 규칙을 따른다.\n \t- 예를 들어, 숫자, 대시, 마침표, 스페이스, 특수문자 등은 PEP-8의 작명규칙에 어긋나므로 띄어쓰기가 필요한 이름의 경우에는 `_`를 사용한다.\n4. 되도록이면 앱을 나타낼 수 있는 명료한 하나의 단어로 작명하는 것이 좋다.\n\n<br>\n\n### 3. 앱 규모 가늠하기\n\n\n앱을 디자인하는 것은 매우 주관적인 작업이다. 프로젝트 규모를 먼저 고려한 후에 기능을 얼마나 세분화할 것인가는 개발자의 결정에 달려있기 때문이다. 도서에 따르면 좋은 장고 앱을 설계하는 것은 더글러스 맥글로이의 유닉스 철학을 따르는 것과 같다고 한다.\n\n즉, **\"한번에 한 가지 일을 하고 그 한 가지 일을 출실히 하는 프로그램을 짜는 것\"**이다. 앱 하나의 크기를 작게 유지하여 프로젝트를 진행해나가다 보면 이것이 관리 및 설계 측면에서 큰 앱 하나를 관리하는 것보다 더 확장적이고 유연한 선택이었다는 것을 알게 될 것이다.\n\n<br>\n\n### 4. 앱 내부 모듈 살펴보기\n\n`startapp` 명령어를 사용하여 앱을 생성할 경우 공통적으로 생성되는 모듈이 있고 따로 생성하여 앱 기능 구현에 사용할 수 있는 `비공통 모듈`들이 있다. 평소에 접해보지 못한 `비공통 모듈`들에 대해 요약해보았다.\n\n```powershell\ndjango_app/\n  art/\n    # 모델 믹스인 위치에 대한 옵션\n    behaviors.py\n\n    # 앱 별 세팅을 저장해놓는 파일\n    constants.py\n\n    # 렌더할 정보를 전송하는 커스텀 프로세서 생성파일\n    context_processors.py\n\n    # 커스텀 데코레이터를 정의해놓은 파일\n    decorators.py\n\n    # 프로젝트에서 사용되는 커스텀 모델이나 컴포넌트 저장\n    db/\n\n    # 커스텀 예외처리를 정의해놓은 파일\n    exceptions.py\n\n    # 커스텀 폼 필드, 모델 필드 등을 정의해놓은 파일\n    fields.py\n\n    # 테스트 데이터 팩터리 파일\n    factories.py\n\n    # 뷰와 모델을 가볍게 하기 위해 코드를 따로 저장하는 파일\n    helpers.py\n\n    # models.py가 커질 경우 커스텀 모델 매니저를 따로 관리\n    managers.py\t \n```\n\n<br>\n","excerpt":"layout: post\ntitle: Two Scoops of Django - 4장. 장고 앱 디자인의 기본\ncategories: 도서 리뷰\ntags: django, 장고\ndescription: 장고에서는 하나의 프로젝트를 생성하고, 그 내부에 프로젝…","fields":{"slug":"/2scoops-4-장고앱디자인의기본/"},"frontmatter":{"date":"Sep 28, 2017","title":"BookReview > Two Scoops of Django _ 4장. 장고 앱 디자인의 기본","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n장고 1.8에서는 140가지 설정을 제어할 수 있는 세팅 모듈과 버전별 필요 패키지를 기록할 수 있는 `requirements` 모듈을 통해 프로젝트를 실행 환경별로 구동한다. 이번 포스트에서는 실행 환경별 최선의 설정 관리법에 대해 알아보았다. 2부에서는 그에 따라 요구되는 패키지의 버전 관리와 기타 미디어 파일 경로 설정에 대해 알아볼 것이다.\n\n<br>\n\n## 환경별 최선의 settings 모듈 관리하기\n\n장고에서 최선의 설정 방법은 다음을 따른다.\n\n- 버전 컨트롤 시스템(ex_ `git`)으로 모든 설정파일을 관리한다. 어떤 부분을 변경했는지가 문서화되어야 협업환경에서 일어나는 혼란을 방지할 수 있다.\n- 반복되는 설정은 기본 설정파일로 관리하고, 실행환경별로 추가적인 세팅을 나누어 관리한다.\n- 암호 및 비밀키 등은 버전컨트롤 시스템에서 제외하여야 한다.\n\n<br>\n\n### 1. 버전관리를 반드시 적용하자.\n\n버전 관리에 포함되지 않는 `local_settings 안티패턴`을 사용한 적도 있다. 즉, 개발자에게만 필요한 설정으로, 스테이징이나 운영서버 및 디버그 환경에 대한 설정들 말이다. 이외에도 버전 컨트롤 시스템에 등록하면 안되는 비밀 값이나 개인 정보 등은 로컬 세팅에 등록하여 사용해왔다.\n\n예를 들어, `local_settings.py`라는 모듈을 생성하여 파일을 각각의 서버나 개발머신에 위치시킨 후 버전 컨트롤 시스템에서 제외해버리면 개발환경에 특화된 설정을 개인적으로 변경할 수 있는 것이다. 또, 스테이징 서버와 개발 서버에서는 버전 컨트롤 관리에 구애받지 않고 설정을 유지할 수 있었다. 하지만 다음의 문제들로 인해 이러한 로컬세팅 설정방식을 지양해야 한다.\n\n- 모든 머신에 버전컨트롤에 기록되지 않는 코드가 존재하므로 개발자 별로 공통된 세팅을 적용할 수 없다.\n- 운영환경에서 발생하는 버그를 로컬에서 구현해보지만 설정이 달라 동일하게 적용되지 않는다.\n- 로컬환경의 `local_settings` 때문에 생긴 버그가 운영환경에서는 보이지 않는다.\n- 개발자가 해당 파일을 복사해서 자신만의 설정을 붙여 사용할 경우 문제는 커진다.\n\n<br>\n\n### 2. 버전 관리의 예외 : 비밀 정보\n\n장고 프로젝트 자체의 시크릿 키 같은 경우에는 절대로 버전 컨트롤 시스템에 노출되어선 안된다. 해당 `SECRET_KEY` 세팅은 장고의 암호화 인증 기능에 사용되고 이 세팅값은 다른 프로젝트의 시크릿 키 값과 겹쳐서는 안된다. 이 키가 외부에 노출되면 장고의 보안 기능을 무력화시킬 수 있기 때문이다. 이 뿐만이 아니라 배포에 사용되는 AWS 키, OAuth 토큰, 여러 데이터베이스 설정정보 등도 마찬가지다.\n\n이러한 정보를 버전컨트롤 시스템에서 제외시키는 방법에는 여러가지가 있다. 이는 해당 포스트 내 **코드에서 설정 분리하기** 파트에서 더 자세히 다루었다.\n\n<br>\n\n### 3. 여러 개의 세팅파일로 설정 분리하기\n\n설정을 하나의 파일로 사용하기보다는 `settings` 모듈을 만들고 내부에 환경별로 파일을 만들어 분리하도록 한다.\n\n```powershell\nsettings/\n  __init__.py\n  # 프로젝트 내 모든 인스턴스에 적용되는 공통 설정\n  base.py\n\n  # 로컬환경용. 개발 전용 로컬파일\n  local.py\n\n  # 운영환경서버 내 프라이빗 버전(관리자페이지)의 설정\n  staging.py\n\n  # 테스트러너, 인메모리 DB, 로그설정\n  test.py\n\n  # 운영서버의 실제 운영 설정파일\n  production.py\n```\n\n**ci.py**\n\n큰 규모의 프로젝트에 특수한 목적으로만 쓰이는 서버가 있을 경우에는 각각의 목적에 맞는 커스텀 세팅 파일을 만들어서 사용한다. 이 `ci.py`파일은 지속적 통합 서버에서 사용된다.\n\n<br>\n\n\n### 4. 세팅파일 적용하기\n\n위와 같이 분리된 세팅파일은 터미널에서 다음과 같이 지정하여 사용할 수 있다.\n\n```powershell\n# 로컬 세팅파일을 사용하여 서버를 실행할 경우\n$ python manage.py runserver --settings=config.settings.local\n```\n\n<br>\n\n하지만 계속해서 위와 같은 명령어를 입력하기가 번거로울 수 있다. 따라서 특정 쉘에서 항상 같은 세팅파일을 적용하게 하려면 `DJANGO_SETTINGS_MODULE`과 `PYTHON_PATH` 환경변수를 지정하여 사용할 수 있다.\n\n```powershell\n# DJANGO_SETTINGS_MODULE을 local 서버로 설정\n$ export DJANGO_SETTINGS_MODULE=config.settings.local\n```\n\n`virtualenv`를 사용할 경우 `postactivate` 스크립트에 위의 명령어를 삽입하여 저장하면 `virtualenv`를 실행할 때 자동으로 해당 설정을 적용시켜 사용할 수 있다.\n\n<br>\n\n### 5. 다중 개발환경 세팅\n\n세팅파일에서 공유하여야하는 기본 `base.py` 설정파일은 버전 컨트롤 시스템에 등록하여 모두가 같은 설정을 사용할 수 있게끔 한다. 장고 세팅파일에서 `base.py`는 유일하게 `import *` 구문을 사용해도 되는 파일이다. 세팅파일의 모든 네임스페이스는 전부 오버라이드해서 사용하기 때문이다.\n\n한편으로, 프로젝트에 참여한 협업자 각각이 자기만의 설정 환경을 사용하고 싶을 때도 있다. 이 때는 **개개인의 필요에 의해 작성된 파일명을 `dev_julia.py`, `dev_katie.py` 처럼 이름을 붙여 이 또한 버전 컨트롤 시스템에서 관리될 수 있도록** 한다. 이렇게 하면 팀원끼리 코드를 공유할 수도 있고 설정이 달라 생기는 차이를 빨리 발견할 수 있기 때문이다.\n\n<br>\n\n## 코드와 설정 분리하기\n\n앞서 이야기한 `local_settings 안티 패턴`을 사용한 이유는 서버 구동에 필요한 개인정보 및 비밀 키 등을 버전 컨트롤 시스템에서 제외하기 위함이었다. 이러한 값들은 반드시 세팅 파일에 들어가야하기 때문인데, 설정파일 내의 코드는 그대로 두고 값들만 따로 빼서 관리되지 않게 할 수 있다.\n\n- 비밀 키는 반드시 외부에서 알 수 없어야 하므로 버전 컨트롤 시스템에 포함시키면 안된다.\n- 비밀 키는 설정값들이지 코드가 아니다.\n- 설정은 배포 환경에 따라 다르지만 코드는 그렇지 않다.\n- PaaS 환경에서는 독립된 서버에서 코드를 수정하도록 허용하지 않고 있다.\n\n그렇다면 **설정과 코드의 차이**는 무엇일까? 설정에는 다음과 같은 값을 포함한다.\n\n- 데이터베이스, 캐시 등의 백엔드 서비스 리소스 핸들\n- 아마존 S3나 트위터 등의 외부 서비스 인증정보\n- 배포된 호스트의 이름 및 배포 환경마다 달라지는 값들\n\n**앱은 설정을 상수로 코드에 저장하곤 하는데, 배포 관련 프로젝트 설정 지침인 `Twelve-factor app`을 참고하면 설정을 코드에서 엄격하게 분리하는 것이 좋다**고 한다. 즉, 어떠한 인증정보나 비밀 값들도 유출되지 않고 코드베이스가 공개될 수 있다면 이러한 원칙을 지킨 것이다.\n\n<br>\n\n**분리된 설정값들은 `환경변수`를 이용하여 코드 변경 없이 배포시 쉽게 변경할 수 있도록 관리**하라고 충고하고 있다. 이를 통해 얻는 장점은 다음과 같다.\n\n- 비밀 키를 세팅파일을 환경변수에 넣으면 걱정없이 세팅파일을 버전 컨트롤 시스템에 올릴 수 있다.\n- settings_local 파일을 팀원 각자가 만들어 쓰는 것이 아니라 버전 컨트롤 시스템에서 관리되는 하나의 파일로 공유하여 쓸 수 있다.\n- 파이썬 코드 수정 없이 프로젝트 코드를 쉽게 배치할 수 있다.\n- 대부분의 PaaS 기반 시스템들이 환경변수 사용을 장려하고 있다.\n\n환경변수를 사용함으로서 얻는 효과는 <a href=\"https://12factor.net/ko/config\" target=\"_blank\">더 읽어보기(12factor app 홈페이지)</a>를 참고하기 바란다.\n\n<br>\n\n### 1. 로컬에서 환경변수 설정하기\n\n맥과 리눅스의 경우에는 다음 명령어를 `bashrc`, `.bash_profile`, `.profile` 등에 추가해준다.\n\n```powershell\n$ export <KEY>=<value>\n$ export SOME_SECRET_KEY=fdsjlfk-sdfjlsfjl-dsfjlsdkfj\n```\n\n<br>\n\n윈도우 시스템에서는 명령행(`cmd.exe`)에서 `setx` 명령어를 사용하여 하나하나 설정해준 후 명령창을 재실행해주어야 한다. 이는 매우 번거로우므로 `virtualenv` 내 `bin/activate.bat` 스크립트에 원하는 환경변수를 추가해주면 된다. 그러면 `virtualenv`가 실행되면서 설정이 바로 적용될 것이다.\n\n```powershell\n> set SOME_SECRET_KEY=djlfsdjlk-sdfjlsdfjlkds-sdkfjslkfj\n```\n\n<br>\n\n### 2. 운영환경에서 환경변수 설정하기\n\n운영 환경은 사용하는 배포 도구나 서버 설정에 따라 다른 방법을 사용하지만 파이썬을 사용할 경우 다음과 같이 지정하고 불러와 사용한다.\n\n```powershell\n$ export DJANGO_SETTINGS_MODULE=config.settings.local\n$ python manage.py shell_plus  # 환경변수가 적용된 인터프리터 실행\nIn [1]: import os\n\nIn [2]: os.environ[\"DJANGO_SETTINGS_MODULE\"]\nOut[2]: 'config.settings.local'\n```\n\n위 방식을 활용하여 설정 파일 내에서 환경변수 값을 불러온다.\n\n```python\n# settings/production.py\n\nimport os\nSOME_SECRET_KEY = os.environ[\"SOME_SECRET_KEY\"]\n```\n\n<br>\n\n### 3. 비밀키가 존재하지 않을 때?\n\n위의 방식으로 설정파일에서 비밀 값들을 임포트해와 사용한다. 그러나 운영환경에서 불러올 환경변수가 지정되어 있지 않다면 에러가 발생하고 프로젝트 실행에 문제가 생긴다. 또, 임포트해올 값들이 많을 경우 단순 `KeyError` 메세지는 별 도움이 되지 않을 것이다. 따라서 환경변수가 존재하지 않을 때 원인을 알려주는 예외처리가 필요하다.\n\n```python\n# settings/base.py\nimport os\nfrom django.core.exceptions import ImproperlyConfigured\n\ndef get_env_variable(var_name):\n    \"\"\"\n    환경변수를 가져오거나 커스텀 예외문구를 반환\n    \"\"\"\n    try:\n        return os.environ[var_name]\n    except KeyError:\n        error_msg = \"Set the {} environ variable\".format(var_name)\n        raise ImproperlyConfigured(error_msg)\n\nSOME_SECRET_KEY = get_env_variable(\"SOME_SECRET_KEY\")\n```\n\n다음 메서드를 실행하여 환경변수가 존재하지 않을 경우에는 다음과 같이 커스텀 에러메세지를 확인할 수 있다.\n\n```powershell\ndjango.core.exceptions.ImproperlyConfigured: Set the SOME_SECRET_KEY environ variable.\n```\n\n<br>\n\n**세팅 모듈에서 장고 컴포넌트 임포트는 금물!**\n\n어떤 세팅파일에서라도 장고 컴포넌트는 임포트하면 안된다. 위에서 사용한 `ImproperlyConfigured`는 에러메세지에 문제가 되는 세팅 이름을 표시해주기 위하여 예외적으로 사용해 준 것이다. 일반적으로 **장고로부터 무언가를 설정파일에 임포트할 일은 아예 없고 해서도 안된다!**\n\n<br>\n\n**manage.py 대신 django-admin.py를 사용하자**\n\n<a href=\"https://docs.djangoproject.com/en/1.8/ref/django-admin/\" target=\"_blank\">장고 공식문서 - django-admin</a>에 따르면 여러 세팅 파일이 있을 경우에는 `django-admin.py`를 사용하여 환경변수 세팅 명령어를 실행하는 것을 추천하고있다. 하지만 `manage.py`를 사용해도 무방하다. 원문은 아래를 참고하기 바란다.\n\n> Generally, when working on a single Django project, it’s easier to use manage.py than django-admin. **If you need to switch between multiple Django settings files, use django-admin with DJANGO_SETTINGS_MODULE or the --settings command line option.**\n\n<br>\n\n## 환경변수를 사용할 수 없을 때\n\n환경변수를 사용할 경우에는 저장할 비밀정보를 어떻게 관리할 것인지와 어떤 배포환경을 적용할 것인지를 먼저 생각해야한다. 특히 아파치는 독립적인 환경변수 시스템을 가지고 있기 때문에 운영체제에서 설정해준 환경변수가 운영환경에서 작동하지 않을 것이다. 또, `Nginx`를 사용할 경우에도 환경 변수를 사용하는 방식이 작동하지 않을 수 있다.\n\n이 떄는 `local_settings 안티패턴` 보다는 **비밀파일 패턴**을 사용한다. 즉, 장고에서 실행되지 않는 형식의 파일 (`JSON`, `Config`, `YAML`, `XML` 등의 파일)을 버전 컨트롤 시스템에서 제외하여 사용하는 것이다.\n\n<br>\n\n### JSON 파일 이용하기\n\n다음과 같이 설정값만 저장할 `secret.json` 파일을 만들어준다.\n\n```json\n{\n    \"DJANGO_KEY\": \"<VALUE>\",\n    \"FACEBOOK_API_KEY\": \"<VALUE>\"\n}\n```\n\n위의 값을 임포트하여 사용하기 위해서는 다음과 같이 세팅 모듈에 코드를 추가해준다.\n\n```python\n# setings/base.py\n\nimport os\n\nfrom django.core.exceptions import ImproperlyConfigured\n\n\n# JSON 기반 비밀 모듈 (도서)\nwith open(\"secret.json\") as f:\n    secrets = json.loads(f.read())\n\n# 상대 임포트를 위해 지정해준 BASE_DIR 경로\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n# 저장소루트 경로\nROOT_DIR = os.path.dirname(BASE_DIR)\n\n# 비밀값들이 저장된 폴더 경로\nSECRET_DIR = os.path.join(ROOT_DIR, '.secret')\n\n# 시크릿 JSON 파일의 위치\nSECRET_FILE = os.path.join(SECRET_DIR, 'secret.json')\n\n# 시크릿 파일 내부를 읽어와 그 값을 저장 (실사용 방식)\nsecrets = json.loads(open(SECRET_FILE).read())\n\ndef get_secret(setting, secrets=secrets):\n    \"\"\"\n    비밀변수를 가져오거나 명시적 예외를 반환\n    \"\"\"\n    try:\n        return secrets[setting]\n    except KeyError:\n        error_msg = \"Set the {} environ variable\".format(setting)\n        raise ImproperlyConfigured(error_msg)\n\nSECRET_KEY = get_secret(\"DJANGO_KEY\")\n```\n\n<br>\n\n---\n\n## 마치며\n\n이번 장에서는 프로젝트 환경에 맞는 설정과 관련한 내용을 공부했다. 이번 포스트의 중점은 협업시 필요한 기본 설정을 최대한 버전 컨트롤 시스템에서 관리할 수 있도록 하자는 것이다. 한편, 보안에 대비하여 공개되어서는 안되는 설정값들을 따로 관리하여야 한다.\n\n<a href=\"http://juliahwang.kr/%EB%8F%84%EC%84%9C%20%EB%A6%AC%EB%B7%B0/2017/09/29/2scoops-5-settings%EC%99%80requirements2.html\" target=\"_blank\">5. settings와 requirements <2부></a>에서는 설정환경 별로 필요한 패키지와 버전을 관리하는 `requirements`에 대해 알아볼 것이다. 또, 설정에서 템플릿 및 미디어 파일에 대한 경로를 설정하는 방법에 대해서도 알아보자.\n\n <br>\n","excerpt":"장고 1.8에서는 140가지 설정을 제어할 수 있는 세팅 모듈과 버전별 필요 패키지를 기록할 수 있는  모듈을 통해 프로젝트를 실행 환경별로 구동한다. 이번 포스트에서는 실행 환경별 최선의 설정 관리법에 대해 알아보았다. 2부에서는 그에 따라 요구되…","fields":{"slug":"/2scoops-5_01/"},"frontmatter":{"date":"Sep 28, 2017","title":"BookReview > Two Scoops of Django _ 5장. settings와 requirements 파일 <1부>","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n8번은 한번에 계단을 오르는 갯수가 한정되어 있을 때 입력받은 계단의 수를 오르는 경우의 수를 구하는 문제이다. 해당 문제 또한 `for`, `while` 그리고  재귀방식을 사용하여 풀어보았다.\n\n<br>\n\n## 문제 8) 계단 오르기\n\n```\n문제 8. 계단 오르기\n\n계단을 한 번에 1계단 또는 2계단 오를 수 있다. N단의 계단을 오를 수 있는 총 가지 수를 계산하는 문제를 재귀함수로 구현 (0 < N <= 30)\n\n- N = 2 일 경우\n    2가지 : (1,1), (2)\n- N = 3 일 경우\n    3가지 : (1,1,1),(1,2),(2,1)\n- N = 4 일 경우\n    5가지 : (1,1,1,1),(1,1,2),(1,2,1),(2,1,1),(2,2)\n- N = 5 일 경우\n    8가지 : (1,1,1,2),(1,2,2),(2,1,2),(1,1,1,1,1),(1,2,1,1),(2,1,1,1),(1,1,2,1),(2,2,1)\n```\n\n해당 문제는 계단의 수(`N`)가 증가할 때 그 경우의 수에 일정한 규칙의 수열을 반환한다. 총 계단의 수가 하나씩 늘어날 때마다 바로 직전과 그 전의 연속된 두 가지 경우의 수의 합을 반환한다. 즉, `f(n) = f(n - 1) + f(n - 2)`이라는 점화식이 성립하게 된다.\n\n이러한 규칙은 피보나치 수열이 가진 규칙과 동일하다. 피보나치에 더 자세히 알아보고자 한다면 이전에 포스팅했던 <a href=\"http://juliahwang.kr/algorism/2017/09/18/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EC%9D%91%EC%9A%A94.html\" target=\"_blank\">재귀 - 문제4. 피보나치 수열 출력</a>을 참고하기 바란다.\n\n<br>\n\n## 코드 및 풀이\n\n### (1) while\n\n```python\n# while 사용\n\ndef stair_while():\n    n = int(input(\"N = \"))\n    a = 0\n    b = 1\n    while n > 0 and n <= 30:\n        a, b = b, a + b\n        n -= 1\n    return b\n\n\n### 실행 ###\nstair_while()\n\n### 출력 ###\n# N = 4\n# 5\n```\n\n`while`문을 사용한 경우 파이썬의 값 교환방식을 사용하여 주어진 범위의 `n`을 만족할 경우에 반복문을 유지하도록 하였다. 그리고 `n`의 값에서 `1`씩 빼준다. 피보나치 수열의 규칙에 따라, 직전 두 경우의 수의 합을 반환하므로 `b`를 리턴해준다.\n\n<br>\n\n### (2) for\n\n```python\n# for 사용\n\ndef stair_for():\n    n = int(input(\"N = \"))\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\n### 실행 ###\nstair_for()\n\n### 출력 ###\n# N = 10\n# 89\n```\n\n`for`문을 사용한 경우에는 입력받은 값을 숫자형으로 받은 후 초기 값을 각각 `0`, `1`로 설정했다. (~~피보나치 수열은 규칙상 시작하는 두 개의 수가 필요하다.~~) 그리고 `n`번만큼 반복문을 돌고 난 후 `b`의 값을 리턴해준다.\n\n<br>\n\n### (3) recursive function\n\n```python\n# recursive 사용\n\ndef recursive08():\n    n = int(input(\"N = \"))\n    def stair_recursive(n):\n        if n == 0 or n == 1:\n            return 1\n        r = stair_recursive(n - 1) + stair_recursive(n - 2)\n        return r\n    return stair_recursive(n)\n\n\n### 실행 ###\nrecursive08()\n\n### 출력 ###\n# N = 10\n# 89\n```\n\n재귀방식을 사용한 경우에는 `n`을 숫자형으로 받았다. 피보나치 수열에서 얻을 수 있는 점화식을 사용하여 값을 리턴한다. 피보나치 수열을 재귀로 푸는 경우에는 탈출조건이 `n = 1`, `n = 0`으로 2개이므로 각각의 경우에 `1`을 반환하여 돌아오면서 계산을 마치도록 하였다.\n\n<br>\n\n## 실행속도 측정해보기\n\n```python\n# 작성한 메서드를 10,000,000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.\n\n\n# (1) while\navg(bin_while)\n# 2.5879223152733175\n\n# (2) for\navg(bin_for)\n# 2.605831767170457\n\n# (3) recursive\navg(recursive07)\n# 2.621976392198121\n```\n\n<br>\n\n---\n\n## 마치며 : 피보나치 수열의 값을 재귀로 구할 때\n\n재귀로 풀 때는 값이 커질 수록 반복으로 푼 방식과 비교했을 때 실행속도에 큰 차이가 났다. 즉, 재귀의 경우에는 입력값이 커지면 커질수록 실행속도가 어마어마하게 증가한다. 왜 그럴까?\n\n앞서 구현해놓은 `recursive08()`에 입력값을 5라고 주자. 그러면 해당 메서드는 다음과 같은 계산을 실행한다.\n\n```python\n# 편의상 재귀함수를 fib()로 표현한다.\n# fib(5)를 탈출조건을 만족할 때까지 풀어나가면 다음과 같다.\n\nfib(5)\n= fib(4) + fib(3)\n= fib(3) + fib(2) + fib(2) + fib(1)\n= fib(2) + fib(1) + fib(1) + fib(0) + fib(1) + fib(0) + fib(0) + fib(-1)\n= fib(1) + fib(0) + fib(1) + fib(1) + fib(0) + fib(1) + fib(0) + fib(0) + fib(-1)\n```\n\n`fib(5)`를 구하는 데에 `fib(2)`를 3번이나 독립적으로 계산해서 구한다. 반복문을 사용할 경우 경우의 수가 많아봤자 `O(n)`번인 반면, 재귀를 사용하면 시간복잡도가 `O(2^(n/2))` 까지 증가한다. 또 입력값에서 탈출조건을 만날 때까지 연산해야 하는 재귀 함수가 2개이다. **해당 값은 각각의 조건을 거슬러 내려갈 때마다 탈출 조건을 만날 때까지 연산한 후 다시 자신을 호출하게 되므로 작은 입력값을 줄 때도 시간이 오래 걸리게 되는 것이다.**\n\n그렇기 때문에 피보나치 수열의 경우에는 반복문을 사용하여 값을 구하는 것이 재귀를 사용한 것보다 훨씬 효율적이라고 할 수 있다.\n\n<br>\n","excerpt":"8번은 한번에 계단을 오르는 갯수가 한정되어 있을 때 입력받은 계단의 수를 오르는 경우의 수를 구하는 문제이다. 해당 문제 또한 ,  그리고  재귀방식을 사용하여 풀어보았다. 문제 8) 계단 오르기 해당 문제는 계단의 수()가 증가할 때 그 경우의 …","fields":{"slug":"/recursion_08/"},"frontmatter":{"date":"Sep 25, 2017","title":"Python _ Recursion8. 계단 오르기","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n7번은 이진수로 구성된 16자리 이하의 숫자를 입력받은 후, 입력받은 숫자에 등장하는 1의 총 갯수를 구하는 문제이다. 해당 문제 또한 `for`, `while`, 그리고 재귀방식을 사용하여 풀어보았다.\n\n<br>\n\n## 문제 7) 이진수의 1의 개수 출력\n\n```\n문제 7. 이진수의 1의 개수 출력\n\n사용자에게 이진수를 입력 받고, 1이 등장하는 개수를 출력하는 프로그램을 재귀함수로 구현\n이진수는 16자리까지 입력가능함\n\n1. Input the number : 1111\n      4\n2. Input the number : 110000111\n      5\n3. Input the number : 1111111111\n      10\n4. Input the number : 1\n      1\n```\n\n<br>\n\n## 코드 및 풀이\n\n### (1) while\n\n```python\n# while 사용\n\ndef bin_while():\n    n = str(input(\"Input the number : \"))\n    ln = len(n)\n    sum_ = 0\n    while ln > 0:\n        if ln >= 16:\n            return \"Too long!\"\n        elif n[0] == '1':\n            sum_ += 1\n        ln -= 1\n        n = n[1:]\n    return sum_\n\n\n### 실행 ###\nbin_while()\n\n### 출력 ###\n# Input the number : 11010101111\n# 7\n```\n\n`while`문을 사용한 경우 `ln`에 입력받은 이진수(`n`)의 길이를 할당한 후 `ln`이 `0`보다 클 때까지만 반복문을 실행하도록 하였다.\n\n그리고 문제에서 주어진 범위를 적용하여 예외처리를 해준 후 `n`의 첫번째 인덱스 값을 슬라이싱하면서 값이 해당 인덱스의 값이 `1`이면 갯수를 세기 위해 `0`으로 할당한 `sum_` 변수에 `1`씩 더하도록 하였다. 그리고 반복문이 끝난 후 `sum_`을 리턴해주었다.\n\n<br>\n\n### (2) for\n\n```python\n# for 사용\n\ndef bin_for():\n    n = str(input(\"Input the number : \"))\n    sum_ = 0\n    for i in n:\n        if int(i) == 1:\n            sum_ += 1\n    return sum_\n\n\n### 실행 ###\nbin_for()\n\n### 출력 ###\n# Input the number : 11010101111\n# 7\n```\n\n`for`문을 사용한 경우에는 `n`을 문자열로 입력받은 후 반복문을 돌면서 각 자라의 값이 `1`일 때만 `sum_`에 `1`을 더해주었다. 그리고 `while`문과 동일하게 `sum_`을 리턴한다.\n\n<br>\n\n### (3) recursive function\n\n```python\n# recursive 사용\n\ndef recursive07():\n    n = str(input(\"Input the number : \"))\n\n    def bin_recursive(n):\n        if len(n) < 1:\n            return 0\n        r = bin_recursive(n[1:])\n        if n[0] == '1':\n            return 1 + r\n        return r\n    return bin_recursive(n)\n\n\n### 실행 ###\nrecursive07()\n\n### 출력 ###\n# Input the number : 11010101111\n# 7\n```\n\n재귀방식을 사용한 경우에는 `n`을 문자열로 받았다. 그리고 `n[0]`의 값이 `1`일 때 첫번째 값을 제외한 문자열에 다시 재귀를 적용하고 `1`을 더해주는 방식으로 규칙을 찾았다. 만약 `n[0]`의 값이 `1`이 아닌 경우에는 `1`을 더해주지 않고 그대로 재귀식을 반환해주었다.\n\n<br>\n\n## 실행시간 측정해보기\n\n```python\n# 작성한 메서드를 100000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.\n\n\n# (1) while\navg(bin_while)\n# 0.0221393486863235\n\n# (2) for\navg(bin_for)\n# 0.02261209048447199\n\n# (3) recursive\navg(recursive07)\n# 0.023148359468905255\n```\n\n<br>\n","excerpt":"7번은 이진수로 구성된 16자리 이하의 숫자를 입력받은 후, 입력받은 숫자에 등장하는 1의 총 갯수를 구하는 문제이다. 해당 문제 또한 , , 그리고 재귀방식을 사용하여 풀어보았다. 문제 7) 이진수의 1의 개수 출력 코드 및 풀이 (1) while…","fields":{"slug":"/recursion_07/"},"frontmatter":{"date":"Sep 24, 2017","title":"Python _ Recursion7. 이진수의 1의 개수 출력","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n6번은 주어진 범위 안에서 입력받은 숫자의 각 자릿수를 더하는 문제이다. 해당 문제는 스트링의 인덱싱과 슬라이싱 성질을 사용하여 풀이하였다. 또, `for`, `while`, 그리고 `recursive` 방식을 사용하여 풀어보았다.\n\n<br>\n\n## 문제 6) 숫자의 자릿수의 합\n\n```\n문제 6. 숫자의 자릿수의 합\n사용자에게 정수 N(0 < N <= 1,000,000)을 입력받고, N의 자릿수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. Input the number : 123456\n    21\n2. Input the number : 10000000\n    1\n3. Input the number : 6666\n    24\n4. Input the number : 119\n    11\n```\n\n<br>\n\n## 코드 및 풀이\n\n### (1) while\n\n```python\n# while 사용\n\ndef digit_sum_while():\n    n = str(input(\"Input the number : \"))\n    sum_ = 0\n    ln = len(n)\n    while ln > 0 and int(n) <= 1000000:\n        sum_ += int(n[ln - 1])\n        ln -= 1\n    return sum_\n\n\n### 실행 ###\ndigit_sum_while()\n\n### 출력 ###\n# Input the number : 1211\n# 5\n```\n\n`n`의 값을 문자열로 받은 후 `n`의 길이를 `ln`에 할당한다. `ln`의 값이 `0`보다 크고 `n`이 주어진 값(1,000,000)보다 작을 경우에는 while문을 진행한다. 이 때, 미리 선언해놓은 `sum_`에 n의 각 인덱스의 값들을 더하고 `ln`을 `1`씩 감소시킨다.  \n\n<br>\n\n### (2) for\n\n```python\n# for 사용\n\ndef digit_sum_for():\n    n = str(input(\"Input the number : \"))\n    sum_ = 0\n    for i in n:\n        sum_ += int(i)\n    return sum_\n\n\n### 실행 ###\ndigit_sum_for()\n\n### 출력 ###\n# Input the number : 1211\n# 5\n```\n\n`for`문을 사용하는 경우에는 훨씬 간단하다. 입력값을 문자열로 받은 후 미리 선언해놓은 `sum_`에 각 인덱스의 값을 더해주고 해당 값을 리턴해주면 된다.\n\n<br>\n\n### (3) recursive function\n\n```python\n# recursive 사용\n\ndef recursive06():\n    n = str(input(\"Input the number : \"))\n\n    def digit_sum_recursive(n):\n        if n[0] == n:\n            return int(n)\n\n        r = digit_sum_recursive(n[:-1])\n        return int(n[-1]) + r\n    return digit_sum_recursive(n)\n\n\n### 실행 ###\nrecursive06()\n\n### 출력 ###\n# Input the number : 1211\n# 5\n```\n\n재귀를 사용한 경우 먼저 `n`을 스트링 값으로 받은 후 1의 자리 수를 계속 더하면서 문자열의 마지막 값을(`n[-1]`) 제외한 문자열에 계속 재귀함수를 적용한다.\n\n그리고 `n`의 길이가 1일 때, 즉 n의 첫번째 인덱스 값이 `n` 자체가 될 때 해당 값을 반환하여 탈출조건을 설정하였다.\n\n<br>\n\n## 실행시간 측정해보기\n\n```python\n# 작성한 메서드를 100000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.\n\n\n# (1) while\navg(digit_sum_while)\n# 0.022326416132273152\n\n# (2) for\navg(digit_sum_for)\n# 0.023095118565834127\n\n# (3) recursive\navg(recursive06)\n# 0.0244320781348506\n```\n\n<br>\n","excerpt":"6번은 주어진 범위 안에서 입력받은 숫자의 각 자릿수를 더하는 문제이다. 해당 문제는 스트링의 인덱싱과 슬라이싱 성질을 사용하여 풀이하였다. 또, , , 그리고  방식을 사용하여 풀어보았다. 문제 6) 숫자의 자릿수의 합 코드 및 풀이 (1) whi…","fields":{"slug":"/recursion_06/"},"frontmatter":{"date":"Sep 23, 2017","title":"Python _ Recursion6. 숫자의 자릿수의 합","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n유저 관련 API는 웹서비스에 가입하는 사용자 정보를 저장하고 이 정보를 사용하여 서비스를 이용할 수 있는 권한을 제어한다. 커스텀으로 만든 유저 모델과 매니저에 대해 정리하였다.\n\n<br>\n\n## 커스텀 유저 모델 - MyUser\n\n유저 모델은 커스텀으로 `AbstractBaseUser`를 상속받아 구현하였다.\n\n### AbstractUser와 AbstractBaseUser의 차이\n\n장고에서 유저 모델을 정의할 때 상속받을 수 있는 클래스는 `AbstractUser`와 `AbstractBaseUser` 두 가지가 있다.\n\n`AbstractUser`는 장고가 제공하는 완벽한 추상 클래스로, 사용자 객체를 생성하는데 필요한 필드들을 대부분 갖추고 있다. 이를 상속받아 부가적으로 필요한 프로필 관련 필드와  메서드를 추가하여 사용한다.\n\n<br>\n\n`AbstractBaseUser`의 경우에는 인증 기능만을 가지고 있는 추상 클래스로 필드가 따로 정의되어 있지 않다. 가지고 있는 필드는 `password`와 `last_login` 뿐이다. 따라서 해당 추상클래스를 상속받아 유저 서브클래스를 만들 경우에는 필드를 하나하나 정의해주어야 한다.\n\n예를 들어 가장 기본적인 필드인 `username`,`nickname` 등의 필드도 정의되어 있지 않으며, 어떤 필드에 반드시 값을 적어주어야하는지(`required` 설정) 등을 따로 관리해주어야 한다. 또 유저를 어떻게 저장할 것인지를 설정해주는 모델 매니저도 존재하지 않기 때문에 해당 부분을 직접 만들어 커스터마이징할 수 있다.\n\n<br>\n\n### 언제 무엇을?\n\n만약 장고의 기존 인증 설정을 바꾸고 싶다면 `AbstractBaseUser`를 사용하면 된다. 반면에 기존에 유저모델과 데이터가 존재하고 몇몇 기능만 상속받아 사용하고 싶다면 `AbstractUser`를 상속받아 사용하는 것이 편하다.  \n\n<br>\n\n### `AbstractBaseUser`를 상속받은 MyUser 모델\n\n```python\n# 전체서비스 내 커스텀유저 모델\nclass MyUser(AbstractBaseUser):\n    # 장고, 페이스북 로그인 타입 선택하는 필드.\n    USER_TYPE_DJANGO = 'django'\n    USER_TYPE_FACEBOOK = 'facebook'\n    USER_TYPE_CHOICES = (\n        ('django', 'Basic Login'),\n        ('facebook', 'Facebook Login'),\n    )\n\n    # 장고, 페이스북 로그인 유저를 구분하는 필드\n    user_type = models.CharField(\n        max_length=20,\n        choices=USER_TYPE_CHOICES,\n        default=USER_TYPE_DJANGO,\n    )\n\n    # 회원가입시 입력한 사용자의 ID\n    username = models.CharField(\n        max_length=100,\n        unique=True\n    )\n\n    # 사용자의 이름을 저장하는 필드. 회원가입시 등록\n    name = models.CharField(\n        max_length=100,\n    )\n\n    # 사용자의 이메일을 저장하는 필드. 페이스북 사용자용\n    email = models.EmailField(default=\"\")\n\n    # 사용자 프로필이미지를 저장하는 필드.\n    img_profile = CustomImageField(\n        upload_to='member',\n        default='member/basic_profile.png',\n        blank=True\n    )\n\n    # AbstractBaseUser를 상속받음으로써 정의해줘야하는 bool 필드들\n    is_staff = models.BooleanField(default=False)\n    is_admin = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    is_superuser = models.BooleanField(default=False)\n\n    # custom manager 설정\n    objects = MyUserManager()\n\n    EMAIL_FIELD = 'username'\n    USERNAME_FIELD = 'username'\n    REQUIRED_FIELDS = ['name', ]\n\n    def __str__(self):\n        return self.name if self.name else self.username\n\n    @property\n    def is_staff(self):\n        \"\"\"일반 사용자 or 스태프 권한\"\"\"\n        return self.is_admin\n\n    def has_module_perms(self, app_label):\n        \"\"\"user가 주어진 app_label에 해당하는 권한이 있는지, has_perm과 비슷\"\"\"\n        if self.is_active and self.is_superuser:\n            return True\n        return auth_models._user_has_module_perms(self, app_label)\n\n    def has_perm(self, perm, obj=None):\n        if self.is_active and self.is_superuser:\n            return True\n        return auth_models._user_has_perm(self, perm, obj)\n\n    # AbstractBaseUser에는 존재하지 않으므로 따로 선언해줌.\n    def user_permissions(self):\n        return self._user_permissions\n\n    # 장고 admin 이름출력시 필요한 메서드. AbstractBaseUser에는 없어서 따로 정의해줌.\n    def get_full_name(self):\n        return self.username\n\n    def get_short_name(self):\n        return self.username\n```\n\n<br>\n\n**`get_full_name()`과 `get_short_name()`**\n\n특히, `get_full_name()`메서드와 `get_short_name()` 메서드는 `AbstractBaseUser`를 사용할 때 쉽게 간과하는 부분이다. 위의 두 메서드는 `AbstractBaseUser` 클래스 내에 다음과 같이 정의되어 있다.\n\n```python\n    def get_full_name(self):\n        raise NotImplementedError('subclasses of AbstractBaseUser must provide a get_full_name() method')\n\n    def get_short_name(self):\n        raise NotImplementedError('subclasses of AbstractBaseUser must provide a get_short_name() method.')\n```\n\n즉, 따로 정의되어 있지 않고 없으면 에러메세지만 반환한다. 해당 메서드들은 관리자 페이지에서 로그인할 경우 이름을 렌더해줄 때 사용된다.\n\n만약 두 메서드를 오버라이드 하지 않은 모델을 정의하고 관리자를 생성하여 관리자 페이지에 로그인할 경우 에러가 발생한다. 따라서 위의 `MyUser` 모델에 정의해주었다.\n\n<br>\n\n### 커스텀 유저모델 매니저 정의하기\n\n`AbstractBaseUser`에서는 ORM을 사용할 수 있는 objects 정의가 생략되어 있다. 따라서 유저를 생성할 수 있는 `create_user()`, `create_superuser()` 등을 따로 정의해주고 해당 매니저를 사용할 것임을 모델 안에 선언해주어야 한다.\n\n```python\n# 커스텀 사용자 생성 매니저\nclass MyUserManager(BaseUserManager):\n    def create_user(self, username, name, email=None, password=None, **extra_fields):\n        \"\"\"\n        일반사용자 생성 메서드\n        \"\"\"\n        try:\n            user = self.model(\n                user_type=User.USER_TYPE_DJANGO,\n                username=username,\n                name=name,\n                email=email if email else \"\",\n            )\n            extra_fields.setdefault('is_staff', False)\n            extra_fields.setdefault('is_superuser', False)\n            user.set_password(password)\n            user.is_active = True\n            user.save()\n            return user\n        except ValidationError:\n            raise ValidationError({'detail': 'Enter a proper Email Account'})\n\n    def create_superuser(self, username, name, email=None, password=None, **extra_fields):\n        \"\"\"\n        관리자 생성 메서드\n        \"\"\"\n        try:\n            superuser = self.create_user(\n                user_type=User.USER_TYPE_DJANGO,\n                username=username,\n                name=name,\n                password=password,\n            )\n            superuser.is_admin = True\n            superuser.is_superuser = True\n            superuser.is_active = True\n            superuser.save()\n            return superuser\n        except ValidationError:\n            raise ValidationError({\"detail\": \"Enter a proper Email Account\"})\n```\n\n<br>\n\n---\n\n## 마치며\n\n`AbstractBaseUser`를 사용하면 정의 및 오버라이드해줘야 하는 요소가 많지만 그만큼 자유도가 높은 사용자 모델을 만들 수 있다.\n\n`AbstractUser`를 사용하면 장고에서 제공해주는 필드와 인증 관련 메서드들로 쉽게 유저를 생성할 수 있는 대신 자유도는 떨어진다.\n\n유저를 생성, 관리하는 데 필요한 필드들이 무엇인지 구상해보고 필요에 따라 선택하여 사용하는 것이 좋겠다.\n\n<br>\n","excerpt":"유저 관련 API는 웹서비스에 가입하는 사용자 정보를 저장하고 이 정보를 사용하여 서비스를 이용할 수 있는 권한을 제어한다. 커스텀으로 만든 유저 모델과 매니저에 대해 정리하였다. 커스텀 유저 모델 - MyUser 유저 모델은 커스텀으로 를 상속받아…","fields":{"slug":"/web-2-인증API제작하기_01/"},"frontmatter":{"date":"Sep 22, 2017","title":"Web _ 2.1 인증 API <1부> - 유저 모델과 매니저","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n웹서비스에서 사이트맵을 제작할 경우 사용자가 클릭하여 바로 특정 페이지로 이동할 수 있도록 하는 네비게이션이 필요하다. 이번에는 <a href=\"#\" target=\"_blank\">2.1 라우트 설정하기 1편</a> 포스트에 이어 SPA에서 네비게이션을 설정하는 방법에 대해 알아보자.\n\n<br>\n\n## 네비게이션 만들기\n\n먼저 내비게이션을 사용할 수 있도록 `App.vue` 파일에 등록해준다.\n\n```html\n<!-- App.vue -->\n\n<template>\n  <div id=\"app\">\n    <navigation></navigation>\n    <app-nav></app-nav>  <!--네비게이션의 템플릿(nav)가 들어온다.-->\n    <router-view></router-view>\n  </div>\n</template>\n```\n\n```js\n// App.vue\n\n<script>\nimport navigation from './components/navigation'\nexport default {\n  name: 'app',\n  components: {\n    appNav: navigation\n  }\n}\n</script>\n```\n\n기존 html에서는 `li`태그, `a`태그를 사용해서 태그 내의 텍스트에 경로를 할당해주었다.\n\n```html\n<!-- 예시 -->\n\n<li><a href=\"/login\">로그인</a></li>\n```\n\n<br>\n\n### `router-link`\n\n**위의 기존 방식은 서버와의 통신을 통해 페이지를 렌더해주므로 SPA의 조건을 충족하지 않는다.** 따라서 아래와 같이 `router-link`를 사용하여 지정해준 URI로 이동하게끔 경로를 설정해준다. 그러면 위에서 등록해준 대로 `App.vue`의 `<app-nav>` 태그 안에 아래의 li 요소가 렌더된다.\n\n```html\n<nav class='gnb'>\n  <ul class=\"menu-bar\">\n    <li><router-link to=\"/login\">로그인</router-link></li>\n    <li><router-link to=\"/signup\">회원가입</router-link></li>\n  </ul>\n</nav>\n```\n\n위와 같이 지정해줄 경우, 페이지에서 이동하지 않고 원하는 경로의 템플릿을 렌더해줄 수 있다.\n\n<br>\n\n`router-link`는 라우터를 지원하는 앱을 사용할 때 컴포넌트들의 네비게이션을 설정할 수 있게 해주는 컴포넌트이다. 해당 컴포넌트는 다음과 같이 쓰인다.\n\n```html\n<router-link to=\"경로(uri)\" tag=\"원하는 태그. 기본은 a태그\" active-class=\"활성화시 현재페이지 여부를 나타내줌\">문자열</router-link>\n\n<!-- 예시 : to는 필수로 지정해야 한다.-->\n<router-link to=\"/login\">로그인</router-link>\n\n<!-- 위는 다음과 같이 렌더링 된다. -->\n<a href=\"/login\">로그인</a>\n\n<!-- tag 값을 주면 해당 태그로 렌더링된다. -->\n<router-link to=\"/login\" tag=\"li\">로그인</router-link>\n\n<!-- 위는 다음과 같이 렌더링 된다. -->\n<li><a href=\"/login\">로그인</a></li>\n```\n\n<a href=\"https://router.vuejs.org/kr/api/router-link.html\" target=\"_blank\">라우터 링크 더 알아보기</a>\n\n<br>\n\n브라우저에서 현재 렌더된 페이지가 어떤 것인지 `class`에 동적으로 스타일을 표시하고싶은 경우에는 `router-link`의 옵션인 `active-class` 속성을 모든 `li` 요소에 지정한 후 해당 선택자에 css 속성을 주면 된다.\n\n```html\n<!-- 다음 링크는 `/` 에서만 active 된다. -->\n<router-link to=\"/\" exact></router-link>\n```\n\n`exact`는 동일한 경로에 해당하는 uri에 대해 동일한 클래스를 적용해준다. `li` 요소 중 가장 상단의 태그에만 `exact`를 지정해주면 된다.\n\n\n```html\n<template>\n  <router-link to=\"/login\" tag=\"li\" active-class=\"current-page\" exact><a href>로그인</a></router-link>\n  <router-link to=\"/signup\" tag=\"li\" active-class=\"current-page\"><a href>회원가입</a></router-link>\n</template>\n```\n\n이 때 `router-link` 컴포넌트가 uri를 연결해주므로 `a`태그의 `href`는 지정해 줄 필요가 없다.\n\n<br>\n","excerpt":"웹서비스에서 사이트맵을 제작할 경우 사용자가 클릭하여 바로 특정 페이지로 이동할 수 있도록 하는 네비게이션이 필요하다. 이번에는 2.1 라우트 설정하기 1편 포스트에 이어 SPA에서 네비게이션을 설정하는 방법에 대해 알아보자. 네비게이션 만들기 먼저…","fields":{"slug":"/web-2.2-라우트설정하기_02/"},"frontmatter":{"date":"Sep 22, 2017","title":"Web _ 2.3 Vue.js를 사용하여 라우트 설정하기 <2부>","tags":["Django","Project","Web development","Vue.js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n문제 5번은 입력받은 숫자를 거꾸로 출력하는 문제이다. 파이썬에서는 리스트 인덱싱과 슬라이싱을 사용하여 반복문을 사용하지 않고 풀 수도 있다. 해당 포스트에서는 리스트 인덱싱과 반복문(`for`, `while`), 그리고 재귀를 사용하여 풀어보았다.\n\n<br>\n\n## 문제 5) 숫자를 거꾸로 출력\n\n<br>\n\n```\n문제 5. 숫자를 거꾸로 출력\n\n사용자에게 정수 N(0 < N <= 1,000,000)을 입력받고, N을 거꾸로 출력하는 프로그램\n1. Input the number : 123456\n    654321\n2. Input the number : 2584697\n    7964852\n3. Input the number : 649731\n    137946\n4. Input the number : 119911\n    119911\n```\n\n<br>\n\n## 코드 및 풀이\n\n### (1) list indexing\n\n```python\n# 리스트 인덱싱 사용\n\ndef backward_basic():\n    n = input(\"Input the number(0 < n <=1,000,000) : \")\n    if int(n) > 0 and int(n) <= 1000000:\n        print(n[::-1])\n    else:\n        return \"Input the number in given range.\"\n\n\n### 실행 ###\nbackward_basic()\n\n### 출력 ###\n# Input the number(0 < n <=1,000,000) : 1234\n# 4321\n```\n\n리스트 인덱싱을 사용하여 주어진 범위의 숫자를 문자열로 입력받은 후 리스트 인덱싱을 통해 숫자를 거꾸로 출력하면 된다. 범위를 벗어날 경우에는 예외처리를 해주었다.\n\n<br>\n\n### (2) while\n\n```python\n# while 사용\n\ndef backward_while():\n    n = input(\"Input the number(0 < n <=1,000,000) : \")\n    if int(n) >= 1000000:\n        return \"Input the number in given range.\"\n    i = 0\n    ln = len(n)\n    while i < ln:\n        print(n[ln-i-1], end=\"\")\n        i += 1\n\n### 실행 ###\nbackward_while()\n\n### 출력 ###\n# Input the number(0 < n <=1,000,000) : 1234\n# 4321\n```\n\nwhile문을 사용하여 `i`가 주어진 문자열의 길이를 넘지 않을 동안 마지막 인덱스의 값부터 출력하고 `i`를 `1`만큼 증가시켰다. 그리고 `print()` 메서드 안에서 `end=\"\"`인자를 사용하여 반복문 종료까지의 값이 한 줄로 출력되도록 처리해주었다.\n\n<br>\n\n### (3) for\n\n```python\n# for 사용\n\ndef backward_for():\n    n = input(\"Input the number(0 < n <=1,000,000) : \")\n    ln = len(n)\n    if int(n) >= 1000000:\n        return \"Input the number in given range.\"\n    for a in range(ln):\n        print(n[ln - a - 1], end=\"\")\n\n\n### 실행 ###\nbackward_for()\n\n### 출력 ###\n# Input the number(0 < n <=1,000,000) : 1234\n# 4321\n```\n\nwhile문을 썼던 것과 동일한 방법으로 풀었다. 사용하여 입력받은 숫자의 길이만큼 반복문을 돌면서 n의 마지막값부터 출력한다.\n\n<br>\n\n### (4) recursive function\n\n재귀를 사용하여 두 가지 방법으로 풀어보았다.\n\n```python\n# 재귀 사용\n\ndef recursive05():\n    num = str(input(\"Input the number : \"))\n    ln = len(num)\n\n    def backward_recursive01(num):\n        if num[0] == num:\n            return num\n\n        return num[-1] + backward_recursive01(num[:-1])\n\n    def backward_recursive02(num):\n        if num[0] == num:\n            return num\n\n        return backward_recursive02(num[1:]) + num[0]\n\n    print('(1) : ', backward_recursive01(num))\n    print('(2) : ', backward_recursive02(num))\n```\n\n<br>\n\n**backward_recursive01(num) 이해하기**\n\n`backward_recursive01(num)`는 입력받은 숫자의 마지막 인덱스 값을 앞으로 가져오고 마지막 인덱스 값을 제외한 문자열을 계속해서 반환하는 방식을 반복한다. 예를 들어, `12345`를 입력했을 경우 다음과 같은 방식으로 리턴값을 반환한다.\n\n```python\nnum[-1] + backward_recursive01(num[:-1])\n\n# output = 54321\n# ln = 5일 때 5 + 1234\n# ln = 4일 때 4 + 123\n# ln = 3일 때 3 + 12\n# ln = 2일 때 2 + 1\n# ln = 1일 때 1        탈출조건 충족\n# input = 12345\n```  \n\n탈출조건의 경우에는 문자열 길이가 `0`이 될 경우 None값을 반환하기 때문에 적절하지 않으므로  `num[0]`의 값이 `num`과 같을 경우(1글자) 그대로 `num`값을 리턴하는 방식으로 종료시켜주었다.\n\n<br>\n\n**backward_recursive02(num) 이해하기ㄴ**\n\n`backward_recursive02(num)`는 위의 방식과 반대방향으로 동작한다. 입력받은 숫자의 첫번째 인덱스 값을 마지막 순서에 더하고 0번째 인덱스 값을 제외한 문자열을 계속해서 반환하는 방식을 반복한다. 예를 들어 `12345`를 입력했을 경우 다음과 같은 방식으로 리턴값을 반환한다.\n\n```python\nbackward_recursive02(num[1:]) + num[0]\n\n# output = 54321\n# ln = 5일 때 5432 + 1\n# ln = 4일 때 543 + 2\n# ln = 3일 때 54 + 3\n# ln = 2일 때 5 + 4\n# ln = 1일 때 5       탈출조건 충족   \n# input = 12345\n```\n\n<br>\n\n## 실행시간 측정해보기\n\n메서드의 실행시간을 측정하는 `runtime()`를 여러 번 실행하여 실행시간의 평균값을 측정하였다.\n\n```python\n# 작성한 메서드를 100000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.\n\n\n# (1) 리스트 슬라이싱\navg(backward_basic)\n# 0.024862601538188756   \n\n# (2) while\navg(backward_while)\n# 0.024396212422288954\n\n# (3) for\navg(backward_for)\n# 0.023717234143987298\n\n# (4) recursive\navg(recursive05)\n# 0.026360990363173187\n```\n\n<br>\n","excerpt":"문제 5번은 입력받은 숫자를 거꾸로 출력하는 문제이다. 파이썬에서는 리스트 인덱싱과 슬라이싱을 사용하여 반복문을 사용하지 않고 풀 수도 있다. 해당 포스트에서는 리스트 인덱싱과 반복문(, ), 그리고 재귀를 사용하여 풀어보았다. 문제 5) 숫자를 거…","fields":{"slug":"/recursion_05/"},"frontmatter":{"date":"Sep 20, 2017","title":"Python _ Recursion5. 숫자를 거꾸로 출력","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n장고는 파이썬으로 쉽게 웹개발에 필요한 구조와 클래스를 제공하는 프레임워크이다.(<a href=\"http://juliahwang.kr/django/2017/09/07/%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0.html\" target=\"_blank\">더 읽어보기 - 1편. 장고 프로젝트 세팅하기</a>) 이번 포스트에서는 투스쿱 도서 3장을 정리하면서 장고의 프로젝트를 구성하는 다양한 방법에 대해 소개하고자 한다.\n\n<br>\n\n\n## 장고에서 제공하는 프로젝트 레이아웃\n\n장고에서 프로젝트 및 앱을 생성하는 명령어는 다음과 같다.(~~장고가 설치되었다는 전제 하에 실행한다~~)\n\n```powershell\n# 장고가 설치된 위치에서\n\n$ django-admin startproject [project-name]\n$ cd [project-name]   # 생성된 프로젝트 폴더 내로 이동\n$ django-admin startapp [app-name]\n```\n\n위의 명령어를 실행할 경우 다음과 같은 프로젝트 구조가 만들어진다.\n\n\n```powershell\n$ tree .\n.\n└── bookpractice  # [repository_root]\n    ├── README.md\n    └── django_app  # [django_project_root]  \n        ├── config  # [config_root]\n        │   ├── __init__.py\n        │   ├── settings.py\n        │   ├── urls.py\n        │   └── wsgi.py\n        ├── flavors\n        │   ├── __init__.py\n        │   ├── admin.py\n        │   ├── apps.py\n        │   ├── migrations\n        │   │   └── __init__.py\n        │   ├── models.py\n        │   ├── tests.py\n        │   ├── urls.py\n        │   └── views.py\n        └── manage.py\n```\n\n프로젝트 구조를 단순화하면 다음과 같은 루트폴더 구조가 생성되는데, 하나씩 살펴보자.\n\n```powershell\n# [repository_root]/\n  # [django_project_root]/\n    # [configuration_root]/\n```\n\n<br>\n\n### 최상위 레벨 : 저장소 루트 (repository_root)\n\n최상위 루트 디렉토리는 프로젝트의 최상위 절대 루트이다. 해당 위치에는 다음과 같은 파일들이 위치한다.\n\n- git 폴더 및 .gitignore\n- requirements.txt\n- 배포용 설정파일\n- README.md\n- 프로젝트 루트폴더 등\n\n\n<br>\n\n### 두번째 레벨 : 장고 프로젝트 루트 (django_project_root)\n\n두 번째 레벨은 장고 프로젝트에 필요한 모든 소스코드가 위치하는 디렉토리다. 프로젝트를 생성할 때 명령어를 구분해보면 다음과 같다.\n\n```powershell\n$ django-admin startproject [project-name] .\n# 현재 위치에 바로 프로젝트 구조를 생성한다.\n# 즉, manage.py와 프로젝트 폴더가 현재 경로에 설치된다.\n\n├── manage.py\n├── mysite\n   ├── __init__.py\n   ├── settings.py\n   ├── urls.py\n   └── wsgi.py\n```\n\n```powershell\n$ django-admin startproject [project-name]\n# 현재 위치에 폴더를 생성하여 내부에 프로젝트 루트폴더 및 manage.py를 설치해준다.\n\n├── mysite2\n    ├── manage.py\n    └── mysite2\n        ├── __init__.py\n        ├── settings.py\n        ├── urls.py\n        └── wsgi.py\n```\n\n<br>\n\n### 세번째 레벨 : 설정 루트 (configuration_root)\n\n프로젝트의 기본 설정 파일들이 존재하는 디렉터리다. 그리고 기본이 되는 url들이 저장되는 `urls.py`도 있다. 해당 디렉토리는 반드시 유효한 파이썬 패키지로, `__init__.py`를 포함하고 있어야 한다.\n`startproject` 명령어를 실행할 경우 자동으로 생성되는 폴더이기도 하다.\n\n<br>\n\n## startproject 살펴보기\n\n앞서 살펴보았듯이 장고의 `startproject` 명령은 기본 장고 프로젝트 템플릿을 생성하고 바로 프로젝트 개발에 필요한 구조를 만들어준다. 도서에서는 직접 구조를 빌드하는 방법 이외에 저자가 직접 개발한 <a href=\"https://github.com/pydanny/cookiecutter-django\" target=\"_blank\">`cookiecutter`라는 패키지</a>를 소개하고 있어 한번 사용해보았다.\n\n<br>\n\n### cookiecutter 사용해보기\n\n쿠키커터가 하는 일은 세 가지이다.\n\n- 여러가지 설정 스크립트를 통해 설정 변수의 내용을 물어본다.\n- 입력된 값을 기반으로 프로젝트 표준 코드 구성에 필요한 파일을 제작한다.\n- 세팅, requirements, 초기문서, 테스트 환경 등을 지정할 수 있다.\n\n사용방법은 매우 간단하다. `pip` 명령어로 간단히 설치하고 깃헙 주소를 클론하는 방식으로 설치하면 된다.\n\n```powershell\n$ pip install \"cookiecutter>=1.4.0\"\n```\n\n설치가 완료되면 `cookiecutter`명령어를 사용하여 깃헙의 소스를 받아온다. 그리고는 프로젝트 구성에 필요한 스크립트가 자동으로 실행되어, 필요한 것만 `y`로 대답해주면 된다.\n\n```powershell\n$ cookiecutter https://github.com/pydanny/cookiecutter-django\nproject_name [Project Name]: django_app\nproject_slug [django_app]: icecream\nauthor_name [Daniel Roy Greenfeld]: julia\nemail [you@example.com]: qufskan9396@gmail.com\ndescription [A short description of the project.]: testing cookiecutter package\ndomain_name [example.com]: None\nversion [0.1.0]: 0.0.1\ntimezone [UTC]: asia/seoul\nuse_whitenoise [y]: n\nuse_celery [n]: y\nuse_mailhog [n]: n\nuse_sentry_for_error_reporting [y]: y\nuse_opbeat [n]: n\nuse_pycharm [n]: y\nwindows [n]: n\nuse_docker [n]: y\nuse_heroku [n]: n\nuse_elasticbeanstalk_experimental [n]: n\nuse_compressor [n]: n\nSelect postgresql_version:\n1 - 9.6\n2 - 9.5\n3 - 9.4\n4 - 9.3\n5 - 9.2\nChoose from 1, 2, 3, 4, 5 [1]: 2\nSelect js_task_runner:\n1 - Gulp\n2 - Grunt\n3 - None\nChoose from 1, 2, 3 [1]: 3\ncustom_bootstrap_compilation [n]: n\nSelect open_source_license:\n1 - MIT\n2 - BSD\n3 - GPLv3\n4 - Apache Software License 2.0\n5 - Not open source\nChoose from 1, 2, 3, 4, 5 [1]: 1\n```\n\n위의 세팅으로 만들어진 프로젝트 구조는 다음과 같다.\n\n```powershell\n$ tree .\n.\n├── CONTRIBUTORS.txt\n├── LICENSE\n├── README.rst\n├── compose\n│   ├── local\n│   │   └── django\n│   │       ├── Dockerfile\n│   │       ├── celery\n│   │       │   ├── beat\n│   │       │   │   └── start.sh\n│   │       │   └── worker\n│   │       │       └── start.sh\n│   │       └── start.sh\n│   └── production\n│       ├── caddy\n│       │   ├── Caddyfile\n│       │   └── Dockerfile\n│       ├── django\n│       │   ├── Dockerfile\n│       │   ├── celery\n│       │   │   ├── beat\n│       │   │   │   └── start.sh\n│       │   │   └── worker\n│       │   │       └── start.sh\n│       │   ├── entrypoint.sh\n│       │   └── gunicorn.sh\n│       └── postgres\n│           ├── Dockerfile\n│           ├── backup.sh\n│           ├── list-backups.sh\n│           └── restore.sh\n├── config\n│   ├── __init__.py\n│   ├── settings\n│   │   ├── __init__.py\n│   │   ├── base.py\n│   │   ├── local.py\n│   │   ├── production.py\n│   │   └── test.py\n│   ├── urls.py\n│   └── wsgi.py\n├── docs\n│   ├── Makefile\n│   ├── __init__.py\n│   ├── conf.py\n│   ├── deploy.rst\n│   ├── docker_ec2.rst\n│   ├── index.rst\n│   ├── install.rst\n│   ├── make.bat\n│   └── pycharm\n│       ├── configuration.rst\n│       └── images\n│           ├── 1.png\n|           ├── ...생략 ...\n│           └── issue2.png\n├── env.example\n├── icecream\n│   ├── __init__.py\n│   ├── contrib\n│   │   ├── __init__.py\n│   │   └── sites\n│   │       ├── __init__.py\n│   │       └── migrations\n│   │           ├── 0001_initial.py\n│   │           ├── 0002_alter_domain_unique.py\n│   │           ├── 0003_set_site_domain_and_name.py\n│   │           └── __init__.py\n│   ├── static\n│   │   ├── css\n│   │   │   └── project.css\n│   │   ├── fonts\n│   │   ├── images\n│   │   │   └── favicon.ico\n│   │   ├── js\n│   │   │   └── project.js\n│   │   └── sass\n│   │       ├── custom_bootstrap_vars.scss\n│   │       └── project.scss\n│   ├── taskapp\n│   │   ├── __init__.py\n│   │   └── celery.py\n│   ├── templates\n│   │   ├── 403_csrf.html\n│   │   ├── 404.html\n│   │   ├── 500.html\n│   │   ├── account\n│   │   │   ├── account_inactive.html\n│   │   │   ├── base.html\n│   │   │   ├── email.html\n│   │   │   ├── email_confirm.html\n│   │   │   ├── login.html\n│   │   │   ├── logout.html\n│   │   │   ├── password_change.html\n│   │   │   ├── password_reset.html\n│   │   │   ├── password_reset_done.html\n│   │   │   ├── password_reset_from_key.html\n│   │   │   ├── password_reset_from_key_done.html\n│   │   │   ├── password_set.html\n│   │   │   ├── signup.html\n│   │   │   ├── signup_closed.html\n│   │   │   ├── verification_sent.html\n│   │   │   └── verified_email_required.html\n│   │   ├── base.html\n│   │   ├── bootstrap4\n│   │   │   ├── field.html\n│   │   │   └── layout\n│   │   │       └── field_errors_block.html\n│   │   ├── pages\n│   │   │   ├── about.html\n│   │   │   └── home.html\n│   │   └── users\n│   │       ├── user_detail.html\n│   │       ├── user_form.html\n│   │       └── user_list.html\n│   └── users\n│       ├── __init__.py\n│       ├── adapters.py\n│       ├── admin.py\n│       ├── apps.py\n│       ├── migrations\n│       │   ├── 0001_initial.py\n│       │   └── __init__.py\n│       ├── models.py\n│       ├── tests\n│       │   ├── __init__.py\n│       │   ├── factories.py\n│       │   ├── test_admin.py\n│       │   ├── test_models.py\n│       │   ├── test_urls.py\n│       │   └── test_views.py\n│       ├── urls.py\n│       └── views.py\n├── local.yml\n├── manage.py\n├── production.yml\n├── pytest.ini\n├── requirements\n│   ├── base.txt\n│   ├── local.txt\n│   ├── production.txt\n│   └── test.txt\n├── setup.cfg\n└── utility\n    ├── install_os_dependencies.sh\n    ├── install_python_dependencies.sh\n    ├── requirements-jessie.apt\n    ├── requirements-trusty.apt\n    └── requirements-xenial.apt\n```\n\n사용해본 경험 상으로는 너무 많은 것이 만들어진 느낌이었다. 도서에서는 `cookiecutter-django`가 **원래 장고에서 제공하는 기본 구성보다 더 많은 것을 제공하기 위해 만들어진 패키지**라고 소개되어 있다.\n\n필요한 것이 많지 않은 프로젝트를 시작할 경우에는 장고가 제공하는 기본 프로젝트 구조에서 시작하여 빌드해나가는 것이 낫겠다는 생각이 들었다.\n\n대안 템플릿으로는 `django-kevin`이라는 패키지 또한 소개하고 있었는데, 해당 패키지의 제작자인 케빈 쉬는 도서의 저자가 개발한 `Two Scoops project`를 포크하여 장고 `1.8` 버전에 맞게 업데이트 했다고 한다. 이 패키지는 `npm`과 `grunt`를 사용하여 쿠키커터 패키지보다 좀더 설치과정이 길었다. 직접 사용하려면 <a href=\"https://github.com/imkevinxu/django-kevin\" target=\"_blank\">링크</a>를 클릭하여 진행하면 된다.\n\n<br>\n\n---\n\n## 마치며\n\n지금까지 소개한 장고 프로젝트 빌드 패키지 링크는 다음과 같다.\n\n- <a href=\"https://github.com/twoscoops/django-twoscoops-project\" target=\"_blank\">django-twoscoops-project</a>\n- <a href=\"https://github.com/pydanny/cookiecutter-django\" target=\"_blank\">cookiecutter-django</a>\n- <a href=\"https://github.com/imkevinxu/django-kevin\" target=\"_blank\">django-kevin</a>\n\n패키지를 사용하는 것에는 장단점이 있다. 손쉽게 프로젝트 구조를 생성하여 프로젝트 개발에만 집중할 수 있다는 점이 장점이라면, 제공하는 스크립트가 한정되어 있어 필요한 것을 추가해야한다거나 직접 빌드해볼 수 있는 연습을 충분히 하지 못할 수 있다는 단점도 존재한다.\n\n장고의 초심자들은 먼저 장고에서 제공하는 파일 구조를 익힌 다음 패키지를 사용해보는 것도 좋겠다.\n\n<br>\n","excerpt":"장고는 파이썬으로 쉽게 웹개발에 필요한 구조와 클래스를 제공하는 프레임워크이다.(더 읽어보기 - 1편. 장고 프로젝트 세팅하기) 이번 포스트에서는 투스쿱 도서 3장을 정리하면서 장고의 프로젝트를 구성하는 다양한 방법에 대해 소개하고자 한다. 장고에서…","fields":{"slug":"/2scoops-3-장고프로젝트구성하기/"},"frontmatter":{"date":"Sep 19, 2017","title":"BookReview > Two Scoops of Django _ 3장. 장고 프로젝트 구성하기","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n문제 4번은 재귀 함수를 구현할 때 가장 빈번하게 등장하는 `피보나치 수열`을 구현하는 문제다. 피보나치를 간단하게 설명하자면 다음과 같다. **0과 1로 시작하며(~~시작값은 달라질 수 있다~~)  다음 피보나치 수는 바로 앞의 두 피보나치 수의 합이 된다.** 이러한 규칙을 가지고 사용자가 입력한 값 `n`으로 `n번 째까지의 피보나치 수열` 출력하면 된다. 해당 문제도 각각 `for`, `while`, `recursive` 방식으로 풀어보았다.\n\n<br>\n\n## 문제 4) 피보나치 수열 출력\n\n```\n문제 4. Fibonacci 수열 출력\n N번째 Fibonacci 수열 값을 출력하는 프로그램을 재귀함수로 구현\n\n1. Input the number : 5\n    1 1 2 3 5\n2. Input the number : 7\n    1 1 2 3 5 8 13\n3. Input the number : 30\n    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040\n```\n\n<br>\n\n## 코드 및 풀이\n\n각각의 방식으로 풀기 전에 `while`문을 사용한 함수는 계산한 값들을 저장한 뒤 한번에 출력하도록, `for`문을 사용한 함수는 계산하면서 하나씩 값을 출력하도록 제약조건을 정하고 풀었다.\n\n<br>\n\n### (1) while\n\n```python\n# while문 사용\n\ndef fibo_while():\n    n = int(input(\"Input the number : \"))\n    fibo = [1, 1]\n    i = 2\n    while i < n:\n        fibo.insert(i, fibo[i - 1] + fibo[i - 2])\n        i += 1\n    return ' '.join(str(num) for num in fibo)\n\n### 실행 ###\nfibo_while()\n\n### 출력 ###\n# Input the number : 10\n# '1 1 2 3 5 8 13 21 34 55'\n```\n\n값을 하나씩 저장하기 위해 파이썬의 `list` 자료형을 사용하였다. 먼저 첫번째 값과 두번째 값을 저장한 `fibo` 리스트를 선언해준 뒤 `while`문 안에서 리스트의 내장함수인 `insert()`를 사용하여 원하는 인덱스 위치에 이전 수의 합을 더하여 넣어주었다. 그리고 `i` 값을 1씩 증가시켰다.\n\n출력할 때는 리스트 내에 저장된 값들을 `join()` 메서드를 사용하여 한 줄로 출력되도록 해주었다.\n\n<br>\n\n### (2) for\n\n```python\n# for 사용\n\ndef fibo_for():\n    n = int(input(\"Input the number : \"))\n    fibo = [1, 1]\n    for i in range(1, n + 1):\n        fibo.insert(i, fibo[i - 1] + fibo[i - 2])\n        print(fibo[i - 2])\n\n### 실행 ###\nfibo_for()\n\n### 출력 ###\n# Input the number : 10\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# 21\n# 34\n# 55\n```\n\n`for`문 역시 처음 두 수를 저장한 `fibo` 리스트를 선언해주었지만 반복문을 돌면서 바로 값을 출력을 하기 위해  for문 안에서 `print()`를 사용하였다.\n\n<br>\n\n### (3) recursive function\n\n\n피보나치 수열의 점화식은 다음과 같다.\n\n```\nf(n) = f(n - 1) + f(n - 2)\n```\n\n피보나치 수열에서 탈출조건은 2개이다. 해당 문제에서는 초기에 주어진 2개의 수가 `1, 1` 이므로 `n`이 `0`, `1`일 때 `1`을 리턴하도록 하였다. 그러면 다음의 식을 만족한다.\n\n```\nf(2) = f(1) + f(0)\n# 2\n```\n\n<br>\n\n또한 위의 식을 이용할 경우 재귀식이 2개 사용되어 각각의 합이 다음 값을 결정하는 것을 알 수 있다. 따라서 출력을 하려면 앞서 사용했던 방식으로는 무리가 있다. 해당 문제에서는 출력하는 방식을 제외하고 코드를 작성해보았다. ~~출력하는 방법에 대해서는 추가로 포스팅할 예정이다.~~\n\n```python\n# 재귀 사용\n\ndef recursive04():\n    n = int(input(\"Input the number : \"))\n    def fibo_recursive(n):\n        if n == 0 or n == 1:\n            return 1\n        r = fibo_recursive(n - 1) + fibo_recursive(n - 2)\n        # TODO 출력!\n        return r\n\n    return fibo_recursive(n - 1)\n```\n\n<br>\n\n## 실행시간 측정해보기\n\n```python\n# (1) while\nfibo_while  # 6.969785317778587e-07\n\n# (2) for\nfibo_for()  # 5.289912223815918e-07\n\n# (3) recursive\nrecursive04()  # 7.719499990344048e-07\n```\n\n<br>\n","excerpt":"문제 4번은 재귀 함수를 구현할 때 가장 빈번하게 등장하는 을 구현하는 문제다. 피보나치를 간단하게 설명하자면 다음과 같다. 0과 1로 시작하며(시작값은 달라질 수 있다)  다음 피보나치 수는 바로 앞의 두 피보나치 수의 합이 된다. 이러한 규칙을 …","fields":{"slug":"/recursion_04/"},"frontmatter":{"date":"Sep 18, 2017","title":"Python _ Recursion4. 피보나치 수열 출력","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n3번은 정해진 범위 (`0 < N <= 30`)에서 `2 ** n`의 값을 모두 출력하는 문제이다. 해당 문제의 핵심은 재귀를 계산한 값을 리턴하기 전에 출력을 한다는 데에 있었다. 이 문제도 `for`, `while`, 그리고 `recursive`방식으로 각각 풀어보았다.\n\n<br>\n\n## 문제 3) 2 ** n 출력\n\n해당 문제는 매우 간단하다.\n\n```\n문제 3. 2 ** n 출력\n\n2 ** n (0<n<=30)을 재귀함수로 구현\n\n\n# 예상하는 결과\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n262144\n524288\n1048576\n2097152\n4194304\n8388608\n16777216\n33554432\n67108864\n134217728\n268435456\n536870912\n1073741824\n```\n\n<br>\n\n## 코드 및 풀이\n\n### (1) while\n\n```python\ndef square_while():\n    n = 1\n    while n <= 30:\n        print(2 ** n)\n        n += 1\n```\n\n주어진 범위 내에서 `n`에 `1씩` 더하면서 `2 ** n` 의 값을 출력하도록 작성하였다.\n\n<br>\n\n### (2) for\n\n```python\ndef square_for():\n    for i in range(31):\n        print(2 ** i)\n```\n\n해당 문제 역시 `range()` 함수를 사용하여 for문을 돌면서 `2 ** i` 값을 출력하도록 작성하였다.\n\n<br>\n\n### (3) recursive function\n\n```python\ndef recursive03():\n    def square_recursive(n=30):\n        if n == 1:\n            return 2\n        r = square_recursive(n - 1)\n        print(r)\n        return r * 2\n    return print(square_recursive())\n```\n\n재귀를 사용할 때는 탈출조건을 먼저 정의해주고 재귀식의 값을 리턴하기 전에 먼저 값을 출력해주어야 한다.\n탈출조건은 `n == 1`일 때 종료하고, 지수값이므로 2가 반환되도록 설정하였다.\n\n또, 재귀를 돌면서 값을 하나씩 출력해야하므로 `r`에 이전 재귀값의 결과(`square_recursive(n - 1`)를 할당해주고 `r`을 리턴 전에 출력하도록 하였다. 또 외부함수의 리턴값에 `print()`를 사용하여 위의 예상 결과값처럼 출력되도록 맞춰주었다.\n\n<br>\n\n**추가) 문제 1. 연속된 수의 합 출력해보기**\n\n위의 방식을 사용하여 문제 1번도 더하는 값들을 모두 출력해보았다. 코드는 다음과 같다.\n\n```python\ndef recursive01():\n    n = int(input(\"Input the number : \"))\n    def seq_sum_recursive(n):\n        if n <= 1:\n            return 1\n        r = seq_sum_recursive(n - 1)\n        print(r)\n        return n + r\n    return print(seq_sum_recursive(n))\n```\n\n<br>\n\n## 실행시간 측정해보기\n\n```python\n# (0 < N <= 30)\n\n# (1) while\nsquare_while()  # 5.259644240140915e-07\n\n# (2) for\nsquare_for()  # 4.930188879370689e-07\n\n# (3) recursive\nrecursive03(). # 7.109483703970909e-07\n```\n\n<br>\n","excerpt":"3번은 정해진 범위 ()에서 의 값을 모두 출력하는 문제이다. 해당 문제의 핵심은 재귀를 계산한 값을 리턴하기 전에 출력을 한다는 데에 있었다. 이 문제도 , , 그리고 방식으로 각각 풀어보았다. 문제 3) 2 ** n 출력 해당 문제는 매우 간단하…","fields":{"slug":"/recursion_03/"},"frontmatter":{"date":"Sep 17, 2017","title":"Python _ Recursion3. 2 ** n 출력","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트는 'Wordy Gallery' 프로젝트 전반의 앱 구성과 데이터베이스 모델링 설계를 바탕으로 작성하였다.\n\n<br>\n\n## Database ERD\n\n![WordyGalleryERD](imgs/2017-09-16/WordyGalleryERD.png)\n\n- `MyUser` : 사용자 정보를 저장\n- `Art` :  작품과 그 상세 정보를 저장\n- `Genre` : 작품별 장르 정보를 저장\n- `Motif` : 사용자가 생성한 '댓글의 주제'를 저장\n- `Comment` : 사용자가 입력한 댓글 정보를 저장\n\n<br>\n\n## 장고 ORM을 사용한 모델링\n\n설계시 중요하다고 생각했던 사항들을 정리하였다. 관련 코드는 <a href=\"https://github.com/Monaegi/Julia-WordyGallery\" target=\"_blank\">Github 링크</a>을 참조하기 바란다.\n\n**(1) MyUser**\n\n제일 먼저 유저모델은 `AbstractBaseUser`를 상속받아 커스텀으로 정의하였다. 이렇게 만들어 줄 경우에는 `MyUserManager`로 사용자 및 관리자를 생성하는 유저매니저 또한 새로 정의해주어야 한다.\n\n사용자가 회원가입을 할 때 장고의 기본 회원가입을 사용하거나 페이스북 정보를 받아와 해당 DB에 저장하는 방식으로 나뉠 예정이다. 따라서 `user_type` 필드를 정의하고 `USER_TYPE_CHOICES`에 각각 장고, 페이스북 로그인 사용자로 분류하여 저장될 때 어떤 사용자인지 표시하도록 하였다.\n\n장고 어드민 페이지를 사용할 경우에는 반드시 `get_full_name`과 `get_short_name`을 `MyUser`내에 정의해주어야 한다. 장고 어드민페이지 로그인 시 앞서 언급한 두 메서드를 사용하여 로그인 사용자의 이름을 렌더하기 때문이다.\n\n마지막으로, 사용자 로그인 시 필요한 토큰 생성 메서드를 정의해주었다. 본 프로젝트에서 사용자 로그인은 장고의 `REST FRAMEWORK` 내 `토큰 기반 인증`을 사용할 것이므로 <a href=\"http://www.django-rest-framework.org/api-guide/authentication/\" target=\"_blank\">REST-Authentication 관련 문서</a>를 참고하여 해당 메서드를 정의해주었다.\n\n<br>\n\n**(2) Art**\n\n페이지에 표시할 작품정보를 저장할 수 있도록 설계하였다.\n\n<br>\n\n**(3) Genre**\n\n하나의 작품은 여러 개의 장르에 속할 수 있고 장르 또한 여러 개의 작품과 연결될 수 있다. 따라서 `Art`모델과 `다대다 관계(ManyToManyField)`로 정의해준다. 이 때 필드명에 `related_name`을 따로 정의하여 연결된 필드와 이름이 겹치지 않도록 하는 것이 좋다.\n\n장르를 세분화하고 장르에 따라 분류된 작품들의 목록을 출력하려면 따로 작품에 하나의 `column`으로 저장하기 보다는 따로 모델을 정의해주는 것이 좋다.\n\n<br>\n\n**(4) Motif**\n\n`motif`는 예술계에서 주제, 소재를 의미하는 단어로 쓰인다. 사용자가 작품을 보고 이야기하고 싶은 주제가 있을 경우 모티프를 생성하여 해당 주제와 관련된 의견을 댓글로 작성할 수 있도록 설계하였다. `Motif` 모델에는 작품별로 생성된 주제의 연결관계를 저장할 수 있도록 설계하였다.\n\n<br>\n\n**(5) Comment**\n\n사용자가 작성하는 의견, 즉 댓글은 모두 `Comment` 모델에 저장된다. 댓글은 주제별로 분류되어야 하므로 관련 `Motif`를 `다대일 관계`로 가진다. 이외 댓글을 작성할 때 필요한 작성자, 작성일 등의 정보를 저장한다.\n\n<br>\n\n## URI 설계\n\n| 분류 | 기능 | URI |\n|:---:|:----:|:---:|\n|인증페이지|로그인|`^member/login$`|\n|인증페이지|페이스북 로그인|`^member/login-facebook$`|\n|인증페이지|회원가입|`^member/signup$`|\n|인증페이지|로그아웃|`^member/logout$`|\n|인증페이지|사용자 프로필|`^member/profile/<user-id>$`|\n|인증페이지|사용자 정보수정|`^member/profile/<user-id>/edit$`|\n|인증페이지|사용자 탈퇴|`^member/profile/<user-id>/edit$`|\n|기능페이지|작품 목록|`^art/gallery$`|\n|기능페이지|작품 세부|`^art/<art-id>$`|\n|기능페이지|장르 목록|`^art/genre/list$`|\t\t\n|기능페이지|장르별 작품 목록|`^art/genre/<genre-id>/list$`|\n\n<br>\n\n---\n\n## 마치며\n\n다음 포스트는 REST 프레임워크를 사용한 인증 관련 API에 대해 설명할 것이다.\n\n<br>\n","excerpt":"이번 포스트는 'Wordy Gallery' 프로젝트 전반의 앱 구성과 데이터베이스 모델링 설계를 바탕으로 작성하였다. Database ERD   : 사용자 정보를 저장  :  작품과 그 상세 정보를 저장  : 작품별 장르 정보를 저장  : 사용자가 …","fields":{"slug":"/web_1.3-앱생성및모델링/"},"frontmatter":{"date":"Sep 16, 2017","title":"Web _ 1.3 앱 생성 및 모델링","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`WSGI`(Web Server Gateway Interface)는 **웹서버와 파이썬을 사용한 웹 어플리케이션 개발환경 간의 인터페이스에 대한 규칙**\n이다. 파이썬으로 선택할 수 있는 웹 프레임워크에서 사용할 수 있는 기존 웹서버는 `CGI`, `FastCGI`, `mod_python`, 또는 커스텀으로 만들어진 API 등으로 상당히 제한되어 있었다. 또 반대로 웹서버를 선택하는 것이 파이썬 웹개발환경을 제한하기도 하였다. 이를 위해 표준으로 나온 것이 `WSGI`이다.\n\n<br>\n\n## WSGI의 동작 원리\n\nWSGI는 웹서버와 웹 어플리케이션(또는 프레임워크) 간에 호환성있는 웹 어플리케이션 개발환경을 만들기 위해 로우-레벨 인터페이스로 만들어졌다.\n\nWSGI는 보통 서버 사이드와 게이트웨이 사이드(`Nginx`, `Apache` 등)를 가진다. 그리고 어플리케이션 또는 프레임워크 사이드와 통신한다. WSGI 요청을 처리하기 위해서 서버사이드는 어플리케이션을 실행하고 환경정보를 제공하며, 콜백 함수를 어플리케이션 사이드에 전달한다. 그러면 어플리케이션은 요청을 실행하고 전달받은 콜백 함수를 통하여 응답을 서버사이드에 넘겨준다.\n\n서버와 어플리케이션 사이에서, 양방향의 API를 실행할 수 있는 `WSGI 미들웨어` (이하 미들웨어, middleware)가 사용되기도 한다. 서버는 클라이언트의 요청을 받아 미들웨어에 넘겨준다. 미들웨어가 요청을 처리한 후에는 요청을 어플리케이션에 보낸다. 어플리케이션에서 나온 응답은 다시 미들웨어를 통해 서버와 궁극적으로 클라이언트 측에 전달된다. WSGI 친화적인 어플리케이션에서는 이러한 미들웨어 여러 개가 스택을 이루어 사용될 수 있다.\n\n<br>\n\n**미들웨어가 하는 역할**\n은 다음과 같다.\n\n- 환경 변수가 변경되는 것에 맞추어 타겟 URL에 따라 요청을 다른 어플리케이션 객체에 전달한다.\n- 여러 어플리케이션(또는 프레임워크)가 나란히 동일한 실행을 할 수 있게 해준다.\n- 네트워크 상에서 요청과 응답을 전달함으로써 로드밸런싱과 원격 실행을 가능하게 한다.  \n- XSLT(Extensible Stylesheet Language Transformations)와 같은 컨텐트 전처리를 실행할 수 있다.\n\t- 예를 들면 XML 문서를 다른 XML 형태의 문서로 바꾼다던가 HTML을 웹페이지로 변환해주는 등의 처리이다.\n\t- <a href=\"https://en.wikipedia.org/wiki/XSLT\" target=\"_blank\">XSLT에 대해 더 알아보기</a>\n\n<br>\n\n### 예제\n\n다음은 WSGI 호환되는 \"Hello World\" 어플리케이션이다.\n\n```python\ndef application(environ, start_response):\n    start_response('200_OK', [('Content_Type', 'text/plain')])\n    yield 'Hello World'\n```\n\n`application` 메서드는 각각 `environ`과 `start_response`를 매개변수로 받는다. `environ`변수는 CGI의 환경변수들을 딕셔너리로 받는다. 그리고 `start_response`변수는 `status`와 `response_headers`를 매개변수로 받는 메서드이다.\n\n메서드 내부에서는 매개변수로 받은 `start_response` 메서드를 실행하며, `status`에 응답상태 코드 정보로 `200 OK`와 응답 헤더(`response_headers`) 정보 중의 하나인 `Content_Type`을 정의해준다.\n\n그 다음에는 응답의 바디부분에 해당하는 \"Hello World\"를 스트링 값으로 넘겨준다.\n\n<br>\n\n### 어플리케이션 호출 예제\n\n다음은 WSGI 친화적인 애플리케이션을 호출하여 응답을 받는 메서드의 원리에 대해 정리한 것이다.\n\n```python\n# 앱을 실행하고 응답을 보여주는 예제 메서드\ndef call_application(app, environ):\n    # body content와 status, headers 정보를 담는 리스트 각각 정의\n    body = []\n    status_headers = [None, None]\n    # 응답을 넘겨주는 내부함수 start_response 정의\n    def start_response(status, headers):\n        status_headers[:] = [status, headers]\n        return body.append(status_headers)\n    # 어플리케이션에서 실행할 view 메서드(app()) 실행\n    app_iter = app(environ, start_response)\n    # app_iter의 값들을 바디에 넣는다.\n    try:\n        for item in app_iter:\n            body.append(item)\n    # 항상 실행. app_iter 내에 'close' 를 찾으면 종료\n    finally:\n        if hasattr(app_iter, 'close'):\n            app_iter.close()\n    # 상태코드, 헤더정보, 바디를 순서대로 리턴\n    return status_headers[0], status_headers[1], ''.join(body)\n\nstatus, headers, body = call_application(app, {\"\"\"environ\"\"\"})\n```\n\n<br>\n\n## WSGI와 파이썬3\n\n`파이썬3`에서 이진데이터와 텍스트데이터의 분리하는 것이 WSGI를 사용하는데 문제가 되었다. 헤더 데이터가 스트링 변수로 정의되어야하는데, 가끔씩 이진 데이터로 처리되는 경우가 있기 때문이다. `파이썬2`에서는 텍스트와 이진 데이터가 모두 스트링 변수로 처리되기 때문에 문제가 없었던 사항이다. 하지만 파이썬3 에서 이진 데이터는 바이트 변수로, 텍스트 데이터는 유니코드 텍스트 변수로 처리된다. 이를 해결하기 위해 개정된 버전의 WSGI는 <a href=\"https://www.python.org/dev/peps/pep-3333/\" target=\"_blank\">PEP 3333</a>에 소개되어 있다.\n\n<br>\n\n## 어떤 WSGI를 사용할 것인가?\n\n가장 많이 사용하는 것은 C언어로 개발된 서버인 `uwsgi`이다. `uwsgi`는 반드시 웹서버와 함께 사용되어야 하는데 예를 들어, Nginx 웹서버를 사용함으로써 정적인 페이지를 처리하도록 하고 나머지 요청은 `uwsgi`에게 전달하여  처리하는 방법이 일반적이다.\n\n<br>\n\n## 마치며\n\n더 자세한 내용은 <a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" target=\"_blank\">다음 링크(Web Server Gateway Interface)</a>에서 확인할 수 있다.\n\n<br>\n","excerpt":"(Web Server Gateway Interface)는 웹서버와 파이썬을 사용한 웹 어플리케이션 개발환경 간의 인터페이스에 대한 규칙\n이다. 파이썬으로 선택할 수 있는 웹 프레임워크에서 사용할 수 있는 기존 웹서버는 , , , 또는 커스텀으로 만들…","fields":{"slug":"/web_WSGI/"},"frontmatter":{"date":"Sep 16, 2017","title":"Web _ WSGI란 무엇인가?","tags":["Django","Web development","Network","python","WSGI"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n프로젝트를 진행할 때 가장 중요한 것은 **깃에서 추적할 코드와 추적하지 않을 중요 정보 및 설정을 분리해놓는 것**\n이다. 특히 깃헙 퍼블릭 레포지토리를 사용하고 있다면 소스코드를 푸시하기 전에 반드시 추적되선 안되는 프로젝트 `시크릿 키`, 허용하는 호스트 주소들, 데이터베이스 정보 등은 따로 관리해주어야 한다.\n\n숨기고 싶은 값들은 루트 경로에 `.config_secret` 폴더를 따로 생성하여 내부에서 환경별로 관리해준다. 또한 개발(로컬)환경과 운영환경에서 사용하는 설정값이 다를 수 있으므로 하나의 프로젝트 내에서 배포와 개발환경을 서로 나누어 사용하려고 한다. 배포환경 설정을 저장할 파일은 `deploy`, 개발환경 설정을 저장할 파일은 `debug`로 각각 분리하였다.\n\n<br>\n\n## 설정 분리하기\n\n### .config_secret 폴더로 숨길 값들 관리하기\n\n프로젝트 폴더 내에 `.config_secret`을 만들어준다.(`django_app` 폴더와 같은 위치)\n\n해당 폴더는 숨김파일로 기능한다. 폴더 내에 JSON 파일을 만들어주고 앱의 `secret_key`, `debug`, `database`, `allowed_host`, 그리고 `static 파일경로` 등의 앱 설정사항을 넣어준다. 배포환경, 개발환경에서 공통으로 사용할 비밀값들을 저장하는데에 JSON 파일 형식을 사용한다.\n\n<br>\n\n### .json 파일 작성하기\n\nJSON 파일은 딕셔너리로 구성되어 있으며 문자열에 작은 따옴표(`''`)를 허용하지 않는다.\n또한 딕셔너리 마지막 값 뒤에 콤마(`,`)를 쓰면 에러나므로 주의한다.\n\n공통으로 사용할 개인/중요정보는 `settings_common.json`에 저장한다.\n\n```python\n### .config_secret/settings_common.json\n\n{\n  \"django\": {\n    \"secret_key\": \"[앱 시크릿키값]\"\n  }\n}\n```\n\n<br>\n\n개발 환경에서만 사용할 개인/중요정보는 `settings_debug.json`에 저장한다.\n\n```python\n### .config_secret/settings_debug.json\n\n{\n  \"django\": {\n    \"allowed_hosts\": [\n      \"*\"\n    ]\n  }\n}\n```\n\n<br>\n\n배포 환경에서만 사용할 개인/중요정보는 `settings_debug.json`에 저장한다.\n\n```python\n### .config_secret/settings_deploy.json\n\n{\n  \"django\": {\n    \"allowed_hosts\": [\n      \"*\"\n    ]\n  }\n}\n```\n\n<br>\n\n### settings 파일 분할하기\n\n**(1) base.py**\n\n기존의 settings 파일은 동일 프로젝트 폴더 내에 파이썬 패키지 `settings`로 만들고 `base.py`로 저장한다. 기존 `settings.py`에 있는 내용을 모두 옮겨주고 기존파일은 삭제한다.\n\n경로가 바뀌었으므로 `os.path`을 사용하여 세팅 안의 경로 지정값들을 바꿔준다. (`os.path`는 파일과 경로를 지정해줄 때 유용한 함수들을 여러 개 제공하고 있다.)\n\n```python\nimport json\n\n# 파이썬 패키지 안에 넣어주었으므로 기존 BASE_DIR 경로에서 dirname()으로 한번 더 감싸준다.\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# BASE_DIR로 루트 경로를 변수에 할당한다.\nROOT_DIR = os.path.dirname(BASE_DIR)\n\n# .config_secret폴더 및 하위 파일 경로\nCONFIG_SECRET_DIR = os.path.join(ROOT_DIR, '.config_secret')\nCONFIG_SECRET_COMMON_FILE = os.path.join(CONFIG_SECRET_DIR, 'settings_common.json')\nCONFIG_SECRET_DEBUG_FILE = os.path.join(CONFIG_SECRET_DIR, 'settings_debug.json')\nCONFIG_SECRET_DEPLOY_FILE = os.path.join(CONFIG_SECRET_DIR, 'settings_deploy.json')\n\n# .config_secret 변수에 CONFIG_SECRET_COMMON_FILE경로의 파일을 읽은 값을 할당\nf = open(CONFIG_SECRET_COMMON_FILE)\nconfig_secret_string = f.read()\n# json 형식을 파이썬 딕셔너리 형식으로 변환해준다.\nconfig_secret = json.loads(config_secret_string)\n# 열었던 파일을 닫는다.\nf.close()\n\n# 위의 과정을 아래와 같이 작성할 수도 있다.\nconfig_secret_common = json.loads(open(CONFIG_SECRET_COMMON_FILE).read())\n# 변수가 사용되지 않으면 파일은 자동으로 닫힌다\n\n# 시크릿키를 바로 쓰는 것이 아니라 숨김파일에 따로 설정해 불러올 수 있다.\nSECRET_KEY = config_secret_common['django']['secret_key']\n```\n\n<br>\n\n### 콘솔에서 사용하기\n\n기존 세팅파일을 새로 정의해주었으므로 서버를 실행할 때 어떤 환경의 설정을 사용할 것인지 명시해주어야 한다.\n\n```powershell\n# 기본, 개발, 배포용 서버를 각각 따로 실행할 수 있다.\n$ .manage.py runserver --settings=config.settings.base  # 기본용\n$ .manage.py runserver --settings=config.settings.debug  # 개발용\n$ .manage.py runserver --settings=config.settings.deploy  # 배포용\n```\n\n일일히 작성하기 싫다면 터미널 별로 환경변수의 기본값을 설정하여 사용할 수도 있다.\n\n```powershell\n# 예) 아래와 같이 선언하면 해당 터미널에서는 타 명령을 실행할 때 개발환경의 설정을 따른다.\n$ export DJANGO_SETTINGS_MODULE=config.settings.debug\n```\n\n<br>\n\n**(2) debug.py와 deploy.py**\n\n`settings`폴더 내에 `debug.py`, `deploy.py` 파일을 각각 생성한 후 다음의 값을 설정해준다.\n\n- `DEBUG = True`설정\n- `settings_debug.json`의 값을 불러와 파이썬 딕셔너리로 돌려준 값\n- `ALLOWED_HOSTS` 값을 설정\n\n```python\n### settings/debug.py\n\nfrom .base import *\n\n\nconfig_secret_debug = json.loads(open(CONFIG_SECRET_DEBUG_FILE).read())\n\nDEBUG = True\nALLOWED_HOSTS = config_secret_debug['django']['allowed_hosts']\n```\n\n위의 설정으로 콘솔에서 `runserver`를 실행해보면...\n\n```powershell\n# DEBUG 설정을 debug.py로 옮겨주면 기존 base 파일은 실행되지 않는다.\n$ ./manage.py runserver --settings=config.settings.base    \nCommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.\n\n# 따라서 debug로 실행해준다.\n$ ./manage.py runserver --settings=config.settings.debug\n```\n\n**만들어준 `.config_secret` 디렉토리는 `.gitignore`에 명시해주어 Github에서 추적하지 않도록 해준다**. 배포는 `AWS키`를 사용할 예정이므로 처음 실습한다면 [bitbucket](https://bitbucket.org)을 사용하는 것을 추천한다. `Github`는 비공개 레포지토리가 유료이지만 `bitbucket`은 무료로 비공개 레포지토리를 생성/사용할 수 있다.\n\n또한 배포할 프로젝트 폴더는 `settings` 파일을 제공하지 않기 때문에 `README.md`를 따로 작성하여 `requirements`에 대한 안내문을 작성해주는 것이 좋다.\n\n<br>\n\n\n## 프로젝트 구조 이해하기\n\n설정을 분리한 파일구조를 보면 다음과 같다.\n\n```powershell\n$ tree .\n.\n# 깃에서 track하면 안되는 중요 정보들을 저장하는 json 파일 묶음.\n├── .config_secret\n\t# 프로젝트 secret_key\n    ├── settings_common.json   \n    # 개발환경의 allowed_hosts 설정\n    ├── settings_debug.json     \n    # 배포환경의 allowed_hosts 및 데이터베이스 설정\n    └── settings_deploy.json   \n├── .requirements\n    # 개발환경에서 필요한 패키지 모음\n    ├── debug.txt\n    # 배포환경에서 필요한 패키지 모음\n    └── deploy.txt\n# 프로젝트 루트폴더 (프로젝트를 구성하는 앱과 기본 설정 묶음.)\n├── django_app\n  # 프로젝트 기본 설정폴더 (startproject 시 기본으로 생성해줌)\n    ├── config\n    │   ├── __init__.py\n    # 기존 settings.py를 환경 별로 다르게 적용되도록 분리.\n    │   ├── settings\n    │   │   ├── __init__.py\n    │   │   ├── base.py  # 공통 설정파일\n    │   │   ├── debug.py  # 개발환경\n    │   │   └── deploy.py  # 배포환경\n    # 프로젝트 기본 url 설정파일. rest_framework 기본 url을 설정해준다.\n    │   ├── urls.py\n    # 어플리케이션 인터페이스 설정 분리\n    │   └── wsgi\n    │       ├── __init__.py\n    │       ├── debug.py\n    │       └── deploy.py\n    ├── db.sqlite3\n    └── manage.py\n├── README.md\n└── db.sqlite3\n```\n\n<br>\n\n작업 중 `WSGI`에 대한 이해가 명확하지 않아 블로그 내 <a href=\"http://bbrubidev.github.io/web_WSGI.html\" target=\"_blank\">WSGI란 무엇인가?</a>에 따로 정리하였다.\n\n<br>\n\n## 마치며\n\n이외에도 세팅은 점차 개발을 해나가면서 필요한 데이터베이스정보, 정적파일 및 미디어 파일 저장경로 등을 개발/배포 환경 별로 지정해 줄 수 있다.\n\n다음 포스팅은 `Wordy Gallery`의 앱 구조와 모델링에 대해 정리할 예정이다.\n\n<br>\n","excerpt":"프로젝트를 진행할 때 가장 중요한 것은 깃에서 추적할 코드와 추적하지 않을 중요 정보 및 설정을 분리해놓는 것\n이다. 특히 깃헙 퍼블릭 레포지토리를 사용하고 있다면 소스코드를 푸시하기 전에 반드시 추적되선 안되는 프로젝트 , 허용하는 호스트 주소들,…","fields":{"slug":"/web_1.2-장고배포환경구축하기/"},"frontmatter":{"date":"Sep 13, 2017","title":"Web _ 1.2 장고 배포환경 구축하기","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n아직 알고리즘을 작성하는 것에 익숙하지 않은 개발자들은 먼저 자신이 만든 코드가 정상적으로 작동되는지를 신경쓴다. 이 단계를 넘어서면 기본적으로 고려해야할 것이 바로 성능인데, 성능을 측정하는 방법 중의 하나가 하나의 알고리즘 문제를 여러 방식으로 풀어보고 그 `실행시간`을 측정해보는 것이다.\n\n해당 포스트는 파이썬으로 작성한 알고리즘 코드의 실행시간을 측정하는 방법에 대해 소개한다.\n\n<br>\n\n## 파이썬으로 코드실행시간 측정하기\n\n먼저 시간을 측정하는 파이썬 내장모듈 중에  `timeit`를 살펴보자. `timeit`는 작은 파이썬 코드들의 실행시간을 측정할 목적으로 만들어놓은 모듈이다.\n\n```python\ntimeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)\n```\n\n해당 모듈은 실행시 `Timer`의 객체를 생성한다. 매개변수를 살펴보면 `stmt`에는 실행할 코드를 스트링으로 줄 수 있고, `setup`키워드인자에는 임포트나 실행문을, `timer`키워드인자에는 타이머 함수를, 그리고 `number`키워드인자에는 `timeit()`가 실행될 때의 시간단위를 입력한다.\n\n시간은 주어진 코드의 실행 횟수를 카운트한다. 실행되는 동안 `setup`은 한번만 실행되며 코드의 실행시간을 여러 번 측정하여 초 단위의 실수형으로 리턴한다. 인자는 루프를 몇 번 돌 것인지 그 횟수를 주면 되며, 주지 않을 경우 기본값은 `1,000,000`으로 설정되어 있다. 모듈이 사용되면 코드, `setup`값, 그리고 `timer` 함수는 `Timer`의 생성자에 전달된다.\n\n<br>\n\n위의 모듈을 사용하여 다음과 같이 `runtime` 메서드를 정의해보았다.\n\n```python\ndef runtime(f):\n    import timeit\n    start = timeit.default_timer()\n    f  # 시간 측정할 메서드\n    end = timeit.default_timer()\n    print(end - start)\n```\n\n`runtime` 함수가 실행되면 바로 `timeit` 모듈을 임포트해온 후 `default_timer`를 사용하여 측정할 코드의 실행 직전, 실행 직후 시간을 각각 측정한다. 그리고 시간 값의 차를 구하면 이것이 바로 매개번수로 받은 코드(함수, 메서드, 스트링)의 실행시간이 된다.\n\n\n사용예는 다음과 같다.\n\n```python\n# for 사용\n\ndef odd_sum_for():\n    result = 0\n    n = int(input(\"input the number : \"))\n\n    for i in range(0, n + 1):\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        elif not i % 2 == 0:\n            result += i\n    return \"1부터 {n}까지 홀수의 합 : {result}\".format(n=n, result=result)\n\n\n### 실행 ###\nruntime(odd_sum_for())\nodd_sum_for()\n\n### 출력 ###\n# 5.299807526171207e-07\n# input the number : 10\n# '1부터 10까지 홀수의 합 : 25'\n```\n\n<br>\n\n## 실행시간 측정 데코레이터\n\n위의 코드는 실행시간을 출력하는 작은 모듈이 되었다. 좀 더 파이써닉하게 해당 메서드를 사용하고 싶다면 파이썬의 `데코레이터(Decorator)`화 하는 것이 좋다.\n\n위의 `runtime` 메서드를 조금 더 고쳐보자.\n\n```python\ndef runtime(f):\n    def wrapper(*args, **kwargs):\n        import timeit\n        start = timeit.default_timer()\n        f\n        end = timeit.default_timer()\n        print(end - start)\n        return f()\n    return wrapper\n```\n\n**+추가**\n\n`runtime` 메서드에서 `time.process_time()`을 사용하면 CPU 실행시간도 측정할 수 있다.\n\n파이썬에서 데코레이터를 정의할 경우에는 위처럼 내부에 `wrapper` 메서드를 넣어 기존 메서드를 내부함수로 정의하고 외부함수에서 내부함수 자체를 리턴하면 된다.\n\n<br>\n\n위의 데코레이터를 활용하면 다음과 같다.\n\n```python\n# for 사용\n\n@runtime\ndef odd_sum_for():\n    result = 0\n    n = int(input(\"input the number : \"))\n\n    for i in range(0, n + 1):\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        elif not i % 2 == 0:\n            result += i\n    return \"1부터 {n}까지 홀수의 합 : {result}\".format(n=n, result=result)\n\n\n### 실행 ###\n# runtime(odd_sum_for()) - 따로 실행해주지 않아도 데코레이터가 알아서 출력해준다.\nodd_sum_for()\n\n### 출력 ###\n# 5.299807526171207e-07\n# input the number : 10\n# '1부터 10까지 홀수의 합 : 25'\n```\n\n<br>\n\n## 커멘드-라인에서 코드실행시간 측정하기\n\n위의 `timeit`를 그대로 사용하여 커멘드-라인에서도 코드조각, 메서드, 함수 등 작은 파이썬 코드의 실행시간을 측정할 수 있다.\n\n```powershell\n$ python -m timeit [statement ...]\n```\n\n자세한 명령어 옵션은 다음 링크(<a href=\"https://docs.python.org/3/library/timeit.html\" target=\"_blank\">파이썬 3.6.2 `timeit`</a>)를 참고하기 바란다.\n\n<br>\n","excerpt":"아직 알고리즘을 작성하는 것에 익숙하지 않은 개발자들은 먼저 자신이 만든 코드가 정상적으로 작동되는지를 신경쓴다. 이 단계를 넘어서면 기본적으로 고려해야할 것이 바로 성능인데, 성능을 측정하는 방법 중의 하나가 하나의 알고리즘 문제를 여러 방식으로 …","fields":{"slug":"/countTime/"},"frontmatter":{"date":"Sep 12, 2017","title":"Python _ 파이썬에서 코드실행시간 측정하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`재귀`는 **하나의 함수 내에서 자신(해당 함수)을 다시 호출하여 작업을 수행하는 방식으로 문제를 푸는 방법**\n이다. 재귀함수를 설계할 때 가장 중요한 점은 **매 호출시마다 매개변수가 변한다**\n는 점이다. 계속 다른 매개변수에 대해 같은 함수처리를 반복, 즉, 자기 자신을 계속 호출하는 것이다.\n\n그러므로 `탈출조건`이 재귀에서는 매우 중요해진다. **자기 자신을 반복해서 부르는 행위를 언제 끝낼지 반드시 정의해주어야하는 것**\n이다. 만약 매개변수가 변하지 않거나 특정 패턴만 반복하고 있다면 그 재귀함수는 영원히 실행을 반복하다가 스택 오버플로우를 발생시킬 것이다. 따라서 재귀를 설계할 때는 반드시 `탈출조건`을 염두에 두어야 한다.\n\n<br>\n\n## 문제 1) 1부터 n까지 연속된 수의 합 출력\n\n다음 문제는 매개변수로 정수를 받으며, 1부터 해당 정수까지의 모든 정수를 더하는 과정을 재귀로 푸는 문제이다.\n\n```\n문제 1. 수의 합 출력\n1부터 N 까지 모든 수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. input 1부터 the number = 42\n    42까지의 합 : 903\n2. input 1부터 the number = 1\n    1까지의 합 : 1\n3. input 1부터 the number = 468\n    468까지의 합 : 109746\n4. input 1부터 the number = 1000\n    1000까지의 합 : 500500\n```\n\n<br>\n\n\n## 코드 및 풀이\n\n### (1) while\n\n재귀를 생각하기 전에 파이썬의 `while`과 `for`를 사용하여 해당 문제를 풀어보았다.\n\n```python\n# while 사용\n\ndef seq_sum_while():\n    result = 0\n    n = input('input 1부터 the number = ')\n    import copy\n    num = copy.copy(n)\n    n = int(n)\n    while n != 0:\n        result += n\n        n = n - 1\n    return '{n}까지의 합: {result}'.format(\n        n=num, result=result)\n\n### 실행 ###     \nseq_sum_while(1000)\n\n### 출력 ###\n# input 1부터 the number = 10\n# '10까지의 합: 55'\n```\n\n`while`문을 사용하여 푼 방법은 위과 같다. **n이 0이 아닐 경우** 계속해서 리턴값인 `result`에 `n`을 더해주고 다음 반복문 실행 전에 `n`에서 `1`씩 빼준다.\n\n<br>\n\n### (2) for\n\n이번에는 `for`문을 사용해서 풀어보았다.\n\n```python\n# for 사용\n\ndef seq_sum_for():\n    result = 0\n    n = int(input('input 1부터 the number = '))\n    import copy\n    num = copy.copy(n)\n    for i in range(n + 1):\n        result += i\n    return '{n}까지의 합: {result}'.format(\n        n=num, result=result)\n\n\n### 실행 ###\nseq_sum_for(1000)\n\n### 출력 ###\n# input 1부터 the number = 10\n# '10까지의 합: 55'\n```\n\n`for`문은 훨씬 간단했다. `n`까지 포함해야하므로 `range()`함수를 사용하여 범위를 정해주고 반복문을 실행하면서 `i`를 리턴값인 `result`에 더해주었다.\n\n<br>\n\n### (3) recursive function\n\n다음은 재귀로 푼 방식이다.\n\n```python\ndef recursive01():\n    import copy\n    n = int(input(\"input 1에서부터 the number : \"))\n    num = copy.copy(n)\n    def seq_sum_recursive(n):\n        result = 0\n        # 탈출조건\n        if n <= 0:\n            return result\n        result = n + seq_sum_recursive(n - 1)\n        return result\n    print(\"{n}까지의 합: {result}\".format(n=num, result=seq_sum_recursive(n)))\n\n### 실행 ###\nrecursive01(1000)\n\n### 출력 ###\n# input 1에서부터 the number : 1000\n# 1000까지의 합: 500500\n```\n\n`n`을 매개변수로 받았을 때, 자기자신을 계속 호출하면서 연속된 수를 더해나가야하므로 함수 자체를 연산식에 사용해야한다. 연속된 수를 매개변수 값에서부터 시작하여 1까지 더해나가려면 다음과 같은 식이 성립한다.\n\n```\nn + (n - 1) + (n - 2) + ... + 2 + 1\nn + f(n - 1)\n\nf(n - 1) = (n - 1) + f(n - 2)\nf(n - 2) = (n - 2) + f(n - 3)\n...\nf(1) = 1 + f(0)\nf(0) = 0 + f(-1)\n```\n\n그리고 `탈출조건`은 `n`이 1이 될 때까지 더해주어야 하므로 `n == 0`일 때 리턴값인 `result`를 반환하고 함수를 종료하도록 설계하였다.\n\n<br>\n\n### 실행시간 측정해보기\n\n`while`, `for`, `recursive`로 푼 메서드의 실행시간을 각각 측정해보면 다음과 같다.\n\n```python\n# n = 1000일 때\n\n# (1) while\nruntime(seq_sum_while())   # 4.600151441991329e-07\n\n# (2) for\nruntime(seq_sum_for())   # 4.050089046359062e-07\n\n# (3) recursive\nruntime(recursive01())   # 7.560010999441147e-07\n```\n\n더하기 연산 같은 간단한 알고리즘이지만 재귀가 확실히 느렸다. 또, 매개변수로 `10000` 정도의 값을 줄 경우 재귀를 사용한 메서드는 스택오버플로우를 발생시켰다.\n\n함수의 실행시간 측정하는 방법은 따로 포스트할 예정이다.\n\n<br>\n\n## 완료 코드\n\n```python\n# 완료 코드\n\ndef add01():\n    import copy\n    n = int(input('input 1부터 the number = '))\n    num = copy.copy(n)\n\n    def seq_sum_while1(n):\n        result = 0\n        while n != 0:\n            result += n\n            n = n - 1\n        return result\n\n    def seq_sum_for1(n):\n        result = 0\n        for i in range(n + 1):\n            result += i\n        return result\n\n    def seq_sum_recursive1(n):\n        result = 0\n        if n < 0:\n            return result\n        return n + seq_sum_recursive1(n - 1)\n\n    print(\"while - {n}까지의 합: {result}\".format(n=num, result=seq_sum_while1(n)))\n    print(\"for - {n}까지의 합: {result}\".format(n=num, result=seq_sum_for1(n)))\n    print(\"recursive - {n}까지의 합: {result}\".format(n=num, result=seq_sum_recursive1(n)))\n\n\n### 실행 ###\nadd01()\n\n### 출력 ###\n# input 1부터 the number = 10\n# while - 10까지의 합: 55\n# for - 10까지의 합: 55\n# recursive - 10까지의 합: 55\n```\n\n<br>\n\n**+추가**\n\n재귀를 사용한 메서드를 실행할 때 스택머신 가동 횟수를 제한하고 싶을 경우에는 **재귀 횟수를 조절할 수 있는 내장 모듈**\n을 사용한다.\n\n```python\nimport sys\n\n# 1000 이상의 재귀 호출은 RecursionError를 발생시킨다.\nsys.setrecursionlimit(1000)\n```\n\n먼저 선언해놓고 재귀를 사용한 메서드를 사용하면 된다.\n\n<br>\n","excerpt":"는 하나의 함수 내에서 자신(해당 함수)을 다시 호출하여 작업을 수행하는 방식으로 문제를 푸는 방법\n이다. 재귀함수를 설계할 때 가장 중요한 점은 매 호출시마다 매개변수가 변한다\n는 점이다. 계속 다른 매개변수에 대해 같은 함수처리를 반복, 즉, 자…","fields":{"slug":"/recursion_01/"},"frontmatter":{"date":"Sep 11, 2017","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n두번째 문제는 첫번째 문제인 <a href=\"http://bbrubidev.github.io/recursion_01.html\" target=\"_blank\">재귀 - 1부터 n까지 연속된 수의 합</a>을 응용한 문제이다.\n\n<br>\n\n## 문제 2) 주어진 범위 내 홀수의 합 출력\n\n이 문제에서는 매개변수의 범위가 정해져있는 가운데 매개변수보다 작은 홀수의 합만 재귀로 구하면 된다.\n\n```\n문제 2. 홀수의 합 출력\n1부터 N(0 < N <= 1000)까지 홀수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. input the number = 999\n    1부터 999까지의 합 : 250000\n2. input the number = 725\n    1부터 725까지의 합 : 131769\n3. input the number = 527\n    1부터 527까지의 합 : 69696\n4. input the number = 406\n    406까지의 합 : 41209    \n```\n\n<br>\n\n## 코드 및 풀이\n\n### (1) while\n\n해당 문제 역시 재귀를 생각하기 전에 `while`과 `for`를 사용하여 풀어보았다.\n\n```python\n# while 사용\n\ndef odd_sum_while():\n    result = 0\n    n = int(input(\"input the number : \"))\n    import copy\n    num = copy.copy(n)\n    a = 0\n    while a <= n:\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        elif a > 0 and not a % 2 == 0:\n            result += a\n        a = a + 1\n    return \"1부터 {n}까지 홀수의 합 : {result}\".format(n=num, result=result)    \n\n### 실행 ###\nodd_sum_while()\n\n### 출력 ###\n# input the number : 1000\n# '1부터 1000까지 홀수의 합 : 250000'\n```\n\n`while`문을 사용할 경우 `n`의 값이 1000보다 작아야하는 예외처리를 해준 후 `n`보다 작거나 같은 `a`값 중 `1`씩 더하면서 `2`로 나누어지지 않는 값(=홀수)만 리턴값인 `result`에 더해준다. `a`는 n보다 커지는 순간 반복문을 종료하게 된다.\n\n<br>\n\n### (2) for\n\n`for`문을 사용하여 작성한 코드는 다음과 같다.\n\n```python\n# for 사용\n\ndef odd_sum_for():\n    result = 0\n    n = int(input(\"input the number : \"))\n    import copy\n    num = copy.copy(n)\n\n    for i in range(0, n + 1):\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        elif not i % 2 == 0:\n            result += i\n    return \"1부터 {n}까지 홀수의 합 : {result}\".format(n=num, result=result)\n\n### 실행 ###\nodd_sum_for()\n\n### 출력 ###\n# input the number : 1000\n# '1부터 1000까지 홀수의 합 : 250000'\n```\n\n역시 `range()`함수를 사용하여 범위를 정해주고 반복문을 실행하면서 `2`로 나누어지지 않는 `i`값만 리턴값인 `result`에 더해주었다. 또, `0 < N <=1000` 에 대한 예외처리도 추가하였다.\n\n<br>\n\n### (3) recursive function\n\n다음은 재귀로 푼 방식이다.\n\n```python\n# 재귀 사용\n\ndef recursive02():\n    import copy\n    n = int(input(\"input the number : \"))\n    num = copy.copy(n)\n    def odd_sum_recursive(n):\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        elif n <= 0:\n            return 0\n        if n % 2 == 0:\n            return (n - 1) + odd_sum_recursive(n - 3)\n        return n + odd_sum_recursive(n - 2)\n    print(\"1부터 {n}까지의 합 : {result}\".format(n=num, result=odd_sum_recursive(n)))\n\n\n### 실행 ###\nrecursive02()\n\n### 출력 ###\n# input the number : 999\n# 1부터 999까지의 합 : 250000\n```\n\n먼저 입력받은 `input`이 1000 이하인지 검사한 후, 주어진 범위값이 짝수인지 판별하여 그에 따른 재귀식을 작성하였다. **탈출조건은 n의 값이 0보다 작을 경우 더할 값을 0으로 반환하여 종료한다.**\n\n<br>\n\n## 실행시간 측정해보기\n\n```python\n# n = 1000일 때\n\n# (1) while\nruntime(odd_sum_while())  # 7.859780453145504e-07\n\n# (2) for\nruntime(odd_sum_for())  # 1.7050188034772873e-06\n\n# (3) recursive\nruntime(add_sum_recursive(1000))  # 8.179922588169575e-07\n```\n\n<br>\n\n\n## 완료 코드\n\n```python\n# 완료 코드\n\ndef add02():\n    import copy\n    n = int(input(\"input the number : \"))\n    num = copy.copy(n)\n\n    def odd_sum_while02():\n        result = 0\n        a = 0\n        while a < n:\n            if n > 1000:\n                return \"1000과 같거나 작은 수를 입력하세요!\"\n            elif a > 0 and not a % 2 == 0:\n                result += a\n            a = a + 1\n        return result  \n\n    def odd_sum_for02():\n        result = 0\n        for i in range(0, n + 1):\n            if n > 1000:\n                return \"1000과 같거나 작은 수를 입력하세요!\"\n            elif not i % 2 == 0:\n                result += i\n        return result\n\n    def odd_sum_recursive02(n):\n        if n > 1000:\n            return \"1000과 같거나 작은 수를 입력하세요!\"\n        if n <= 0:\n            return 0\n        # 논리연산자(&)를 사용하여 홀수인 값만 판별한다.\n        elif n % 1:\n            return n + odd_sum_recursive02(n - 2)\n        return odd_sum_recursive02(n - 1)\n\n    print(\"while - 1부터 {n}까지의 합 : {result}\".format(n=num, result=odd_sum_while02()))\n    print(\"for - 1부터 {n}까지의 합 : {result}\".format(n=num, result=odd_sum_for02()))\n    print(\"recursive - 1부터 {n}까지의 합 : {result}\".format(n=num, result=odd_sum_recursive02(n)))\n\n### 실행 ###  \nadd02()\n\n### 출력 ###\n# input the number : 1000\n# while - 1부터 1000까지의 합 : 250000\n# for - 1부터 1000까지의 합 : 250000\n# recursive - 1부터 1000까지의 합 : 250000\n```\n\n<br>\n","excerpt":"두번째 문제는 첫번째 문제인 재귀 - 1부터 n까지 연속된 수의 합을 응용한 문제이다. 문제 2) 주어진 범위 내 홀수의 합 출력 이 문제에서는 매개변수의 범위가 정해져있는 가운데 매개변수보다 작은 홀수의 합만 재귀로 구하면 된다. 코드 및 풀이 (…","fields":{"slug":"/recursion_02/"},"frontmatter":{"date":"Sep 11, 2017","title":"Python _ Recursion2. 홀수의 합 출력","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n9번은 이항계수의 계산값을 재귀방식으로 구하는 문제이다. 여기서 이항계수(Binominal Coefficient)는 다음을 만족한다.\n\n<br>\n\n$$\n\\binom{n}{k} = \\begin{cases}\\left(\\frac{n!}{k(n-k)!}\\right)\\text{0 <= k <= n, 0 if k < 0, 0 if k > n}\\end{cases}\n$$\n\n\n<br>\n\n이항계수는 $nCk$ 나 $C(n, k)$로 쓰기도 한다. 이항계수는 다음과 같은 성질을 가지는데 해당 문제는 다음 성질을 가진다.\n\n\n\n$$\n\\binom{n}{k} = \\binom{n}{n - k}\n$$\n\n\n실제로 수를 넣어 계산해보면 동일하다.\n\n\n$$\n5\\mathcal{C}2 = 5\\mathcal{C}3 = \\left(\\frac{5 \\times 4}{2 \\times 1}\\right) = \\left(\\frac{5 \\times 4 \\times 3}{3 \\times 2 \\times 1}\\right) = 10\n$$\n\n\n<br>\n\n두번째 성질은 다음과 같다. 이는 `파스칼의 법칙`이라고 부른다.\n\n\n$$\n\\binom{n}{k} = \\binom{n}{k + 1} + \\binom{n + 1}{k + 1}\n$$\n\n\n<br>\n\n## 문제 9) 이항계수 계산하기\n\n위의 성질을 이용하여 다음 문제를 풀 수 있다.\n\n```\n문제 9. 이항계수 계산하기\n\n입력 : 양의 정수 n (1 <= n <= 50, k: n/2)로 설정\n경우 1 : 재귀함수를 사용하여 결과값과 실행시간 출력\n경우 2 : 반복문을 사용하여 결과값과 실행시간 출력\n```\n\n이항계수 계산은 다음과 같은 규칙을 이용한다.\n\n$$\n\\binom{n}{k} = \\left(\\frac{n!}{k(n-k)!}\\right) = \\begin{cases}\\binom{n - 1}{k} + \\binom{n - 1}{k - 1}, & \\text{if 0 < k < n, 1 if k=0 or k=n}\\end{cases}\n$$\n\n<br>\n\n## 코드 및 풀이\n\n재귀 방식으로 작성한 코드는 다음과 같다.\n\n```python\ndef recursive09():\n    n = int(input(\"Input the number : \"))\n\n    def bino_recursive(n, k=(n//2)):\n        if n == k or k == 0 or n == 1:\n            return 1\n        if k == 1:\n            return n\n        if n > 50:\n            return \"Too big!\"\n\n        r = bino_recursive(n - 1, k) + bino_recursive(n - 1, k - 1)\n        return r\n    return bino_recursive(n)\n```\n\n\n매개변수로 각각 `n`, `k` 2개를 받는 재귀함수를 정의한다. 문제에서 `k`는 `n // 2`로 정의하였으므로 매개변수에서 기본으로 정의해준다. 문제에서 이항계수를 계산하는 수식을 사용하여 리턴 값을 계산하도록 하였다.\n\n이 문제에서는 탈출조건이 여러 개인데, 먼저 `n`과 `k`의 값이 같을 때와 `k = 0`, `n = 1`일 때는 각각 $0C0$, $nC0$의 값인 `1`을 리턴하도록 하였다. 또, `k = 1`일 때는 `n`으로 리턴값을 정의해주었으며, 문제에서 입력받는 `n`은 50을 초과하지 않으므로 예외처리를 해주었다.\n\n\n<br>\n\n## 실행시간 측정해보기\n\n메서드의 실행시간을 측정하는 `runtime()`를 여러 번 실행하여 실행시간의 평균값을 측정하였다.\n\n```python\n# 작성한 메서드를 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.\n\n# (3) recursive\n# 10,000번 실행했을 때\navg(recursive09)\n# 0.004200054943794385\n\n# 100,000번 실행했을 때\navg(recursive09)\n# 0.03512693246011622\n\n# 1,000,000번 실행했을 때\navg(recursive09)\n# 0.4098219453881029\n\n# 10,000,000번 실행했을 때\navg(recursive09)\n# 3.633702998238732\n```\n\n\n\n<br>\n","excerpt":"9번은 이항계수의 계산값을 재귀방식으로 구하는 문제이다. 여기서 이항계수(Binominal Coefficient)는 다음을 만족한다. 이항계수는  나 로 쓰기도 한다. 이항계수는 다음과 같은 성질을 가지는데 해당 문제는 다음 성질을 가진다. 실제로 …","fields":{"slug":"/recursion_09/"},"frontmatter":{"date":"Sep 11, 2017","title":"Python _ Recursion9. 이항계수 계산하기","tags":["algorithm","python","recursion"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환해주는 gcdlcm 함수를 완성해 보세요. 배열의 맨 앞에 최대공약수, 그 다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 gcdlcm(3,12) 가 입력되면, [3, 12]를 반환해주면 됩니다.\n\n<a href=\"https://programmers.co.kr/learn/challenge_codes/11\" target=\"_blank\">문제 보러가기</a>\n\n<br>\n\n### 코드 및 풀이\n\n\n```python\ndef gcdlcm(a, b):\n    max_num = max(a, b)\n    min_num = min(a, b)\n    while min_num != 0:\n        max_num, min_num = min_num, (max_num % min_num)\n    gcd_result = max_num\n    lcm_result = (a * b) // max_num\n    return [gcd_result, lcm_result]\n```\n\n`최대공약수`(Greatest Common Divisor, GCD)는 주어진 수들의 공통적인 약수 중 가장 큰 값이다. 즉, 3과 12가 있을 때 두 수의 최대공약수는 3이다.\n\n`유클리드 호제법`을 사용하여 풀었는데, 유클리드 호제법이란 2개의 자연수 또는 정식의 최대공약수를 구하는 알고리즘의 하나이다. `호제법`이란 **두 수가 서로 상대방의 수를 나누어 결국 원하는 수를 얻는 알고리즘을 뜻한다.**(<a href=\"https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95\" target=\"_blank\">더 알아보기</a>)\n\n위의 알고리즘을 이용하면 일단 나누어질 수가 나눌 수보다 커야하므로 두 수의 대소비교를 통하여 각각 `max_num`, `min_num`이라 정의하였다.\n\n그리고 나누어보면 다음과 같은 규칙이 보인다.\n\n```\n(max_num, min_num)   # 주어진 값\n(min_num, max_num % min_num)   # 몫을 다시 나머지로 나눈다   \n(max_num % min_num, min_num // (max_num % min_num))\n\n...\n\na, b = b, a % b   # 일반화\n```\n\n위의 규칙을 가지고 **나머지가 0이 될 때까지** 계산을 반복하여 나왔을 때 나누어지는 값(=이전 식에서의 나누는 값)이 최대공약수이다.\n\n`최소공배수`(Least Common Multiple)는 주어진 두 수 모두의 배수를 만족하는 가장 작은 수이다. 최소공배수는 두 수의 곱을 최대공약수로 나눈 값이므로 최대공약수를 먼저 구한 뒤 초기값의 곱을 구해 나누어주면 된다.\n\n<br>\n\n**+추가**\n\n위 최대공약수를 구할 때 사용한 코드는 `메모이제이션` 개념을 활용한 것이다.\n\n<br>\n\n### 메모이제이션, Memoization\n\n컴퓨터 프로그램이 **동일한 계산을 반복할 때 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술**이다.\n\n단어를 봐도 `메모하다`의 의미를 가지고 있는 `memo`의 의미가 있으며, 메모이제이션의 의미는 `메모리에 넣다`라는 의미를 가지고 있다.\n\n메모이제이션 기술은 주로 검색, HTML소스 코드 생성, 암호화, 데이터압축 및 변환과 같은 반복적인 작업에 사용된다.\n\n<br>\n","excerpt":"문제 설명 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환해주는 gcdlcm 함수를 완성해 보세요. 배열의 맨 앞에 최대공약수, 그 다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 gcdlcm(3,12) 가 입력되면, 3, 12를 반환해…","fields":{"slug":"/level1. 최대공약수와최소공배수/"},"frontmatter":{"date":"Sep 11, 2017","title":"Python _ Lv1. 최대공약수와 최소공배수","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n1장에서는 파이썬과 장고의 표준 스타일가이드에 대해서 공부하였다. 2장에서는 장고를 사용할 때 최적화된 로컬환경을 구성하는 간단한 가이드를 소개한다.\n\n<br>\n\n## 1. 같은 데이터베이스를 사용하라\n\n개인 및 팀프로젝트를 진행할 때 로컬환경에서는 `SQLite3`을, 배포환경에서는 `PostgreSQL`을 각각 사용했었다. 하지만 도서에 따르면 이렇게 나누어 사용하는 것이 잘못된 방법이라 이야기한다. **어떤 데이터베이스를 선택하느냐에 상관없이, 로컬개발환경과 배포환경에서 사용하는 데이터베이스가 다를 경우 대비못한 상황이 발생할 수 있다**는 이야기다.\n\n<br>\n\n### 같은 데이터로 개발과 운영을 동시에?\n\n만약 위의 상황처럼 환경마다 다른 데이터베이스를 사용할 경우에는 로컬에서 테스트 및 개발을 위하여 운영환경 데이터베이스의 데이터를 가져올 수 없다. 운영 데이터베이스의 데이터를 SQL(Structured Query Language)로 덤프할 수는 있지만 익스포트와 임포트를 했다고 완전히 같은 복사본의 데이터를 가지고 있다고는 할 수 없다.\n\n<br>\n\n### 데이터베이스 간 제약조건의 차이?\n\n데이터베이스 종류가 다르면 당연히 필드 데이터 타입도 다를 수 있다. 장고를 사용할 경우에는 ORM이 처리를 해준다고 가정하고 작업을 하고, 필자 역시도 그 편차를 장고에서 해결해준다고 생각하고 사용했다. 기본적으로  SQLite3은 동적이고 느슨한 타이핑을 지원하고 있으며 장고의 ORM이 작성한 코드와 SQLite가 좀더 엄격한 타입으로 작용하게 해준다. 문제는 좀더 엄격한 데이터베이스로 이전을 했을 경우 `제약조건 에러`(constraint error)를 발생시킬 수 있다는 것이다. 로컬 환경에서는 폼과 모델 사이에서 생기는 문제나 복잡한 쿼리가 문제없이 작동할 수 있지만 운영 환경의 데이터베이스로 가면서 로컬에서 본 적이 없는 오류들이 발생하게 된다. 그리고 프로젝트를 운영환경에서 실행하기 전까지는 대부분 이러한 문제를 감지할 수 없다는 점을 생각해보았을 때 로컬과 운영환경에서 동일한 데이터베이스를 사용하는 것이 최적의 해결책이라 생각된다.\n\n<br>\n\n#### 최고의 조합은 `장고 + PostgreSQL`\n\n장고를 사용하는 개발자들은 대부분 `PostgreSQL`을 선호한다.\n\n**PostgreSQL이란?**\n\n- 15년 이상의 꽤 오랜 오픈소스 프로젝트의 역사를 가지고 있는 오픈소스 DBMS. 현재 9.2버전까지 출시됨.\n- 객체-관계형데이터베이스 시스템으로 Oracle과 비슷하지만 오픈소스이기 때문에 북미와 일본에서 많이 사용되고 있는 관계형데이터베이스시스템. 국내에서는 잘 사용하지 않고 있다.\n- 다른 제품과 비교하여 다양한 기능과 무난한 성능을 가지고 있으며 매뉴얼, 문서가 잘 정리되어 있다.\n- 사용자들이 꼽는 PostgreSQL의 장점은 ACID 및 트랜젝션 지원, 다양한 인덱싱 기법 지원, 유연한 Full-text search, 다양한 언어지원, 커뮤니티 및 문서의 뒷받침 등이 있다.\n- 아가사 크리스티의 소설 '코끼리는 기억한다'의 소설에서 따와 로고 모양이 코끼리다.(~~코끼리는 기억력이 좋다~~)\n- 더 읽어볼만한 링크 : <a href=\"http://d2.naver.com/helloworld/227936\" target=\"_blank\">한눈에 살펴보는 PostgreSQL</a>\n- 설치\n\t- 맥 OS - <a href=\"http://postgreapp.com/\" target=\"_blank\">맥용 원클릭 인스톨러</a>\n\t- 윈도우 - <a href=\"http://postgresql.org/download/windows/\" target=\"_blank\">윈도우용 원클릭 인스톨러</a>\n\t- 리눅스 - <a href=\"http://postgresql.org/download/linux/\" target=\"_blank\">관련링크</a>\n\n<br>\n\n### `fixture`를 믿지 말자\n\n장고에서 `fixture`는 장고가 DB에 임포트하는 방법을 알고 있는 데이터의 모음이다. 삽입할 데이터를 알고 있을 경우 `manage.py dumpdata` 명령어를 통해 `fixture`를 생성할 수 있다. 아니면 JSON, XML, YAML 등의 형식으로 직접 데이터 구조를 만드는 것 또한 `fixture`에 해당한다. 다음은 JSON 구조로 만든 `fixture`이다.\n\n```json\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n`fixture` 데이터를 장고 앱 내 `fixtures` 디렉토리에 저장해놓고 `dumpdata`, `loaddata` 명령어를 사용하여 데이터베이스에 삽입, 추출하는 것이다.\n\n설명을 읽으면서 느꼈겠지만 **`fixture`는 대량의 데이터를 삽입/추출할 때는 적절하지 않다.** 대부분 fixture는 개발 초기 단계에서 운영 데이터베이스의 가짜 데이터셋을 개발환경으로 옮겨 사용할 때 사용하곤 한다. `fixture`는 그 목적 자체가 큰 크기의 데이터셋을 이전하기에는 그다지 신뢰할 만한 도구가 아니다.\n\n<br>\n\n## 2. `pip`과 `virtualenv`\n\n`pip`은 **파이썬 패키지 인덱스(Python Package Index)와 그 미러 사이트에서 파이썬 패키지를 가져오는 도구**이다. 즉, 파이썬 패키지를 설치하고 관리하며, `virtualenv`를 지원한다.\n\n`virtualenv`는 **특정 환경에서 파이썬 패키지 의존성을 유지할 수 있도록 독립 파이썬 환경을 제공하고 관리해주는 도구**이다. 만약 virtualenv가 없다면 여러 버전의 프로젝트를 관리할 때 계속해서 장고를 설치해야하는 부담감이 생긴다.\n\n<a href=\"http://juliahwang.kr/django/2017/09/07/%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0.html\" target=\"_blank\">블로그내 virtualenv 사용 및 설치 포스트 보러가기</a>\n\n<a href=\"http://pip-installer.org\" target=\"_blank\">pip 설치하기</a>\n\n<a href=\"http://virtualenv.org\" target=\"_blank\">virtualenv 설치하기</a>\n\n<br>\n\n## 3. `pip`으로 패키지 관리하기\n\n`requirements.txt`는 설치하려는/설치된 패키지 파일의 목록을 나열한 파일이다. 해당 파일에는 프로젝트에서 사용하고 있는 패키지 파일의 이름과 설치 버전 정보가 담겨있다. 해당 파일과 `pip` 명령어를 사용하면 `requirements.txt` 파일 내의 패키지들을 가상환경 내에서만 설치하고 관리할 수 있다.\n\n```powershell\n# pip으로 현재 설치된 상태를 freeze 명령어로 긁어와 requirements.txt에 기록한다.\n$ pip freeze > requirements.txt\n```\n\n```powershell\n# 해당 requirements.txt에 적힌 모든 패키지를 설치한다.\n$ pip install -r requirements.txt\n```\n\n<br>\n\n#### PYTHONPATH 설정\n\nvirtualenv의 `PYTHONPATH`를 설정해 `django-admin.py`를 여러 작업에서 사용할 수도 있다.\n`virtualenv`로 가상환경을 활성화하고 파이썬을 실행한 후 `sys` 모듈을 통해 `site-packages` 폴더 내에 심볼릭 링크를 형성해줄 수 있다.\n\n\n```powershell\n# 가상환경 활성화\n$ pyenv virtualenv 3.5.3 <env_name>\n$ pyenv local <env_name>\n\n# ipython 설치 후 실행\n$ pip install ipython\n$ ipython\n\n# 인터프리터에서 PYTHONPATH에 현재 디렉터리와 최신버전 pip 등록\nIn [1]: import sys  # sys 모듈 호출\nIn [2]: sys.path   # path 모두 출력\nOut [2]:\n['',\n '/usr/local/var/pyenv/versions/3.5.3/envs/twoscoops/bin',\n '/usr/local/var/pyenv/versions/3.5.3/lib/python35.zip',\n '/usr/local/var/pyenv/versions/3.5.3/lib/python3.5',\n '/usr/local/var/pyenv/versions/3.5.3/lib/python3.5/plat-darwin',\n '/usr/local/var/pyenv/versions/3.5.3/lib/python3.5/lib-dynload',\n '/usr/local/var/pyenv/versions/3.5.3/envs/twoscoops/lib/python3.5/site-packages',\n '/usr/local/var/pyenv/versions/3.5.3/envs/twoscoops/lib/python3.5/site-packages/IPython/extensions',\n '/Users/hwangseonjeong/.ipython']\n\nIn [3]: sys.path.append('new/path')\n\n# 프로젝트 최상위 디렉터리에서 다음 명령어를 실행하면\n# 현재 디렉터리에서 패키지를 수정가능한 상태로 설치가능\n$ pip install -e .\n```\n\n또는 virtualenv의 `site-packages` 폴더 내에 `.pth` 확장자 파일을 삽입하여 절대경로로 기록하고자 하는 패키지만 작성하면 `PYTHONPATH`를 직접 설정하지 않아도 적용가능하다.\n\n<br>\n\n\n## 4. 버전 컨트롤 시스템 활용하기\n\n대표적으로 장고 개발자 사이에서 사용되는 버전 컨트롤 시스템은 `깃(Git)`과 `머큐리얼(Mercurial)`이 있다. 장고 프로젝트를 시작할 때 코드의 변경내용 및 개발사항을 추적하기 위해서는 반드시 버전컨트롤 시스템을 사용해야한다.\n\n버전 컨트롤 시스템은 다른 개발자들과 협업을 할 때도 변경사항을 서로 병합하는데 매우 유용하다. 또, 로컬에서 작업내용을 추적하는 것에 그치지 않고 백업을 위한 호스팅서비스를 사용해야한다. 주로 <a href=\"http://github.com/\" target=\"_blank\">Github(깃허브)</a>나 <a href=\"http://bitbucket.org/\" target=\"_blank\">Bitbucket(비트버켓)</a>을 사용한다.\n\n`Github`은 프라이빗 저장소를 유료로 제공하는 반면 `Bitbucket`은 무료로 제공하고 있다. 실제 운영환경까지 제작할 프로젝트를 올릴 경우에는 해킹 및 도용방지를 위해 `Github 유료 계정`을 사용하거나 `Bitbucket`을 사용하는 것을 추천한다.\n\n<br>\n\n### 협업시 동일한 환경 구성하기\n\n개발자 한 명의 로컬 개발환경과 운영환경을 통일하는 방식에 대해 이야기했다면 이제는 개발자 간의 개발환경을 통일하는 문제에 대해 이야기해본다.\n\n**서로 다른 운영체제를 사용할 경우** 개발은 맥, 윈도우에서 하고 운영은 리눅스 및 우분투 서버에서 이루어진다면 장고앱은 분명히 다르게 작동할 여지가 있다.\n**개발자 간 서로 다른 파이썬 버전을 사용하는 경우**도 마찬가지다. 또, **개발자 간 프로젝트 세팅이 미묘하게 다를 경우**에도 디버깅에 시간을 소비할 수 밖에 없다.\n\n앞서 열거한 경우들은 `베이그런트(Vagrant)`를 사용하여 쉽게 해결될 수 있는 문제들이다. `베이그런트`는 **재생산이 가능한 개발환경을 생성, 설정, 관리하는 데에 쓰는 대중적인 도구**이다. 베이그런트는 다른 가상머신과 쉽게 연동된다는 장점이 있다.\n\n예를 들어, 개발 환경이 OS X인데 운영환경은 우분투 환경일 경우 베이그런트와 프로젝트 내 `Vagrantfile`을 이용해 가상 우분투 환경을 로컬에서 바로 구성하고 프로젝트에 필요한 패키지 설치를 쉽게 끝낼 수 있는 것이다.\n\n추가로 베이그런트를 사용할 지 망설이는 사람들은 다음 장단점을 읽어보고 선택하기 바란다.\n\n**장점**\n\n- 프로젝트 개발팀원들에게 모두 같은 개발환경 제공 가능\n- 생성된 로컬 개발환경을 운영환경과 통일 가능\n\n**단점**\n\n- 장고와 마찬가지의 문제로, 필요하지 않는 기능들도 함께 제공되어 복잡성이 더해진다. 단순한 프로젝트라면 이러한 가상화 환경을 적용하지 않는 것이 좋다.\n- 구형 개발기기의 경우에는 가상기기를 돌리는 것 자체가 속도저하를 가져올 수 있다.\n\n또, 도커를 사용해 실행 환경만 가상화하여 서비스를 배포할 수도 있다. 그러나 운영체제 자체를 가상화하지는 않기 때문에 `맥 -> 도커 -> 윈도우 실행`과 같은 작업은 할 수 없다. 도커에 대해서는 추후에 따로 포스트할 예정이다.\n\n<br>\n","excerpt":"1장에서는 파이썬과 장고의 표준 스타일가이드에 대해서 공부하였다. 2장에서는 장고를 사용할 때 최적화된 로컬환경을 구성하는 간단한 가이드를 소개한다. 1. 같은 데이터베이스를 사용하라 개인 및 팀프로젝트를 진행할 때 로컬환경에서는 을, 배포환경에서는…","fields":{"slug":"/2scoops-2-최적화된장고꾸미기/"},"frontmatter":{"date":"Sep 10, 2017","title":"BookReview > Two Scoops of Django _ 2장. 최적화된 장고 꾸미기","tags":["book review","Django"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n어제부터 웹프로그래밍 스쿨 수료생 분들과 함께 `모내기 스터디`를 시작했다. 해당 스터디에서는 각자가 만들고 싶었던 개인 프로젝트를 진행하면서 서로 피드백을 주고받는다. 이번 포스트에서는 1주차 미팅에서 한 일을 기록하고 프로젝트 관련 공부내용을 정리하고자 한다.\n\n- 일시 : 2017년 9월 7일 수요일\n- 스터디 소요시간 : 오후 7시부터 2시간 30분\n\n<br>\n\n## 스터디 내용\n\n스터디 진행방향을 먼저 정하고 프로젝트 주제에 대해 생각해보는 시간을 가졌다. 그리고 정한 주제를 가지고 장고 프레임워크를 사용하여 초기 세팅까지 완료했다.\n\n- 프로젝트 코드를 업데이트할 `github organization` 및 개인 레포지토리(<a href=\"https://github.com/Monaegi/Julia-ArtDiscussion\" target=\"_blank\">Github Link</a>\n) 생성하기\n- 개인 프로젝트 주제 정하기\n- 개인프로젝트 세부 기능 구상하기\n- 프로젝트 개발환경 설치 및 첫 커밋까지 완료하기\n\n<br>\n\n## 개인 프로젝트 기획 - `Wordy Gallery`\n\n신진작가의 미술작품을 감상하고 사용자끼리 작품에 대한 의견을 나누는 웹서비스다. 웹서비스명은 `wordy gallery`로, 소란스러운 갤러리를 의미한다.\n\n<br>\n\n### 세부 기능명세\n\n**(기본) 유저인증기능**\n\n- 로그인/로그아웃/회원가입/유저정보변경 + 소셜로그인(페이스북, 선택)\n- 사용자 프로필페이지 (북마크한 이미지가 보이는 목록도 구성)\n- 로그인의 경우 `email` 계정을 username으로 설정하여 모델링할 계획이다.\n- 페이스북은 자바스크립트 SDK를 사용하여 구현해볼 계획이다.\n\n<br>\n\n**(1) 장르 or 키워드별 작품 인덱스 페이지**\n\n- 장르별 작품목록으로 가는 목록 페이지이다.\n- 이미지에 키워드를 띄워두고, 그림 위에 마우스 호버시 그림이 보이도록 한다.\n\n<br>\n\n**(2) 관련 작가 인덱스 페이지**\n\n- 작가별로 3D 태그 클라우드를 생성하여 클릭하면 해당 페이지로 갈 수 있도록 한다.\n- 상세페이지에 그림이 항상 떠있어야 하므로 빈 이미지 틀을 만들어두거나 `id=1`인 작품으로 렌더한다.\n\n<br>\n\n**(3) 작가별 작품 목록 페이지**\n\n- 작가 클릭하면 해당 작가의 작품목록이 이미지로 뜨는 페이지다.\n- 작가의 프로필페이지로 이동하면서 아래에는 작품목록이 뜬다.\n\n<br>\n\n**(4) 작품별 디테일 페이지**\n\n- 작품 상세페이지로 이동\n- 작품이미지, 작품설명, 댓글창, 관련작품목록 등이 뜬다.\n\n<br>\n\n**(5) discuss(댓글) 기능**\n\n- 메인페이지에서 '오늘의 작품'에 해당하는 작품들에 댓글을 달 수 있는 기능\n- 작품 디테일페이지에서 댓글을 달 수 있는 기능\n\n**(6) 작품 like toggle 또는 북마크 기능**\n\n- 작품 자체에 좋아요 기능을 추가한다.\n\n<br>\n\n### 추가적으로 해볼 기능\n\n(1) 유저등급 부여\n\n(2) 작품/작가 북마크 기능\n\n(3) 좋아하는 장르 선택한 것을 기반으로 작품 추천\n\n(4) 작가 또는 작품 서치 기능\n\n<br>\n\n---\n\n## 마치며\n\n혼자서 진행해보는 프로젝트를 든든한 사람들과 함께할 수 있어 영광이다. 2달 정도를 소요하고 싶은데 주어진 기간 내에 마칠 수 있었으면 좋겠다.\n\n스터디 프로젝트 세팅 관련 포스트는 <a href=\"#\" target=\"_blank\">1편. 장고 프로젝트 세팅하기</a>로 따로 포스트하였다.\n\n<br>\n\n## 과제\n\n2주차 스터디까지 DB 모델링 설계 및 url 구조를 설계하는 것을 과제로 진행하고, 서로의 설계에 대해 피드백을 받기로 했다.\n","excerpt":"어제부터 웹프로그래밍 스쿨 수료생 분들과 함께 를 시작했다. 해당 스터디에서는 각자가 만들고 싶었던 개인 프로젝트를 진행하면서 서로 피드백을 주고받는다. 이번 포스트에서는 1주차 미팅에서 한 일을 기록하고 프로젝트 관련 공부내용을 정리하고자 한다. …","fields":{"slug":"/web_1.1-개인 프로젝트 기획/"},"frontmatter":{"date":"Sep 08, 2017","title":"Web _ 1.1 장고를 사용한 개인 프로젝트 기획 및 세팅하기","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n`SPA`(Single Page Application)란 웹페이지를 보여줄 때 하나의 페이지에서 여러 컴포넌트들의 리소스(HTML, CSS, JS 등 페이지를 구성하는 코드들)를 지정한 URI에 따라 렌더해줄 수 있도록 구성한 웹 어플리케이션이다.\n\n<br>\n\n## SPA와 route 설정\n\nSPA를 제작하기 위해 Vue에서 라우트 설정을 통해 개인 프로젝트의 회원인증 관련 메뉴버튼을 구현해보았다.\n\n<br>\n\n## Vue 프레임워크 설치하기\n\n```powershell\n# vue를 simple버전으로 해당 폴더에 설치\n$ vue init webpack-simple [프로젝트명]\n\n# npm 설치\n$ npm install\n\n# 폴더 내부에 vue 프레임워크 구조가 생성된다.\n```\n\n`vue-cli`를 사용한다면 **npm**\n을 사용하여 라우터 모듈을 설치해 준다.\n\n```powershell\n$ npm i -D vue-router\n```\n\n<br>\n\n### 1. Vue Router 설정\n\n모듈 시스템에서 사용하면 `Vue.use()`을 추가하여 명시적으로 라우터를 추가해준다. 이는 `main.js` 파일 내부에 작성한다.\n\n```javascript\n// main.js\n\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter);\n```\n\n<br>\n\n### 2. 라우터 정의하기\n\n라우터는 `경로, 항로`라는 뜻이다. 즉, 어떤 경로명으로 요청을 보냈을 때 그에 따른 컴포넌트를 보여줄 수 있도록 설정해주는 작업이다.\n\n```javascript\n// main.js\n\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter);\n\n// Route Setting\n// 등록하고자 하는 경로를 모아놓는 리스트를 routes 변수에 할당\nconst routes = [\n\t{ path: '/', component: navigation }\n];\n\n// router에 새로운 VueRouter 객체 생성\nconst router = new VueRouter({\n\troutes\n});\n\n// router를 만들어진 Vue 객체에 등록\nnew Vue({\n\tel: '#app',\n\trouter,\n\trender: h => h(App)\n});\n```\n\n<br>\n\n### 3. 라우트 설정 분리하여 관리하기\n\n`main.js`에서 라우트 `routes` 리스트만 붙여넣고 따로 관리를 해준다.\n\n\n```js\n// routes.js\n\n// Route Setting\n// 등록하고자 하는 경로를 모아놓는 리스트를 routes 변수에 할당\nconst routes = [\n\t{ path: '/', component: navigation }\n];\n```\n\n그리고 사용할 컴포넌트를 불러온다. `webpack-simple`으로 Vue를 설치한 경우에는 `routes.js` 파일을 만들어주고, `webpack`으로 설치한 경우에는 `Router`폴더 내의 `index.js` 파일 내에 아래와 같이 작성한다.\n\n```js\n// Load Components\nimport navigation from './components/navigation.vue'\n```\n\n```js\n// Route Setting\n// routes를 내보낼 수 있도록 export해준다.\nexport const routes = [\n\t{ path: '/', component: navigation }\n];\n```\n\n내보내진 `data`는 `main.js`에서 불러와 사용할 수 있다.\n\n```js\n// main.js\n\n// routes는 const로 정의해주었기 때문에객체의 속성값으로 임포트해준다.\nimport {routes} from './routes'\n\n// routes는 임포트되어 하단의 설정에 적용된다.\nconst router = new VueRouter({\n\troutes\n});\n\nnew Vue({\n\tel: '#app',\n\trouter,\n\trender: h => h(App)\n});\n```\n\n`App.vue`에서는 임포트한 라우트 리스트를 불러와 `<template>` 태그 내에서 사용할 수 있도록 처리해준다.\n\n\n```html\n<template>\n  <div id=\"app\">\n    <navigation></navigation>\n    <router-view></router-view>\n  </div>\n</template>\n\n```\n\n```js\n<script>\nimport navigation from './components/navigation'\nexport default {\n  name: 'app',\n  components: {\n    navigation\n  }\n}\n</script>\n```\n\n```css\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\n위처럼 설정을 해주고 터미널에서 프로젝트 폴더의 루트 경로에서 다음 명령어를 실행하여 서버를 실행시켜보면 원페이지로 컨텐트가 렌더되는 것을 확인할 수 있다.\n\n```powershell\n$ npm run dev\n```\n\n<br>\n\n### 4. 라우트 설정 추가하기\n\n앞서 설정해 준 이후로 새로운 컴포넌트를 추가해주려면 다음과 같이 패스를 추가해주면 된다.\n\n```js\n// Router/index.js\n\nimport login from '@/component/login'\n\n// Route Setting\nexport const routes = [\n  { path: '/', component: navigation },\n  { path: '/login', component: login }\n]\n```\n\n<br>\n\n---\n\n## 마치며\n\n\n라우트 설정을 이용하면 SPA(Single Page Application)의 조건을 충족하면서 하나의 페이지 요청에서 부분적으로 컨텐트를 불러올 수 있다. 컴포넌트를 여러 개 만들면 페이지 별로 라우트, 즉 경로설정만 해주면 된다. 이러한 라우트 설정은 프론트에서 해줄 수도 있고 백엔드에서 설정해줄 수도 있다.\n","excerpt":"(Single Page Application)란 웹페이지를 보여줄 때 하나의 페이지에서 여러 컴포넌트들의 리소스(HTML, CSS, JS 등 페이지를 구성하는 코드들)를 지정한 URI에 따라 렌더해줄 수 있도록 구성한 웹 어플리케이션이다. SPA와 …","fields":{"slug":"/web-2.2-라우트설정하기_01/"},"frontmatter":{"date":"Sep 07, 2017","title":"Web _ 2.2 Vue.js를 사용하여 라우트 설정하기 <1부>","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 웹 프레임워크인 `장고`를 소개하고 장고의 개발환경 설치까지 알아본다.\n\n<br>\n\n## 장고란 무엇이고, 왜 쓰는가?\n\n`장고`는 파이썬으로 만들어진 오픈소스 웹 어플리케이션 프레임워크이다. 쉽게 말하면 **웹사이트를 쉽고 빠르게 개발하기 위해 필요한 공통적인 요소들을 제공해주는 웹 프레임워크**라 할 수 있다. 예를 들어 웹사이트에서 공통적으로 필요한 로그인, 회원가입, 로그아웃, 관리자 페이지 등의 기능을 제공해준다. 웹사이트를 새로 만들 때마다 위의 기능들을 처음부터 다시 구현하는 것보다는 장고와 같이 이미 있는 공통적인 요소들을 사용하여 새로운 웹사이트 개발의 간접비용을 최소화해준다는 이점이 있다.\n\n`프레임워크`의 정확한 의미는 **소프트웨어의 구체적인 부분에 해당하는 설계와 구현이 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들을 제공하는 것**이다. 라이브러리가 필요한 기능을 추가하여 사용할 수 있는 모듈이라면 프레임워크는 모듈을 작성하는 데에 필요한 기능 뿐만 아니라 `모듈 간 설계의 기본 구조`까지 제공해준다.\n\n정리하면, 프레임워크가 정한 일정한 구조를 따르면서 웹서비스를 만드는 데에 필요한 공통적인 요소를 사용하여 살을 붙여나가는 것이 장고를 사용한 웹개발이라 할 수 있다.\n\n<br>\n\n## 장고 개발환경 만들기\n\n### 1. 가상환경 설정\n\n가상환경(Virtual Environment)은 개발환경을 꾸리는 데에 가장 근본적이고 필수적인 요소이다. 한 대의 컴퓨터에 여러 프로젝트를 생성하고 관리해야한다고 생각해보자. 각각의 프로젝트는 여러 버전의 파이썬과 장고를 이용할 것이고 폴더마다 다른 개발환경을 구축해야할 필요성이 증가한다. 따라서 폴더별 환경을 독립적으로 나누어주는 프로그램을 사용해야하는데 이것이 바로 `pyenv`와 `virtualenv`이다. (Mac OS 기준으로 설명합니다.)\n\n`pyenv`는 파이썬 가상환경 관리 패키지이다. 프로젝트 별로 사용할 파이썬의 버전을 설치할 수 있고 관리해준다.\n\n`virtualenv` 및 `pyenv-virtualenv`는 프로젝트에 설치된 패키지들 간의 충돌을 막아주기 위해 사용하는 패키지이다. 장고는 파이썬을 사용하므로 `pyenv-virtualenv`를 설치하면 된다. 이는 프로젝트 전체를 파이썬 및 장고와 분리하여 웹사이트의 변경사항이 개발중인 코드에 영향을 주지 않도록 해준다. 해당 패키지들은 `brew` 명령어로 설치할 수 있다.\n\n콘솔에서 다음 명령어를 입력하여 패키지를 설치해준다.\n\n```powershell\n$ brew install pyenv\n$ brew install pyenv-virtualenv\n```\n\n<br>\n\n### 2. pyenv 경로설정 추가\n\n설치가 완료되면 pyenv 관련 설정을 쉘의 설정에 추가해준다. 개인적으로는 `zsh`를 기본 쉘로 사용하고 있기 때문에 zsh 설정파일인 `.zshrc`에 적어주었다.\n\n기본 콘솔을 사용할 경우에는 `.bash_profile`에 넣어준다.\n\n```powershell\n$ vi ~/.zshrc\n\n# 파일 하단에 추가할 코드\nexport PYENV_ROOT=/usr/local/var/pyenv\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n```\n\n쉘 설정에 위 코드를 추가한 후에는 터미널 자체를 껐다 켜거나 다음 명령어를 통해 설정을 업데이트해준다.\n\n```powershell\n$ source ~/.zshrc\n```\n\n<br>\n\n### 3. 사용할 파이썬 버전 설치\n\n방금 설치한 `pyenv`를 이용하여 프로젝트에 사용할 파이썬을 설치해준다. 어떤 버전을 설치할지 모르겠다면 다음 명령어를 통해 설치 가능한 파이썬 버전을 확인한다.\n\n```powershell\n$ pyenv install --list\n```\n\n현재 안정화 버전인 3.5.3을 설치하는 명령어는 다음과 같다. 파이썬은 버전에 따라 설치에 시간이 걸릴 수 있으므로 참고하자.\n\n```powershell\n$ pyenv install 3.5.3\n```\n\n<br>\n\n### 4. 프로젝트 가상환경 설정\n\n파이썬 설치가 왼료되면 함께 설치했던 `pyenv-virtualenv` 패키지를 사용하여 가상환경을 생성한다.\n\n```powershell\n$ pyenv virtualenv <python version> <env_name>  # 형식\n$ pyenv virtualenv 3.5.3 example_env\n```\n\n생성한 가상환경을 현재 폴더에 지정해준다.\n\n```powershell\n$ pyenv local example_env\n```\n\n현재 폴더의 가상환경 버전을 확인해본다.\n\n```powershell\n$ pyenv version\n```\n\n<br>\n\n전역 버전을 설정할 경우에는 `global` 명령을 통해 버전을 설정한다.\n\n```powershell\n$ pyenv global <version or env_name>\n```\n\n<br>\n\n### 5. 장고 설치하기\n\n장고는 파이썬 패키지 관리자인 `pip` 명령어로 설치할 수 있다. `pip`은 파이썬 패키지를 쉽게 설치하고 관리해준다.\n\npip으로 설치한 패키지 목록을 보고 싶을 때 다음 명령어를 사용한다.\n\n```powershell\n$ pip list\n```\n\n<br>\n\npip으로 패키지를 설치하거나 및 설치 되돌리기를 할 경우에는 다음 명령어를 사용한다.\n\n```powershell\n$ pip install <package_name>\n$ pip uninstall <package_name>\n\n# 장고 설치. 추가로 django_extensions와 ipython을 설치해준다(선택)\n$ pip install django\n$ pip install django_extensions\n$ pip install ipython\n```\n\n추가적으로 `pip`을 활용하자면 프로젝트 내에 설치한 패키지를 텍스트 파일에 기록해두어 나중에 제 3자가 해당 프로젝트를 `fork`하거나 `clone`받아 사용할 때 한번에 필요 패키지를 설치하도록 할 수 있다. 그 명령어는 다음과 같다.\n\n```powershell\n# pip으로 현재 설치된 상태를 freeze 명령어로 긁어와 requirements.txt에 기록한다.\n$ pip freeze > requirements.txt\n```\n\n```powershell\n# 해당 requirements.txt에 적힌 모든 패키지를 설치한다.\n$ pip install -r requirements.txt\n```\n\n<br>\n\n### 6. 프로젝트 생성하기\n\n장고까지 설치했다면 이제는 장고 프로젝트를 생성해보자.\n\n```powershell\n$ django-admin startproject <어플리케이션명>\n\n# 기본적으로 django_app이라는 이름을 붙여준다.\n$ django-admin startproject django_app\n```\n\n프로젝트를 생성하면 다음과 같은 트리구조가 만들어진다.\n\n```powershell\n# 현재 위치(폴더)의 파일구조를 보여준다.\n$ tree .\n.\n├── README.md\n├── django_app\n│   ├── config\n│   │   ├── __init__.py\n│   │   ├── settings.py\n│   │   ├── urls.py\n│   │   └── wsgi.py\n│   ├── db.sqlite3\n│   └── manage.py\n└── requirements.txt\n```\n\n참고로 트리구조를 보려면 `brew`로 `tree` 패키지를 설치하면 된다.\n\n```powershell\n$ brew install tree\n```\n\n<br>\n\n### 7. 파이참에서 세팅 완료하기\n\n파이참은 파이썬 개발 IDE 중 하나로 Jetbrain사에서 무료 / 유료 버전을 제공하고 있다. 장고로 개발한다면 쉽고 직관적으로 개발할 수 있게 나온 소프트웨어이므로 사용하는 것을 추천한다.\n\n<a href=\"https://www.jetbrains.com/pycharm/download/#section=mac\" target=\"_blank\">여기를 클릭(Mac OS용)</a>하면 다운로드 페이지로 이동한다.\n\n파이참을 설치하고 프로젝트 기본구조가 생성된 폴더를 열어준다.\n\n**(1) 가상환경 지정**\n\n앞서 지정해준 가상환경을 파이참에서 인식할 수 있도록 설정해주어야 한다. `cmd + ,`를 눌러 설정창을 연다.\n\n설정 팝업창의 목록 중 `Project: <프로젝트명>`을 클릭하면 인터프리터 설정을 해줄 수 있는 `Project Interpreter` 탭이 뜬다.\n\n클릭해주고 상단의 Project Interpreter 바 오른쪽 끝에 있는 톱니바퀴 모양을 클릭하여 `Add Local`을 선택한다.\n\n![프로젝트 가상환경 설정1](imgs/2017-09-07/pycharm_setting_1.png)\n\n<br>\n\n아래 이미지를 참고하여 새로운 탭이 뜨면 아까 설정해준 `example_env`가 있는 경로를 찾아 OK 버튼을 누르면 된다.\n\n![프로젝트 가상환경 설정2](imgs/2017-09-07/pycharm_setting_2.png)\n\n\n이제 파이참에서도 가상환경을 인식한다. 파이참 내의 터미널은 가상환경을 설정해준 후 켜는 게 좋다. 참고로 파이참 내에서 터미널을 여는 단축키는 `option + fn + F12`이다. 만약 상단 F키가 우선순위로 설정되어 있는 키보드라면 `fn`키는 생략해야한다.\n\n<br>\n\n**(2) 프로젝트 루트폴더 지정**\n\n장고에서는 명시적 상대임포트 방식(<a href=\"http://juliahwang.kr/%EB%8F%84%EC%84%9C%20%EB%A6%AC%EB%B7%B0/2017/09/05/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC.html\" target=\"_blank\">관련글 보러가기</a>)을 사용하여 모듈 간의 관계를 표현해준다. 그렇기 때문에 반드시 프로젝트의 루트폴더를 지정해줘야한다.\n\n루트폴더로 지정할 `django_app`을 오른쪽 마우스로 클릭하여 뜨는 드롭다운 메뉴 중 `Mark Directory as`를 선택하고 `Source Root`로 설정해준다. (아래 이미지를 참고하면 된다.)\n\n\n![프로젝트 루트폴더 지정3](imgs/2017-09-07/pycharm_setting_3.png)\n\n\n<br>\n\n---\n\n<br>\n\n## 마치며...\n\n마침내 프로젝트를 진행하기 위한 설정을 모두 완료해주었다. 프로젝트를 진행하다보면 되려 처음 프로젝트 생성 및 개발환경 구축하는 방법을 잊어버리기 쉽다. 가끔은 초심으로 돌아가서 초기환경 세팅을 연습해보는 것도 나쁘지 않은 것 같다.\n\n<br>\n","excerpt":"이번 포스트에서는 웹 프레임워크인 를 소개하고 장고의 개발환경 설치까지 알아본다. 장고란 무엇이고, 왜 쓰는가? 는 파이썬으로 만들어진 오픈소스 웹 어플리케이션 프레임워크이다. 쉽게 말하면 웹사이트를 쉽고 빠르게 개발하기 위해 필요한 공통적인 요소들…","fields":{"slug":"/web_1.0-장고프로젝트세팅하기/"},"frontmatter":{"date":"Sep 07, 2017","title":"Web _ 1.0 장고 프로젝트 세팅하기","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 웹 프레임워크인 `장고`를 소개하고 장고의 개발환경 설치까지 알아본다.\n\n<br>\n\n## 장고란 무엇이고, 왜 쓰는가?\n\n`장고`는 파이썬으로 만들어진 오픈소스 웹 어플리케이션 프레임워크이다. 쉽게 말하면 **웹사이트를 쉽고 빠르게 개발하기 위해 필요한 공통적인 요소들을 제공해주는 웹 프레임워크**라 할 수 있다. 예를 들어 웹사이트에서 공통적으로 필요한 로그인, 회원가입, 로그아웃, 관리자 페이지 등의 기능을 제공해준다. 웹사이트를 새로 만들 때마다 위의 기능들을 처음부터 다시 구현하는 것보다는 장고와 같이 이미 있는 공통적인 요소들을 사용하여 새로운 웹사이트 개발의 간접비용을 최소화해준다는 이점이 있다.\n\n`프레임워크`의 정확한 의미는 **소프트웨어의 구체적인 부분에 해당하는 설계와 구현이 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들을 제공하는 것**이다. 라이브러리가 필요한 기능을 추가하여 사용할 수 있는 모듈이라면 프레임워크는 모듈을 작성하는 데에 필요한 기능 뿐만 아니라 `모듈 간 설계의 기본 구조`까지 제공해준다.\n\n정리하면, 프레임워크가 정한 일정한 구조를 따르면서 웹서비스를 만드는 데에 필요한 공통적인 요소를 사용하여 살을 붙여나가는 것이 장고를 사용한 웹개발이라 할 수 있다.\n\n<br>\n\n## 장고 개발환경 만들기\n\n### 1. 가상환경 설정\n\n가상환경(Virtual Environment)은 개발환경을 꾸리는 데에 가장 근본적이고 필수적인 요소이다. 한 대의 컴퓨터에 여러 프로젝트를 생성하고 관리해야한다고 생각해보자. 각각의 프로젝트는 여러 버전의 파이썬과 장고를 이용할 것이고 폴더마다 다른 개발환경을 구축해야할 필요성이 증가한다. 따라서 폴더별 환경을 독립적으로 나누어주는 프로그램을 사용해야하는데 이것이 바로 `pyenv`와 `virtualenv`이다. (Mac OS 기준으로 설명합니다.)\n\n`pyenv`는 파이썬 가상환경 관리 패키지이다. 프로젝트 별로 사용할 파이썬의 버전을 설치할 수 있고 관리해준다.\n\n`virtualenv` 및 `pyenv-virtualenv`는 프로젝트에 설치된 패키지들 간의 충돌을 막아주기 위해 사용하는 패키지이다. 장고는 파이썬을 사용하므로 `pyenv-virtualenv`를 설치하면 된다. 이는 프로젝트 전체를 파이썬 및 장고와 분리하여 웹사이트의 변경사항이 개발중인 코드에 영향을 주지 않도록 해준다. 해당 패키지들은 `brew` 명령어로 설치할 수 있다.\n\n콘솔에서 다음 명령어를 입력하여 패키지를 설치해준다.\n\n```powershell\n$ brew install pyenv\n$ brew install pyenv-virtualenv\n```\n\n<br>\n\n### 2. pyenv 경로설정 추가\n\n설치가 완료되면 pyenv 관련 설정을 쉘의 설정에 추가해준다. 개인적으로는 `zsh`를 기본 쉘로 사용하고 있기 때문에 zsh 설정파일인 `.zshrc`에 적어주었다.\n\n기본 콘솔을 사용할 경우에는 `.bash_profile`에 넣어준다.\n\n```powershell\n$ vi ~/.zshrc\n\n# 파일 하단에 추가할 코드\nexport PYENV_ROOT=/usr/local/var/pyenv\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n```\n\n쉘 설정에 위 코드를 추가한 후에는 터미널 자체를 껐다 켜거나 다음 명령어를 통해 설정을 업데이트해준다.\n\n```powershell\n$ source ~/.zshrc\n```\n\n<br>\n\n### 3. 사용할 파이썬 버전 설치\n\n방금 설치한 `pyenv`를 이용하여 프로젝트에 사용할 파이썬을 설치해준다. 어떤 버전을 설치할지 모르겠다면 다음 명령어를 통해 설치 가능한 파이썬 버전을 확인한다.\n\n```powershell\n$ pyenv install --list\n```\n\n현재 안정화 버전인 3.5.3을 설치하는 명령어는 다음과 같다. 파이썬은 버전에 따라 설치에 시간이 걸릴 수 있으므로 참고하자.\n\n```powershell\n$ pyenv install 3.5.3\n```\n\n<br>\n\n### 4. 프로젝트 가상환경 설정\n\n파이썬 설치가 왼료되면 함께 설치했던 `pyenv-virtualenv` 패키지를 사용하여 가상환경을 생성한다.\n\n```powershell\n$ pyenv virtualenv <python version> <env_name>  # 형식\n$ pyenv virtualenv 3.5.3 example_env\n```\n\n생성한 가상환경을 현재 폴더에 지정해준다.\n\n```powershell\n$ pyenv local example_env\n```\n\n현재 폴더의 가상환경 버전을 확인해본다.\n\n```powershell\n$ pyenv version\n```\n\n<br>\n\n전역 버전을 설정할 경우에는 `global` 명령을 통해 버전을 설정한다.\n\n```powershell\n$ pyenv global <version or env_name>\n```\n\n<br>\n\n### 5. 장고 설치하기\n\n장고는 파이썬 패키지 관리자인 `pip` 명령어로 설치할 수 있다. `pip`은 파이썬 패키지를 쉽게 설치하고 관리해준다.\n\npip으로 설치한 패키지 목록을 보고 싶을 때 다음 명령어를 사용한다.\n\n```powershell\n$ pip list\n```\n\n<br>\n\npip으로 패키지를 설치하거나 및 설치 되돌리기를 할 경우에는 다음 명령어를 사용한다.\n\n```powershell\n$ pip install <package_name>\n$ pip uninstall <package_name>\n\n# 장고 설치. 추가로 django_extensions와 ipython을 설치해준다(선택)\n$ pip install django\n$ pip install django_extensions\n$ pip install ipython\n```\n\n추가적으로 `pip`을 활용하자면 프로젝트 내에 설치한 패키지를 텍스트 파일에 기록해두어 나중에 제 3자가 해당 프로젝트를 `fork`하거나 `clone`받아 사용할 때 한번에 필요 패키지를 설치하도록 할 수 있다. 그 명령어는 다음과 같다.\n\n```powershell\n# pip으로 현재 설치된 상태를 freeze 명령어로 긁어와 requirements.txt에 기록한다.\n$ pip freeze > requirements.txt\n```\n\n```powershell\n# 해당 requirements.txt에 적힌 모든 패키지를 설치한다.\n$ pip install -r requirements.txt\n```\n\n<br>\n\n### 6. 프로젝트 생성하기\n\n장고까지 설치했다면 이제는 장고 프로젝트를 생성해보자.\n\n```powershell\n$ django-admin startproject <어플리케이션명>\n\n# 기본적으로 django_app이라는 이름을 붙여준다.\n$ django-admin startproject django_app\n```\n\n프로젝트를 생성하면 다음과 같은 트리구조가 만들어진다.\n\n```powershell\n# 현재 위치(폴더)의 파일구조를 보여준다.\n$ tree .\n.\n├── README.md\n├── django_app\n│   ├── config\n│   │   ├── __init__.py\n│   │   ├── settings.py\n│   │   ├── urls.py\n│   │   └── wsgi.py\n│   ├── db.sqlite3\n│   └── manage.py\n└── requirements.txt\n```\n\n참고로 트리구조를 보려면 `brew`로 `tree` 패키지를 설치하면 된다.\n\n```powershell\n$ brew install tree\n```\n\n<br>\n\n### 7. 파이참에서 세팅 완료하기\n\n파이참은 파이썬 개발 IDE 중 하나로 Jetbrain사에서 무료 / 유료 버전을 제공하고 있다. 장고로 개발한다면 쉽고 직관적으로 개발할 수 있게 나온 소프트웨어이므로 사용하는 것을 추천한다.\n\n<a href=\"https://www.jetbrains.com/pycharm/download/#section=mac\" target=\"_blank\">여기를 클릭(Mac OS용)</a>하면 다운로드 페이지로 이동한다.\n\n파이참을 설치하고 프로젝트 기본구조가 생성된 폴더를 열어준다.\n\n**(1) 가상환경 지정**\n\n앞서 지정해준 가상환경을 파이참에서 인식할 수 있도록 설정해주어야 한다. `cmd + ,`를 눌러 설정창을 연다.\n\n설정 팝업창의 목록 중 `Project: <프로젝트명>`을 클릭하면 인터프리터 설정을 해줄 수 있는 `Project Interpreter` 탭이 뜬다.\n\n클릭해주고 상단의 Project Interpreter 바 오른쪽 끝에 있는 톱니바퀴 모양을 클릭하여 `Add Local`을 선택한다.\n\n![프로젝트 가상환경 설정1](imgs/2017-09-07/pycharm_setting_1.png)\n\n<br>\n\n아래 이미지를 참고하여 새로운 탭이 뜨면 아까 설정해준 `example_env`가 있는 경로를 찾아 OK 버튼을 누르면 된다.\n\n![프로젝트 가상환경 설정2](imgs/2017-09-07/pycharm_setting_2.png)\n\n\n이제 파이참에서도 가상환경을 인식한다. 파이참 내의 터미널은 가상환경을 설정해준 후 켜는 게 좋다. 참고로 파이참 내에서 터미널을 여는 단축키는 `option + fn + F12`이다. 만약 상단 F키가 우선순위로 설정되어 있는 키보드라면 `fn`키는 생략해야한다.\n\n<br>\n\n**(2) 프로젝트 루트폴더 지정**\n\n장고에서는 명시적 상대임포트 방식(<a href=\"http://juliahwang.kr/%EB%8F%84%EC%84%9C%20%EB%A6%AC%EB%B7%B0/2017/09/05/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC.html\" target=\"_blank\">관련글 보러가기</a>)을 사용하여 모듈 간의 관계를 표현해준다. 그렇기 때문에 반드시 프로젝트의 루트폴더를 지정해줘야한다.\n\n루트폴더로 지정할 `django_app`을 오른쪽 마우스로 클릭하여 뜨는 드롭다운 메뉴 중 `Mark Directory as`를 선택하고 `Source Root`로 설정해준다. (아래 이미지를 참고하면 된다.)\n\n\n![프로젝트 루트폴더 지정3](imgs/2017-09-07/pycharm_setting_3.png)\n\n\n<br>\n\n---\n\n<br>\n\n## 마치며...\n\n마침내 프로젝트를 진행하기 위한 설정을 모두 완료해주었다. 프로젝트를 진행하다보면 되려 처음 프로젝트 생성 및 개발환경 구축하는 방법을 잊어버리기 쉽다. 가끔은 초심으로 돌아가서 초기환경 세팅을 연습해보는 것도 나쁘지 않은 것 같다.\n\n<br>\n","excerpt":"이번 포스트에서는 웹 프레임워크인 를 소개하고 장고의 개발환경 설치까지 알아본다. 장고란 무엇이고, 왜 쓰는가? 는 파이썬으로 만들어진 오픈소스 웹 어플리케이션 프레임워크이다. 쉽게 말하면 웹사이트를 쉽고 빠르게 개발하기 위해 필요한 공통적인 요소들…","fields":{"slug":"/web_10.0-장고프로젝트세팅하기/"},"frontmatter":{"date":"Sep 07, 2017","title":"Web _ 1.0 장고 프로젝트 세팅하기","tags":["Django","Project","Web development"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 수학을 공부하던 민지는 재미있는 사실을 발견하였습니다. 그 사실은 바로 연속된 자연수의 합으로 어떤 숫자를 표현하는 방법이 여러 가지라는 것입니다. 예를 들어, 15를 표현하는 방법은\n`(1+2+3+4+5)`, `(4+5+6)`, `(7+8)`, `(15)`로 총 4가지가 존재합니다. 숫자를 입력받아 연속된 수로 표현하는 방법을 반환하는 expressions 함수를 만들어 민지를 도와주세요. 예를 들어 15가 입력된다면 4를 반환해 주면 됩니다.\n\n[문제 보러가기](https://programmers.co.kr/learn/challenge_codes/41)\n\n<br>\n\n### 코드 및 풀이\n\n숫자를 더했을 때 나오는 값을 `더하는 값의 개수`별로 생각해본 결과 다음과 같은 수열이 나온다.\n\n- 2개씩 더했을 때 3부터 2씩 증가하는 수열 : `1, 2, 3, 4, 5, ...`\n\n\t일반화 수식 : `2n + 1`\n\n- 3개씩 더했을 때 6부터 3씩 증가하는 수열 : `3, 5, 7, 9, 11, ...`\n\n\t일반화 수식 : `3n + 3`\n\n- 4개씩 더했을 때 10부터 4씩 증가하는 수열 : `6, 9, 12, 15, 18, 21, ...`\n\n\t일반화 수식 : `4n + 6`\n\n- 5개씩 더했을 때 15부터 5씩 증가하는 수열 : `15, 20, 25, 30, 35, 40, ...`\n\n\t일반화 수식 : `5n + 10`\n\n... (계속됨)\n\n위 수열의 수식들을 나열해보면 새로운 수열이 생성된다.\n\n`2n + 1`, `3n + 3`, `4n + 6`, `5n + 10`, ...\n\n이 수열을 일반화하는 식은 다음과 같다.\n\n```\n(m + 1) * n + (m**2 + m) / 2\n```\n\n위의 식을 사용하여 다음과 같이 풀었다.\n\n```python\ndef expressions(num):\n    answer = 0\n    m = 0\n\n    # 1, 3, 6, 10, 15,... 로 증가하는 수열들의 첫번째 값들에서\n    # num을 초과하는 값으로 시작하는 값은 걸러낸다.    \n    while True:\n    \t # boundary는 각 수열들의 시작값이다.\n        boundary = (m ** 2 + m) // 2\n        # boundary가 num보다 큰 경우가 나올 때까지 반복문 실행\n        if boundary > num:\n            # boundary를 넘어서지 않는 범위 내에서 반복문을 돌며\n            for i in range(0, m - 1):\n                # 첫 수열은 항상 값이 있으므로 최대범위를 num인자로 잡고\n                for n in range(num + 1):\n                    # 위에서 구한 식을 isnum 변수에 할당\n                    isnum = (i + 1) * n + ((i ** 2 + i) // 2)\n                    # 숫자가 일치하고 그 때 n 값이 정수형인 것이 있으면\n                    if isnum == num and int(n):    \n                        # 경우의 수인 answer에 1 추가\n                        answer += 1\n                        # answer 반환\n            return answer\n        m += 1\n```\n\n<br>\n\n### 주석을 제거한 코드\n\n```python\n\"\"\"\n숫자의 표현\n\"\"\"\n\ndef expressions(num):\n    answer = 0\n    m = 0\n\n    while True:\n        boundary = (m ** 2 + m) // 2\n        if boundary > num:\n            for i in range(m - 1):\n                for n in range(num + 1):\n                    isnum = (i + 1) * n + ((i ** 2 + i) // 2)\n                    if isnum == num and int(n):    \n                        answer += 1\n            return answer  \n        m += 1\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(expressions(1590));\n```\n\n<br>\n","excerpt":"문제 설명 수학을 공부하던 민지는 재미있는 사실을 발견하였습니다. 그 사실은 바로 연속된 자연수의 합으로 어떤 숫자를 표현하는 방법이 여러 가지라는 것입니다. 예를 들어, 15를 표현하는 방법은\n, , , 로 총 4가지가 존재합니다. 숫자를 입력받아…","fields":{"slug":"/level4. 숫자의표현/"},"frontmatter":{"date":"Sep 06, 2017","title":"Python _ Lv4. 숫자의 표현","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이번 포스트에서는 초심으로 돌아가서 장고 프레임워크를 사용하기 전에 꼭 숙지해야하는 `표준 코딩 스타일`에 대해 알아보고자 한다.\n\n<br>\n\n# 읽기 쉬운 코드는 어떤 것인가?\n\n가독성이 좋은 코드는 로직이 한 눈에 보이고 유지 관리가 쉬우며 리펙터링이 용이한 코드다. 이러한 코드는 다음의 규칙을 따른다.\n\n- 축약되어 있거나 함축적인 함수명은 사용하지 않는다.\n- 함수 인자의 이름을 작성한다.\n- 클래스와 메서드를 문서화해놓는다.\n- 코드에 주석이 포함되어 있다.\n- 재사용 가능한 메서드는 반드시 리펙터링을 한다.\n- 함수와 메서드는 스크롤 없이 읽을 수 있을 정도의 길이로 작성한다.\n\n코드는 언제든지 재사용될 수 있다. 그 때 함수명을 난해하게 축약해놓았다면 함수를 구별하는 데의 `기술적 부채`가 긴 코드를 작성하는 것보다 더 클 수 있다. 위와 같은 규칙을 따르는 것이 다소 귀찮을지라도 예전에 작성한 코드라도 다시 열어봤을 때 바로 식별할 수 있도록 하기 위한 것이니 시간을 투자해도 아깝지 않을 것이다.\n\n<br>\n\n## 1. PEP 8\n\n`PEP 8`은 파이썬 공식 스타일 가이드이다. 파이썬의 대표적인 스타일 가이드는 다음과 같다.\n\n- 들여쓰기는`스페이스 4칸`\n- 최상위 함수와 클래스 선언 사이에는 `2 줄`을 띄운다.\n- 클래스 안에서의 메서드 간 간격은 `1 줄`을 띄운다.\n\nPEP 8을 직접 찾아보고 일일히 지킬 자신이 없다면 코드를 작성하면서 가이드를 확인해주는 PEP 8 패키지를 설치하자.\n\n[PEP 8 Python style guide checker](https://pypi.python.org/pypi/pep8)\n\n\n<br>\n\n### 진행중인 프로젝트의 관례를 먼저 생각하자\n\n이미 진행중인 프로젝트가 PEP 8 가이드를 따르고 있지 않다면 기존에 지키고 있는 관례를 따르는 것이 좋다.\n\n<br>\n\n### 코드품질 관리도구, `flake8`\n\n`flake8`은 코딩 스타일과 코드 품질, 논리적 에러를 점검하는 데 매우 유용한 도구로 알려져 있다. 해당 도구는 파이썬 패키지 관리자인 `pip`으로 설치하여 사용한다. 프로젝트 작업 중 대화형 인터프리터를 열고`check.py`를 실행하면 표준 코딩스타일에 어긋나는 에러를 검사해주며, 에러를 고치거나 무시할 수 있는 기능이 있다.\n\n[flake8 소개페이지 바로가기](https://pypi.python.org/pypi/flake8)\n[flake8 문서](http://flake8.pycqa.org/en/latest/)\n\n<br>\n\n### 한 줄의 글자 수는 79자 이내로\n\n`PEP 8`에서는 한 줄의 코드가 79자를 넘지 않도록 제한하고 있다. 이는 텍스트 줄바꿈을 지원하는 텍스트 편집기나 개발 관례상 **코드의 이해도를 떨어뜨리지 않는 수준의 줄 길이**이기 때문이다.\n\n특히 오픈소스 프로젝트처럼 많은 사람들이 코드를 건드릴 수 있는 경우에는 더더욱 이 규칙을 지키는 것이 좋다. 개인 및 비공개 프로젝트의 경우에는 최대 99자까지 사용해도 무방하다.\n\n앞서 설명한 표준 코딩스타일 가이드에서는 함수명을 축약하지 않는 것이 좋다고 했다. 하지만 긴 함수명 때문에 글자수가 79자를 넘길 경우에는 어떻게 해야할까 고민했던 사람들이 많을 것이다. 장고 코어 개발자인 애머릭은 이에 대해 **\"수십 년 전 하드웨어를 기준으로 만들어진 말도 안되는 숫자를 지키기보다는 읽기 쉽고 의미있는 변수명을 만드는 것이 더 중요하다\"**라고 말한 바 있다. 가독성의 측면에서 봤을 때 어떤 규칙을 지키는 것이 더 효율적인지 판단해보면 답은 이미 알고 있을 것이다.\n\n<br>\n\n## 2. 임포트\n\n`PEP 8`에서는 리소스를 임포트할 때 다음과 같은 순서로 그룹을 지으라고 권장한다.\n\n1. 표준 라이브러리 임포트\n2. 연관 외부 라이브러리 임포트\n3. 로컬 앱 또는 로컬 라이브러리에 한정된 임포트\n\n이를 장고 프로젝트에 대입해보면 다음 예제와 같다.\n\n```python\n# 표준 라이브러리 임포트 - 장고에 내장되어 있는 라이브러리들\nfrom __future__ import absolute_import\nfrom math import sqrt\nfrom os.path import abspath\n\n# 코어 장고 임포트 - 장고의 코어 파일들\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\n# 서드파티(외부) 앱 임포트 - pip, brew 등으로 설치한 (장고와 무관한) 라이브러리들\nfrom django_extensions.db.models import TimeStampedModel\n\n# 프로젝트 앱 임포트 - 프로젝트 내에 직접 생성한 파일들\nfrom flavors import FlavorListCreateView\n```\n\n<br>\n\n### 파이썬 임포트 유형\n\n파이썬에서 모듈을 임포트하는 방식은 다음 3가지가 있다. 각각 목적에 맞게 사용한다.\n\n`from core.views import FlavorMixin`\n\n- 절대 임포트 방식. 외부에서 임포트해서 현재 앱에서 이용할 때\n\n<br>\n\n`from .models import Flavor`\n\n- 명시적 상대 임포트 방식. 다른 모듈에서 임포트해서 현재 앱에서 이용할 때\n\n<br>\n\n`from models import Flavor`\n\n- 암묵적 상대 임포트 방식. 종종 다른 모듈에서 임포트해서 현재 앱에서 이용할 때 쓰지만 추천하지 않는 방식이다.\n\n<br>\n\n### 명시적 성격의 상대 임포트를 사용하라\n\n프로젝트 작업을 하다보면 점점 구조를 갖춰갈수록 코드 간의 연결관계가 복잡해진다. 이 때 코드를 옮기거나 이름을 변경하거나 버전을 나눌 경우 임포트해준 파일명을 일일이 수정해줘야하는 불상사가 발생한다. 이를 대비하여 파이썬에서는 `명시적 성격의 상대 임포트``(Explicit Relative Import)`를 사용하여 패키지명을 하드코딩하지 않고도 원하는 소스를 임포트할 수 있다.\n\n다음 예제를 보면 `하드코딩`된 임포트 스타일(위)은 `flavors`를 `flavor`로 변경할 경우 일일이 수정을 해줘야한다.\n\n```python\n# flavors/views.py\n\nfrom flavors.models import FlavorListCreateView\nfrom flavors.forms import FlavorForm\nfrom flavors.views import FlavorMixin\n```\n\n이는 `코드의 재사용성` 측면에서 문제가 되므로 `명시적 성격의 상대 임포트` 스타일로 바꿔보면 다음과 같다.\n\n```python\n# flavors/views.py\n\nfrom .models import FlavorListCreateView\nfrom .forms import FlavorForm\nfrom .views import FlavorMixin\n```\n\n\n여기서 `.`은 파일이 위치한 폴더를 가리킨다. 따라서 앱 이름을 굳이 명시하지 않아도 폴더 내의 모듈들을 알아서 찾아준다. 이러한 방식은 파이썬 패키지를 하나의 코드로 유닛화해주기도 한다.\n\n<br>\n\n### `from __future__ import absolute_import`\n\n`__future__` 모듈에서 임포트한 `absolute_import`는 항상 최상위 패키지명을 찾아 임포트해준다. 만약 현재 해당 임포트문을 사용하고 있는 파일 내에 `flavor` 모듈을 임포트할 경우에는 최상위 패키지에 같은 이름의 모듈이 있는지 먼저 살피고 없으면 해당 모듈을 임포트해준다.\n\n<br>\n\n### `import *`을 지양하자\n\n`import *`은 해당 패키지에 있는 모든 네임스페이스를 불러온다. 이 방법이 위험한 이유는 다른 파이썬 모듈의 네임스페이스들이 임포트해온 파일의 네임스페이스에 추가로 로딩되거나 기존 것들을 덮어쓸 수 있기 때문이다.\n\n`네임스페이스(namespace)`란?\n\n- 개체를 구분할 수 있는 범위를 나타내는 말로 일반적으로 하나의 이름 공간에서는 하나의 이름이 단 하나의 개체만을 가리키게 된다.\n\n```python\nfrom django.forms import *\nfrom django.db.models import *\n\n# 위의 임포트문은 아래의 상황을 유발할 수 있다.\n\nfrom django.forms import CharField\nfrom django.db.models import CharField\n```\n\n즉, form의 CharField를 models의 CharField로 덮어쓸 수 있기 때문에 필요한 부분만 임포트하는 습관이 필요하다.\n\n<br>\n\n## 3. 장고 코딩 스타일\n\n장고는 내부적으로 PEP 8을 확장한 장고만의 스타일 가이드라인을 가지고 있다. 장고의 표준 스타일은 앞서 소개한 `flake8` 플러그인으로 따를 수 있다. 다음은 대표적인 가이드라인이다.\n\n장고는 기본적으로 파이썬 스타일을 따른다.\n\n- 들여쓰기는 `스페이스 4칸`으로 표시한다.\n- camelCase를 지양하고 `언더스코어`로 변수, 함수, 메서드 이름을 표기한다. \tex_`hello_world()`\n- 클래스명에는 `첫 글자를 대문자`로 표기한다.\n- 가능하다면 편의 임포트를 사용한다.\n\n```python\nfrom django.views.generic import View  # (o)\nfrom django.views.generic.base import View  # (x)\n```\n\n- docstring에는 동사를 쓴다.\n- 장고의 템플릿 스타일은 중괄호와 변수명 사이에 띄어쓰기를 준수한다.\n- 장고의 view 메서드에 첫번째 매개변수는 반드시 `request`로 작성한다.\n\n```python\ndef my_view(request, foo):  # (o)\n\tpass\n\ndef my_view(req, foo):  # (x)\n\tpass\n```\n\n- 장고의 모델 필드명은 반드시 `소문자`로 작성하고 띄어쓰기는 `언더스코어`를 사용한다.\n\n```python\nclass Person(models.Model):\n\tfirst_name = models.CharField(max_length=20)  # (o)\n\tFirstName = models.CharField(max_length=20)  # (x)\n\tFirst_Name = models.CharField(max_length=20)  # (x)\n```\n\n- 클래스 내의 메타클래스는 반드시 필드 선언 후에 한 줄 띄우고 작성한다.\n- 추가로, 모델 내의 내부 클래스와 표준 메서드는 다음 예제의 순서를 따른다.\n\n```python\nclass Person(models.Model):\n\t# 데이터베이스 필드들\n\tfirst_name = models.CharField(max_length=20)\n\tlast_name = models.CharField(max_length=30)\n\n\t# 커스텀 매니저 속성 정의\n\tobjects = UserManager()\n\n\t# 메타클래스 정의\n\tclass Meta:\n\t\tpass\n\n\t# 객체 출력용 표준 메서드 정의\n\tdef __str__(self):\n\t\treturn self.last_name + self.first_name\n\n\t# 오버라이드 메서드 및 커스텀 메서드 정의\n\tdef save()\n\t\tpass\n\n\tdef get_absolute_url()\n\t\tpass\n```\n\n- 코드 작성을 완료한 후 사용하지 않는 임포트문은 모두 지워준다. 개인적으로 장고 내의 키바인딩에서 `cmd+L`로 단축키를 설정하여 지워주면 편리하다.\n\n- URL 패턴명은 `언더스코어(_)`를 사용한다.\n\n```python\nurlpatterns = [\n\turl(\n\t# 주소 URL에는 대시를 사용해도 무관하다.\n\tr'^add-flavor/$',   \n\tviews.add_flavor,\n\tname='add_flavor',\n\t),\n]\n```\n\n더 자세한 가이드는 [링크-장고문서](https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code/coding-style/)를 참고하기 바란다.\n\n<br>\n\n## 4. 자바스크립트, 마크업 코딩 스타일\n\n자바스크립트는 공식 스타일가이드가 따로 없다. 따라서 비공식 스타일을 따르거나, 자바스크립트 프레임워크에서 제공하는 스타일가이드를 따르면 된다.\n\nHTML과 CSS 같은 마크업 언어의 스타일가이드는 다음 링크를 참고하여 작성하면 된다. 특히 CSS의 경우에는 `CSScomb`라는 CSS용 코딩스타일 포맷도구가 있어 사용자 지정 스타일에 따라 가이드를 제공해준다.\n\n[@mdo가 쓴 HTML과 CSS 코드 가이드](http://codeguide.co)\n\n[CSScomb 살펴보기](http://csscomb.com)\n\n\n<br>\n\n## 5. 현업에서 코딩하기\n\n항상 주변의 개발자들이 다른 도구를 사용한다고 생각하고 가이드를 선택할 줄 알아야한다. 즉, 열린 자세로 코드 스타일을 받아들여야 한다는 이야기다. 아무리 작은 코드를 작성하더라도 작업내용과 코드 위치를 금방 찾을 수 있게 프로젝트 구조를 명료히 작성해야 한다.\n","excerpt":"이번 포스트에서는 초심으로 돌아가서 장고 프레임워크를 사용하기 전에 꼭 숙지해야하는 에 대해 알아보고자 한다. 읽기 쉬운 코드는 어떤 것인가? 가독성이 좋은 코드는 로직이 한 눈에 보이고 유지 관리가 쉬우며 리펙터링이 용이한 코드다. 이러한 코드는 …","fields":{"slug":"/2scoops-1-코딩스타일/"},"frontmatter":{"date":"Sep 05, 2017","title":"BookReview > Two Scoops of Django _ 1장. 코딩 스타일","tags":["book review","Django","REST api"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.\n\n> 예를 들어 A = [1, 2] , B = [3, 4] 라면\n> 1. A에서 1, B에서 4를 뽑아 곱하여 더합니다.\n> 2. A에서 2, B에서 3을 뽑아 곱하여 더합니다.\n\n> 수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.\n> 수열 A,B가 주어질 때, 최솟값을 반환해주는 getMinSum 함수를 완성하세요.\n\n[문제 보러가기](https://programmers.co.kr/learn/challenge_codes/182)\n\n<br>\n\n### 내 코드\n\n수열의 값을 하나씩 뽑아 곱하여 총합을 구할 때 가장 작은 값을 구하는 문제다. 최솟값을 구하려면 각각의 수열 내에서 가장 작은 값과 가장 큰 값을 곱하여 더해야한다. 따라서 수열을 `sorted()` 함수로 정렬한 후 수열 간의 인덱스를 반대로 구하여 곱해주었다. 반복문의 길이는 주어진 두 개의 리스트 길이가 같으므로 리스트 중 하나(A)로 통일하였다.\n\n```python\ndef getMinSum(A,B):\n\tanswer = 0\n\tA = sorted(A)\n\tB = sorted(B)\n\tfor i in range(len(A)):\n\t\tanswer += A[i] * B[-i-1]\n\treturn answer\n\n#아래 코드는 출력을 위한 테스트 코드입니다.\nprint(getMinSum([1,2],[3,4]))\n```\n\n<br>\n","excerpt":"문제 설명 자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이…","fields":{"slug":"/level2. 최솟값 구하기/"},"frontmatter":{"date":"Sep 05, 2017","title":"Python _ Lv2. 최솟값 구하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n1부에서 REST API의 핵심인 http 프로토콜에 대한 전반적인 내용을 다루었다. 2부에서는 REST API를 효율적으로 설계하는 방법들에 대해 소개한다. 해당 포스트는 `Two Scoops of Django`의 16장 `REST API 구현하기`를 요약하여 작성하였다.\n\n<br>\n\n## 1. API 컴포넌트를 어디에 위치시킬까?\n\nAPI를 구현하는 것 자체는 비교적 수월하게 끝냈다고 하더라도 이러한 API를 하나의 프로젝트 내에서 관리하는 최적의 구조를 생각하기란 쉽지 않다. 새로운 API가 추가될 경우나 버전 관리를 할 경우에는 어떤 코드가 어디에 위치하느냐가 중요해진다.\n\n### 작은 규모의 프로젝트\n\n제작해야할 API의 규모가 작은 대신 다양할 경우에는 작은 앱들이 여러 개 포함된 프로젝트가 생성된다. 이럴 때는 차라리 **프로젝트의 모든 API 관련 코드(시리얼라이저, 렌더러, 뷰 등)가 하나의 앱 내에 위치하는 것이 훨씬 더 좋은 방법**이다. 이러한 앱의 이름은 버전명으로 관리하여 버전별로 API를 관리할 수도 있다.\n\n그러나  이러한 구조는 API만 모아놓은 앱의 크기가 커졌을 때 문제가 될 수 있다. 따라서 프로젝트가 더이상 커지지 않을 경우(기능이 추가되지 않을 경우)에 적합하다고 할 수 있다. 또, API만 모아놓는 앱을 만들게 되면 API 관련 코드를 포함하지 않은 앱으로부터 리소스를 임포트해야할 경우 꼬이지 않게 주의해야한다.\n\n<br>\n\n### 큰 규모의 프로젝트\n\n하나의 `views` 모듈에 담기에 API가 너무 많은 경우에는 `views 폴더`를 생성하여 뷰클래스를 모듈별로 분할하는 것이 좋다. 하지만 이 경우 작게 나뉜 모듈들이 많아지면 혼란스럽고 관리하기 피곤해질 수 있다. 이 때는 뷰클래스의 크기와 갯수에 따라 적당히 위의 방법을 사용하는 것도 좋다.  \n\n<br>\n\n## 2. API 뷰에서 로직은 빼자\n\n뷰는 요청에 대한 페이지를 렌더해준다. 뷰에 비지니스 로직을 추가하게 되면 REST API를 생성할 경우 새로운 기능을 추가할 때마다 그에 맞춰서 코드를 반복수정해야한다. 대신 `모델의 메서드`나 `매니저 메서드`로 로직을 컴포넌트화하여 뷰에서 호출해 사용하는 방식으로 변경하는 것이 `코드의 확장 및 재사용성 측면`에서 좋다. 장고의 뷰에서 기본적으로 사용하는 로직 이외에 비지니스 로직은 뷰 밖에서 처리하도록 한다.\n\n<br>\n\n## 3. API URL 구조는 하나의 URL로 묶어놓자\n\n앱을 여러 개 만들어 작업하다보면 `view`들은 각각의 앱마다 생성하여 관리된다. view들이 앱마다 분산되어 있으므로 view를 호출하는 url을 한 군데에 모으는 방법으로 로직을 합칠 수 있다. 다음 예제를 보자.\n\n```python\n# core/api.py\nurlpatterns = [\n\turl(\n\tr'^api/',\n\tinclude(\"core.api\",\n\tnamespace=\"api\")\n\t),\n]\n```\n\n위의 패턴은 `core.api` 파일 안에 있는 모든 url 앞에 `api/`를 붙여 하나의 로직으로 묶어주는 역할을 한다. 이렇게 API 관련 URL만 모아서 정리해두면 버저닝이 훨씬 편리하다. API 업데이트시 하나로 묶어주는 패턴만 변경해주면 되기 때문이다.\n\n<br>\n\n## 4. API 버저닝을 생활화하자\n\n테스트를 진행할 경우, 작업한 API 별로 버전을 나누어두는 게 편리하다. 이는 **API의 URL에 버전 정보를 표시하는 것**으로 간단하게 처리할 수 있다.\n\n예를 들면 첫 url을 `/api/v1/flavors/`로 지정할 경우 다음 버전의 url은 `/api/v2/flavors/`로 칭할 수 있는 것이다. 이렇게 구성해놓으면 API 작업시 구별도 쉽고 무엇보다도 API를 변경할 때마다 기존 이용자들은 이전 버전의 API를 호출하여 사용하므로 새버전과 이전 버전의 API가 충돌하지 않는다.\n\n또, `flavors`앱과 `user`앱 중 `user`앱만 부분 업데이트를 할 경우에는 기존의 `/api/v1/flavors/`를 계속 사용하고 `/api/v2/users/`로 새로운 url을 사용할 수 있기 때문에 url을 구분하여 작업할 때 훨씬 편리하다.\n\n<br>\n\n## 5. API 중단하기\n\n기존 API 사용자들이 있을 경우에는 사용자들에게 기존 API 중단 및  업데이트 사실을 인지할 수 있도록 충분한 시간을 줘야한다. 사용을 중지하기로 한 API라도 몇 달 간은 사용할 수 있게 해주는 것이 좋다. API를 업데이트할 경우를 대비하여 오픈소스 API이라 할 지라도 미리 사용자들의 이메일 주소를 수집해놓는 것이 좋다.\n\n### 1) 사용자에게 서비스 중지 예고하기\n\n도서에 따르면 6개월 정도의 기간이 적당하고 최소 한 달 전에 알려주는 것이 좋다고 한다. API를 사용할 수 있는 메인 사이트, 이메일, 소셜 미디어, 블로그 등으로 알려주는 것이 좋다. 알림을 많이 보내서 일어날 일에 대해 걱정이 된다면 중지 사실을 모르고 일어날 문제들보다는 영향이 미미하므로 최대한 알림을 많이 보내주는 것이 좋다.\n\n<br>\n\n### 2) `410 상태코드 뷰`로 API 교체하기\n\n앞에서 기억해야 할 HTTP 상태코드로  `410 GONE`을 소개했다. 최종적으로 API가 중지되었을 때 간단하게 410 코드를 사용한 뷰를 이전 버전의 url에 연결해준다. 뷰에는 새로운 API에 대한 정보 및 문서로의 링크를 알려주도록 작성하면 된다.\n\n<br>\n\n## 7. API 접속 제한\n\n`접속 제한`이란 **한 명의 사용자가 주어진 시간에 얼마 이상의 요청을 보낼 때 이를 제어하는 것**을 말한다. REST 프레임워크는 반드시 API 접속 제한 기능을 제공하는 것이 좋다. API를 유료로 서비스하는 경우에는 요청에 제한을 둠으로서 가격 정책을 세울 수도 있을 것이다.\n\n**접속 제한은 웹서버에서 처리할 수도...**\n\n`nginx`나 `apache`의 접속 제한을 이용하여 API 사용을 제어할 수 있다. 하지만 파이썬 코드로부터 얻을 수 있는 기능적인 여러 면을 잃어버린다. 해당 부분은 좀 더 공부를 한 후 설명을 보충하도록 할 예정이다.\n\n\n<br>\n\n## 8. 내가 만든 API를 어떻게 알릴까?\n\n### 1. API 문서 활용\n\n자신이 만든 API를 다른 사용자가 사용할 수 있도록 하려면 API에 대한 자세한 설명 및 사용방법을 담은 문서 제작은 필수다. 개인적으로는 `Gitbook`을 사용했는데 가끔씩 오류가 발생해 사용이 불편하다는 단점이 있었다. 이외에도 `django-rest-framework`나 마크다운으로 제공해도 된다.\n\n<br>\n\n### 클라이언트 SDK 제공하기\n\n문서 작성이 완료되었다면 이제는 API를 좀더 널리 알리기 위해 여러 언어를 지원하는 `SDK(software development kit)`을 사용할 수 있다. 도서에 따르면 다음의 언어는 필수적으로 지원하는 것이 좋다고 한다.\n\n- 파이썬\n- 자바스크립트\n- 루비\n- PHP\n- 고(Go)\n- 자바\n\nSDK 라이브러리를 이용하여 데모 프로젝트를 구현해보면 사용자가 실제로 API를 어떻게 경험하는지 알 수 있게 된다. (~~개인적으로는 클라이언트 SDK 만들기에 대한 공부를 해봐야겠다.~~)\n\n\n<br>\n","excerpt":"1부에서 REST API의 핵심인 http 프로토콜에 대한 전반적인 내용을 다루었다. 2부에서는 REST API를 효율적으로 설계하는 방법들에 대해 소개한다. 해당 포스트는 의 16장 를 요약하여 작성하였다. 1. API 컴포넌트를 어디에 위치시킬까…","fields":{"slug":"/2scoops-16-RESTAPI_02/"},"frontmatter":{"date":"Sep 03, 2017","title":"BookReview > Two Scoops of Django _ 16장. REST API 구현하기 <2부>","tags":["book review","Django","REST api","HTTP"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`REST API`(Representational State Transfer)는 기존의 HTTP 통신 프로토콜을 제대로 활용하기 위해 만들어진 규칙이다. 또한 인터넷은 더이상 `HTML`형식에만 국한되지 않고 `Ajax`, `JSON`, `XML`, `YAML`등의 여러 형식을 지원하고 있다. 이에 따라 다양한 환경과 용도에 맞는 데이터를 제공하는 디자인으로 `REST API`를 사용하는 경우가 많아졌다. 이번 포스트에서는 REST API의 개념을 숙지하고 장고에서 REST API를 구현하는 방법들에 대해 정리해보자.\n\n해당 포스트는 `Two Scoops of Django`의 16장 `REST API 구현하기`를 요약하여 작성하였다.  \n\n<br>\n\n### RESTful하다?\n\n- 모든 자원에는 `ID`가 부여되며 ID를 통해 서로 구별된다.\n- 모든 자원은 연결될 수 있다.\n- HTTP 및 대부분의 소프트웨어가 가지는 기본적인 데이터 처리기능인 표준 통신메서드를 사용한다.(`Create-POST(생성)`, `Retrieve-GET(조회)`, `Update-PUT(수정)`, `Delete-DELETE(삭제)`)\n\n<br>\n\n### 패키지 API를 제작하기 위한 패키지들\n\n(장고 기준)\n\n#### `django-rest-framework`\n\n프로젝트시 사용했던 패키지로, 장고의 클래스 기반 뷰를 바탕으로 브라우징이 가능한 편리한 API 기능을 제공한다. 현존하는 패키지 중에서는 클래스 기반 뷰와 함수 기반 뷰를 모두 제공하기 때문에 가장 많이 사용된다.\n\n<br>\n\n#### `django-tastypie`\n\n[링크](https://django-tastypie.readthedocs.io/en/latest/)\n\n`django-tastypie`를 사용하면 자체적으로 제공하는 클래스 기반 뷰 시스템으로 장고에서 API를 제작할 수 있다.\n\n<br>\n\n#### `django-braces`, `django-jsonview`\n\n단순하게 API를 제작하고 싶을 경우에는 `django-braces`나 `django-jsonview`를 사용할 수 있다.\n\n[django-braces](https://django-braces.readthedocs.io/en/latest/)는 클래스 기반 뷰를 제공하며 다양한 기능의 Mixin을 제공하고 있다. 현재 장고에는 자주쓰는 `LoginRequiredMixin`과 같은 기능은 내장되어 있다.\n\n[django-jsonview](https://github.com/jsocol/django-jsonview)는 파이썬 객체를 JSON 형태로 변환해주는 간단한 데코레이터를 제공한다.\n\n<br>\n\n### HTTP 메서드\n\nREST API는 앞서 말한 것 처럼 HTTP 프로토콜을 제대로 활용하기 위해 만들어진 규칙이다. HTTP는 콘텐트를 배포하기 위한 액션을 정의한 메서드 집합을 제공하는데, REST API 구현시 반드시 이러한 메서드들에 대한 개념을 알고 사용하여야 한다.\n\n|HTTP 메서드 | 요청 목적 | 비슷한 개념의 SQL 명령어 |\n|:---------:|:-------:|:----------------:|\n|POST|새로운 리소스 `생성`|INSERT|\n|GET|리소스 읽기 |SELECT |\n|HEAD|리소스의 메타데이터 요청||\n|PUT|리소스 수정(업데이트)|UPDATE|\n|PATCH|리소스 부분 수정|UPDATE|\n|DELETE|리소스 삭제|DELETE|\n|OPTIONS|현재 웹서버에서 지원하는 method가 어떤 것들이 있는지 출력||\n|TRACE|요청에 대한 반환 에코(다시 알려줌), 디버깅시 유용하게 사용가능||\n|CONNECT|TCP/IP 터널링(일반적으로 구현x)||\n\n<br>\n\n#### `메타데이터?`\n\n메타(Meta)는 일반적으로 `~에 관한`이라는 의미를 지니고 있다. 따라서 메타데이터는 다른 데이터를 기술하기 위해 사용하는 데이터라고 할 수 있다. 요약하면 '데이터에 관한 구조화된 데이터로, 다른 데이터를 설명해주는 데이터라 할 수 있다.\n\n`HEAD` 메서드를 사용하면 전체 표현을 읽지 않고도 `메타데이터`를 통해 리소스의 정보를 파악할 수 있다. 클라이언트는 `OPTIONS` 또한 사용하는데, 해당 메서드를 통해 특정 리소스에 허가된 메서드를 검사할 수 있다.\n\n<br>\n\n#### `CONNECT`와 터널링\n\nhttp 요청 메서드 중 `CONNECT`는 생소해서 좀 더 찾아보았다. 먼저 설명에 필요한 `프록시`나 `터널` 등에 대한 개념을 정리하면 다음과 같다. `프록시`는 서버와 클라이언트의 양쪽 역할을 하는 중계 프로그램이다. 클라이언트로부터 요청을 서버에 전송하고 서버로부터 받은 응답을 클라이언트에 전송한다.\n\n이러한 프록시 서버 중 일부는 터널을 구성한다. `터널`은 서로 떨어진 두 대의 클라이언트와 서버 사이를 중계하면서 접속을 유지해주는 중계 프로그램이다. 터널은 요청에 따라서 다른 서버와의 통신 경로를 만들기도 하는데, 클라이언트가 인증(SSL, HTTPS)을 사용하여 서버와 안전하게 통신하려고 할 경우에도 사용한다.\n\n<br>\n\n#### HTTP 요청메서드와 REST API\n\n- 읽기 전용 API만 구현할 경우에는 `GET`을 사용한다.\n- 읽기/쓰기 API를 구현할 경우에는 `POST`, `PUT`, `DELETE` 등을 사용할 수 있다. `PUT`을 사용해도 `POST`와 같이 리소스를 생성할 수도 있다. 구현하기 나름이다.\n- 반대로 단순하게 작성하려면 모든 API의 통신 메서드를 `GET`과 `POST`만으로 구현할 수도 있다.\n- **`GET`, `PUT`,`DELETE`는 여러 번 실행해도 그 결과가 변하지 않는 `멱등(idempotent)` 관계이다.**\n- **`POST`, `PATCH`는 여러 번 실행할 때마다 변한다.**\n- `PUT`을 구현했다면 `PATCH`도 구현하는 것이 좋다.\n\n<br>\n\n#### HTTP 메서드와 멱등 관계\n\n`멱등성`(idempotence)이란 수학이나 전산학에서 연산을 여러 번 반복 적용해도 결과가 달라지지 않는 성질을 의미한다. 예를 들어 4를 계속 곱해도 같은 값이 나오게 하려면 0을 계속 곱하거나 1을 곱하면 된다.\n\n```\n4 * 1 * 1 * ... * 1 = 4    # 언제나 4\n4 * 0 * 0 * ... * 0 = 0    # 언제나 0\n```  \n\n이처럼 HTTP 메서드에서도 여러 번 같은 요청을 보냈을 때 같은 결과를 보내주는 메서드들이 있다. `GET`, `PUT`, `HEAD`, `DELETE` 등이 바로 `멱등성`을 띤다. 즉, **HTTP 메서드에서 멱등성은 동일한 요청에서 동일한 결과를 보장함**을 의미한다. 즉, 자체 `context`가 없으면 멱등성이 성립한다.\n\n먼저, `GET`과 `HEAD`요청은 데이터를 읽기만 하고 서버의 상태를 바꾸지 않는다. readonly의 성격을 가지기 때문에 당연히 context가 필요 없다. 그렇다면 `PUT`은 왜 멱등성을 충족할까? `PUT`은 RESTful 관례상으로 `replace`를 의미하기 때문에 context를 가질 필요가 없다. 만약 개인정보를 수정해야한다면 원래의 개인정보는 사용자가 입력한 새로운 정보로 대체된다. `PUT`요청 시 항목 X를 B로 '간주'하게 되는 것이다.\n\n`POST`나 `PATCH`의 경우에는 RESTful 관례상 자체적으로 요청을 처리하는 함수가 자체 `context`를 가지기 때문에 매 요청마다 다른 결과가 나올 수 있다. 특히 `PATCH`는 RESTful 관례상 `update`를 의미하기 때문에 context를 가진다. `PUT`과는 달리 항목 X를 A에서 B로 변경하는 것이기 때문에 A의 값에 따라 결과가 달라질 수 있다.\n\n`DELETE`를 쓸 때는 한번 요청을 보내면 해당 URL의 리소스가 삭제된다. 그리고 다음에 같은 요청을 보내도 이미 지워진 내용을 또 지운 것이므로 결과가 같다. 따라서 멱등법칙이 성립하는 것이다.\n\n**멱등성은 설계에 따라 성립하지 않을 수도 있다.** 당연한 말이지만 위에서 설명한 HTTP 메서드들의 멱등성은 서버 개발자가 어떻게 구현하고 설계하느냐에 따라 성립하지 않을 수도 있다. 장고에서는 자동으로 관례를 따르기 때문에 알아두는 것이 좋다.\n\n정리하면 HTTP의 멱등성은 동일한 요청(input)을 입력할 때 동일한 결과(output)가 나오는 것을 의미한다. **이러한 멱등성은 HTTP 통신의 신뢰성을 높여준다.** 여러 번 요청 후에도 같은 결과가 보장될 경우 요청이 실패했다고 해도 단순히 같은 요청을 다시 보내면 되기 때문이다. 이미 먼저 보낸 요청이 처리되었을 경우에도 같은 결과이므로 상관없다. 그렇다면 멱등관계가 성립되지 않는 `POST`, `PATCH`와 같은 메서드는 어떨까? 당연히 안전하지 않다.\n\n<br>\n\n### HTTP 상태코드\n\n기본적이고 자주 쓰이는 상태코드는 [다음 링크](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)를 참고하면 된다. 해당 포스트에서는 상태코드 중 기억하면 좋을 것만 정리해 보았다.\n\n#### 범위별 응답코드 의미\n\n- 100번대 : 요청이 들어왔을 때 정보적인 성격을 띠는 응답을 돌려준다.\n- 200번대 : 요청이 들어왔을 때 요청의 성격에 따라 '성공' 응답을 돌려준다.\n- 300번대 : 클라이언트의 요청을 수행하기 위해 부가적인 액션을 취해야한다는 응답을 돌려준다. 보통 요청을 리다이렉트(우회)할 때 사용한다.\n- 400번대 : 클라이언트에 의해 요청이 실패했을 때의 응답을 돌려준다.\n- 500번대 : 서버가 정당한 요청을 수행하지 못했을 때의 응답을 돌려준다.\n\n<br>\n\n#### API 업데이트 시 기억해두면 좋을 응답코드\n\n|HTTP 상태코드|성공/실패|의미|\n|:---------:|:-----:|:------:|\n|410 GONE|실패|모든 통신메서드 - 더이상 제공되지 않는 메서드로 호출하여 새 버전의 API를 제공하기 위해 기존 API 서비스를 중지할 때 이용된다. 예를 들어 모바일 앱의 경우에는 해당 결과에 대해 사용자에게 어플 업그레이드를 요청하는 방법을 사용한다.|\n\n<br>\n\n#### HTTP 응답코드 `200`과 `202`의 차이에 대하여\n\nHTTP 응답코드는 서버에서 브라우저의 요청을 받아 응답을 반환하며 보내주는 상태를 알려준다. 그런데 최근 성공코드에 해당하는 `200`코드와 `202`코드에 대한 차이를 설명하라는 질문을 받고 당황한 기억이 있다. 프로젝트 도중 `202` 코드를 사용한 적이 있었는데 의미를 제대로 알고 썼는지 알아보는 질문이었다. 나중에 책을 찾아보고 `자주쓰이는 200` 통신과 `거의 사용하지 않는 202` 응답 코드의 차이를 알아보았다.\n\n`200 OK`의 의미는 HTTP 요청이 성공했을 때 가장 많이 사용하는 응답코드이다. 요청 메서드가 `GET`일 때는 응답에 `요청된 자원`을 포함한다. 요청 메서드가 `POST`일 때는 응답에 액션의 결과를 포함한다.\n\n그렇다면 자주 쓰지 않는 `202 Accepted`는 어떤 의미일까? `200`과 마찬가지로 성공적인 응답코드이기는 하지만 요청에 대한 응답이 돌아오는 것과 상관없이 성공 코드를 먼저 출력해버린다. 따라서 요청에 대한 응답이 맞는지 체크하는 과정을 생략하고 무조건 성공 메세지를 보내게 되는 것이다.\n\n<br>\n\n해당 포스트는 `Two Scoops of Django` 도서의 16장 `REST API 구현하기 <2부>`로 계속됩니다. 2부에서는 REST API를 효율적으로 설계하는 방법들에 대해 소개합니다.\n\n<br>\n\n### 참고자료\n\n- 도서 Two Scoops of Django p.187 ~\n- [PATCH 메서드와 멱등성](http://restcookbook.com/HTTP%20Methods/patch/)\n- [HTTP 응답코드 참고](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n<br>\n","excerpt":"(Representational State Transfer)는 기존의 HTTP 통신 프로토콜을 제대로 활용하기 위해 만들어진 규칙이다. 또한 인터넷은 더이상 형식에만 국한되지 않고 , , , 등의 여러 형식을 지원하고 있다. 이에 따라 다양한 환경과…","fields":{"slug":"/2scoops-16-RESTAPI_01/"},"frontmatter":{"date":"Aug 30, 2017","title":"BookReview > Two Scoops of Django _ 16장. REST API 구현하기 <1부>","tags":["book review","Django","REST api","HTTP"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> Jaden_Case함수는 문자열 s을 매개변수로 입력받습니다. s에 모든 단어의 첫 알파벳이 대문자이고, 그 외의 알파벳은 소문자인 문자열을 리턴하도록 함수를 완성하세요. 예를 들어 s가 \"3people unFollowed me for the last week\"라면 \"3people Unfollowed Me For The Last Week\"를 리턴하면 됩니다.\n\n[문제 보러가기](https://programmers.co.kr/learn/challenge_codes/134)\n\n<br>\n\n### 내 코드\n\n#### 방식 1\n\n문자열을 먼저 소문자로 모두 바꾼다. 그리고 단어 별로 리스트에 삽입한 후  반복문을 사용하여 단어의 첫글자만 대문자로 변경한다. 그리고 결과 리스트에 다시 넣어 문장으로 리턴한다.\n\n```python   \n\"\"\"\nJadenCase 문자열 만들기\n\"\"\"\n\ndef Jaden_Case(s):\n    low_s = s.lower()\n    a = low_s.split()\n    result = []\n    for i in a:\n        p = i[0].upper()\n        words = p + i[1:]\n        result.append(words)\n\n    sen = \" \".join(result)\n    return sen\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(Jaden_Case(\"3people unFollowed me for the last week\"))\n# 3people Unfollowed Me For The Last Week\n```\n\n<br>\n\n#### 방식 2\n\n위의 방식에서는 2개의 리스트를 사용하였다. 입력받은 문장을 단어 단위로 쪼갠 리스트와 첫글자를 대문자로 변환하는 처리가 된 후의 단어를 넣는 리스트이다.  좀 더 간결하게 코드 리펙토링을 하여 리스트를 하나만 사용하면서 변환된 단어로 대체하는 방식으로 코드를 작성하였다.\n\n```python\ndef Jaden_Case(s):\n    low_s = s.lower()\n    a = low_s.split()\n\n    for i in range(len(a)):\n        words = a[i][0].upper() + a[i][1:]\n        a[i], words = words, a[i]\n    result = \" \".join(a)\n    return result\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(Jaden_Case(\"3people unFollowed me for the last week\"))\n# 3people Unfollowed Me For The Last Week\n```\n\n<br>\n\n#### 방식 3\n\n파이썬의 내장함수인 `title()`을 사용하여 자동으로 단어의 첫글자만 대문자로 바꿔주게 처리하였다. 이 때 `3People`과 같이 예외상황이 발생하므로 이 경우에는 첫글자가 숫자인지 판별하여 숫자일 경우 2번째 오는 문자를 소문자로 바꿔주는 처리를 추가해주었다.\n\n```python\ndef Jaden_Case(s):\n    p = s.title()\n    l = p.split()\n    for i in range(len(l)):\n        if l[i][0].isdigit():\n            a =  l[i][0] + l[i][1:].lower()\n            a, l[i] = l[i], a\n            return \" \".join(l)\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(Jaden_Case(\"3people unFollowed me for the last week\"))\n# 3people Unfollowed Me For The Last Week\n```\n\n<br>\n","excerpt":"문제 설명 Jaden_Case함수는 문자열 s을 매개변수로 입력받습니다. s에 모든 단어의 첫 알파벳이 대문자이고, 그 외의 알파벳은 소문자인 문자열을 리턴하도록 함수를 완성하세요. 예를 들어 s가 \"3people unFollowed me for t…","fields":{"slug":"/level2. JadenCase 문자열 만들기/"},"frontmatter":{"date":"Aug 30, 2017","title":"Python _ Lv2. JadenCase 문자열 만들기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n피보나치 수열의 각 항은 바로 앞의 항 두 개를 더한 것이 된다. 1과 2로 시작하는 경우 이 수열은 아래와 같다.\n\n```\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n```\n\n이 때 짝수이면서 4백만 이하인 모든 항을 더하면 얼마가 되는지 구하는 문제다.\n\n[Project Euler 사이트의 2번 문제 보러가기](http://euler.synap.co.kr/prob_detail.php?id=2)\n\n<br>\n\n### 내가 짠 코드\n\n```python\n\"\"\"\nProblem 2\n\"\"\"\ndef problem2(a, b):\n    result = 0\n    # 피보나치는 b의 값을 나열한 것.\n    while b <= 4000000:\n        # a는 피보나치수열을 완성하기 위해 도와주는 역할\n#         0, 1 = 1, 1\n#         1, 2 = 2, 3\n#         2, 3 = 3, 5\n#         3, 5 = 5, 8\n        a, b = b, a + b\n        if b % 2 == 0:\n            result += b\n    return result\n\n# 461732\n```\n\n<br>\n\n### 풀이\n\n문제에서 제한한 대로 4백만 이하의 범위 내에서 반복문으로 피보나치 수열을 구한 후 짝수항만 더하는 조건에 만족하도록 코드를 작성하였다.\n\n<br>\n","excerpt":"문제 설명 피보나치 수열의 각 항은 바로 앞의 항 두 개를 더한 것이 된다. 1과 2로 시작하는 경우 이 수열은 아래와 같다. 이 때 짝수이면서 4백만 이하인 모든 항을 더하면 얼마가 되는지 구하는 문제다. Project Euler 사이트의 2번 문…","fields":{"slug":"/Euler-Problem2/"},"frontmatter":{"date":"Aug 28, 2017","title":"Project Euler > Python _ Problem 02","tags":["algorithm","Project Euler","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n10보다 작은 자연수 중에서 3 또는 5의 배수는 3, 5, 6, 9 이고, 이것을 모두 더하면 23이다. 이 때, 1000보다 작은 자연수 중에서 3 또는 5의 배수를 모두 더한 값을 구하는 문제다.\n\n[Project Euler 사이트의 1번 문제 보러가기](http://euler.synap.co.kr/prob_detail.php?id=1)\n\n<br>\n\n### 내가 짠 코드\n\n```python\n\"\"\"\nProblem 1\n\"\"\"\n\na = 1000\ndef problem1(a):\n    num_list = []\n    for i in range(a):\n        if i % 3 == 0 or i % 5 == 0:\n        # if not (i % 3 and i % 5):\n            num_list.append(i)\n    result = 0\n    for num in num_list:\n        result += num\n    return result\n\nproblem1(a)\n# 233168\n```\n\n<br>\n\n### 풀이\n\n먼저 매개변수로 주어진 수의 범위 안에서 3의 배수이거나 5의 배수인 수를 `num_list`에 추가한다. 리스트에 모두 추가된 후에는 다시 반복문으로 초기값이 0인 결과변수인 `result`에 하나씩 더하여 총합을 리턴하도록 구현했다.\n\n<br>\n","excerpt":"문제 설명 10보다 작은 자연수 중에서 3 또는 5의 배수는 3, 5, 6, 9 이고, 이것을 모두 더하면 23이다. 이 때, 1000보다 작은 자연수 중에서 3 또는 5의 배수를 모두 더한 값을 구하는 문제다. Project Euler 사이트의 1…","fields":{"slug":"/Euler-problem1/"},"frontmatter":{"date":"Aug 28, 2017","title":"Project Euler > Python _ Problem 01","tags":["algorithm","Project Euler","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n선택자는 선택을 하게 해주는 요소이다. 이를 통해 특정 요소들을 선택하여 스타일을 적용할 수 있다. CSS의 속성을 부여할 HTML요소를 선택하는 선택자의 종류들에 대해 알아보자.\n\n<br>\n\n### 1. 하위선택자와 자식선택자\n\n- 문서의 계층구조를 사용하여 특정 요소에 접근할 수 있다.\n\n#### (1) 하위선택자\n\n- 상위 부모 요소는 직계 부모요소이든 구조상 거리가 먼 조상이든 상관 없다.\n- `div#main p {}` : main 클래스를 가지는 div 하위 요소 중 모든 p\n- id와 class를 과도하게 사용하는 것을 막아준다.\n\n<br>\n\n#### (2) 자식 선택자\n\n- 특정 요소의 자손 요소 중 특정 요소가 직접 포함하는 `직계자손`만을 선택.\n- `div#main>ul ul li {}` : main을 id로 가지는 div의 첫번째 ul 아래 첫번째 ul 아래 li\n- 우선순위는 특정도 값을 계산하여 정한다.\n\n<br>\n\n### 2. 선택자의 종류\n\n#### (1) 전체 선택자, Universal Selector, `*`\n\n```css\n  <style>\n    div * {\n      padding: 0;\n      margin: 0;\n    }\n  </style>\n```\n\n```html\n<h1>hello!</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Iusto fuga aperiam accusantium illum adipisci impedit!</p>\n```\n\n* HTML 페이지 내부의 모든 요소에 CSS속성 적용된다.\n* 문서 전체에 적용하므로 페이지를 로딩하는 시간이 길어질 수 있다. 자주 사용하지 않는 것이 좋다.\n* 전체 기본값 초기화할 때 주로 사용한다.\n\n<br>\n\n#### (2) 태그 선택자, Tag Selector, \"요소이름\"\n\n```css\nh1 p {\n      margin: 10px;\n      text-align: center;\n      color: #ccc;\n    }\n```\n\n* `p`, `h1` 같은 해당하는 모든 html요소에 적용한다.\n\n<br>\n\n#### (3) 클래스 선택자, Class Selector, `.`\n\n```css\n/*클래스 선택자*/\n \t.section {\n      color: #333;\n      margin-bottom: 40px;\n    }\n    /*p를 써도되고 생략해도 된다*/\n    p.section-title {\n      font-size: 30px;\n    }\n```\n\n```html\n<div class=\"section\">\n    <p class=\"section-title\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sit, iste.</p>\n    <p class=\"section-content\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nobis, asperiores.</p>\n  </div>\n```\n\n* 선택자 앞에 마침표 기호를 사용한다.\n* 앞에 태그명을 입력하여 HTML에서는 주어진 값을 class 속성값으로 가진 요소를 선택할 수도 있다.\n* 클래스는 연달아 써서 동시에 여러 개의 클래스에 속성을 부여할 수도 있다.\n\n<br>\n\n#### (4) ID 선택자, ID Selector, `#`\n\n```css\n#id-selector a {\n      color: lightblue;\n      text-decoration-line: none;\n    }\n```\n\n```html\n<div id=\"id-selector\">\n    <a href=\"\">출처</a>\n    <span>lorem</span>\n    <span>copyright@</span>\n  </div>\n```\n\n* 선택자 앞에 # 기호를 사용한다.\n* HTML에서 id값은 오직 하나만 존재해야한다.\n* 앞에 태그명을 입력할 수 있다.\n* **id선택자의 우선순위가 class선택자보다 높으므로 2개의 값을 지정했을 때는 id선택자의 값이 적용된다.**\n\n<br>\n\n#### (5) 체인 선택자, Chain Selector\n\n```css\n/*체인선택자 : 복수 개의 선택자 사용*/\n    #index-title {\n      font-size: 18px;\n    }\n\n    #index-title.header-title {\n      font-weight: bold;\n    }\n\n    .body-text.descrip {\n      color: #999\n    }\n```\n\n```html\n<h3 id=\"index-title\" class=\"header-title\">Lorem ipsum dolor sit amet.</h3>\n<p class=\"body-text descrip\">Lorem ipsum dolor sit amet.</p>\n```\n\n* 한 요소에 아이디와 클래스들 또는 복수의 클래스가 적용되어 있을 경우 사용한다.\n* 아이디 선택자의 우선순위가 높으므로 아이디와 클래스 선택자를 동시에 적용한 경우 중복되는 속성은 아이디 선택자의 값을 따른다.\n\n\n<br />\n\n**!! 체인선택자를 사용하는 예시**<br>\n\n* 주로 공통속성과 특별히 적용할 속성이 있을 경우 여러 클래스를 써서 속성을 나누어 배정한다.\n\n```css\n.nomargin {\n  font-size: 0;\n}\n\n.inline-block {. <!--공통적인 클래스 속성-->\n  display: inline-block;\n  width: 50%;\n  height: 50px;\n  /*margin: 10px;*/\n  box-sizing: content-box;\n  box-sizing: border-box;\n  border-width: 3px;\n  border-style: solid;\n  font-size: 0.9rem;\n}\n/*다른 값을 줄 클래스*/\n.box-red {  \n  border-color: red;\n}\n/*다른 값을 줄 클래스*/\n.box-blue {  \n  border-color: blue;\n}\n```\n\n```html\n<div class=\"nomargin\">\n\t<div class=\"inline-block box-red\">\n\t  ASDFASDF\n\t</div>\n\t<div class=\"inline-block box-blue\">\n\t  SEFSEF\n\t</div>\n</div>\n```\n\n<br>\n\n#### (6) 그룹 선택자, Group Selector\n\n```css\n/*그룹선택자*/\n#index-title {\n  font-size: 18px;\n}\np#index-title, #description {\n  text-align: center;\n}\n```\n\n```html\n<p id=\"index-title\" class=\"header-title\">Lorem ipsum dolor sit amet.</p>\n<p id=\"description\" class=\"body-text descrip\">Lorem ipsum dolor sit amet.</p>\n```\n\n* 여러 선택자에 같은 스타일을 적용하는 경우\n* 쉼표로 구분하여 선택자를 나열한다.\n\n<br>\n\n#### (7) 복합 선택자, Combinator Selector\n\n#### **하위선택자와 자식선택자<br>(descendant / child selector)**\n\n<br>* 포함관계를 가지는 태그 중 포함하는 요소를 `부모 요소`, 포함되는 요소를 `자식 요소`라 칭한다.\n\n##### - 하위 선택자(descendent)\n\n`section ul {}`\n\n```css\nsection ul {\n\t border: 1px solid black;\n\t}\n```\n\n하위 선택자는 부모요소에 포함된 \"모든\" 하위요소를 지정한다.\n\n<br>\n\n##### - 자식 선택자(Child)\n\n`section > ul {}`\n\n```css\nsection > ul {\n\tborder: 1px solid black;\n}\n```\n\n자식 선택자는 부모요소의 \"바로 아래\" 자식요소만을 지정한다.\n\n<br>\n\n#### **인접형제 선택자와 일반형제 선택자 <br>(Adjacent / General Sibling)**\n\n* 같은 부모요소를 가지는 요소들은 \"형제관계\"를 띤다.\n* 먼저 나오는 요소가 형 요소, 나중의 요소가  동생요소이다.\n\n\n##### - 인접 형제 선택자(Adjacent Sibling)\n\n`h1 + ul {}`\n\n```css\nh1 + ul {\n\tbackground: Azure;\n\tcolor : blue;\n}\n```\n\n조건을 충족하는(바로 다음에 나오는) \"첫 번째\" 동생요소만을 지정할 수 있다. 단, **형 요소에는 적용되지 않는다.**\n\n<br>\n\n##### - 일반 형제  선택자(General Sibling)\n\n`h1 ~ ul {}`\n\n```css\nh1 ~ ul {\n\tbackground: Azure;\n\tcolor : blue;\n}\n```\n\n조건을 충족하는 \"모든\" 동생요소를 지정한다. 마찬가지로 **형 요소에는 적용되지 않는다.**\n\n\n<br>\n\n#### (8) 속성 선택자 (Attribute Selector)\n\n태그 내의 속성에 따른다.\n\n|패턴|의미|\n|---|---|\n|`p [attr]`|'attr'속성이 포함된 요소 E|\n\n```html\n<E attr>lorem</E>\n```\n<br>\n\n|패턴|의미|\n|---|---|\n|`E[attr=\"val\"]`|'attr'속성의 값이 \"val\"인 요소 E|\n\n```html\n<E attr=\"val\">lorem</E>\n```\n<br>\n\n|패턴|의미|\n|:---:|:---:|\n|`E[attr~=\"val\"]`|'attr'속성의 값에 \"val\"이 포함되는 요소 E<br>**공백으로 분리된 값이 일치해야한다!**|\n\n```html\n<E attr=\"val\">lorem</E>\n<E attr=\"val-num3\">lorem</E>\n\n<!--적용되지 않는 경우-->\n<E attr=\"value\">lorem</E>\n```\n\n<br>\n\n|패턴|의미|\n|:---:|:---:|\n|`E[attr|=\"val\"]`|'attr'의 값에 \"val\"이 포함되거나(공백으로 분리되어있는)<br>\"val\"로 시작하는 요소 E<br>value같이 들어있으면 인식하지 않는다.|\n\n```html\n<E attr=\"val\">lorem</E>\n<E attr=\"val-num3\">lorem</E>\n\n<!--적용되지 않는 경우-->\n<E attr=\"value\">lorem</E>\n```\n\n<br>\n\n|패턴|의미|\n|:---:|:---:|\n|`E[attr^=\"val\"]`|'attr'속성의 값이 \"val\"로 시작하는 요소 E|\n\n```html\n<E attr=\"val\">lorem</E>\n<E attr=\"value\">lorem</E>\n\n<!--적용되지 않는 경우-->\n<E attr=\"val-num3\">lorem</E>\n```\n\n<br>\n\n|패턴|의미|\n|:---:|:---:|\n|`E[attr$=\"val\"`|'attr'속성의 값이 'val'로 끝나는 요소 E|\n\n```html\n<E attr=\"val\">lorem</E>\n<E attr=\"item-val\">lorem</E>\n\n<E attr=\"eval\">lorem</E>은???\n```\n\n<br>\n\n|패턴|의미|\n|:---:|:---:|\n|`E[attr*=\"val\"`|'attr'속성의 값에 \"val\"이 포함되는 요소 E<br>==공백이나 Dash(-)에 영향을 받지 않는다!==|\n\n```html\n<E attr=\"val\">lorem</E>\n<E attr=\"val-num3\">lorem</E>\n<E attr=\"value\">lorem</E>\n```\n\n<br>\n\n#### (9) 가상클래스 선택자 (Pseudo-Classes Selector)\n\nHTML소스에는 존재하지 않지만 필요에 의해 가상의 선택자를 지정할 수 있다.\n\n- 사용자의 액션(마우스 호버나 방문했던 페이지 링크)에 따라 서로 다른 상태에 놓일 수 있다.\n- 요소의 상태 정보를 작성해서 특정 상태의 스타일을 지정할 수 있다.\n- 동시에 놓일 경우가 많으므로 작성 순서에 유의해야 한다.\n- 가상클래스 선택자는 브라우저에서 드래그해도 잡히지 않는다.\n- 동적 선택자가 추가되면 요소가 좀더 구체화되므로 없는 요소보다 우선순위가 높다.\n\n<br>\n\n|패턴|의미|특성|\n|:---:|:---:|:---:|\n|`E:link`|방문하지 않은 링크 E|a요소는 항상 링크속성을 가지고 있다.<br>항상 `link`상태이므로 가장 먼저 써줘야 <br>앞서 지정한 다른 동적 선택자의 스타일이 적용되는 것을 막을 수 있다.|\n|`E:visited`|방문한 링크 E|사용자가 이전에 방문한 기록이 남아있을 경우 속성이 적용된다.|\n|`E:active`|E요소에 마우스 클릭, 터치, 포커스된 동안 보이는 효과지정||\n|`E:hover`|E 요소에 마우스가 올라가있는 동안 보이는 효과 지정|`IE6`에서는 `<a>`태그만 호버속성이 적용된다.|\n|`E::focus`|E 요소에 포커스가 머물러있는 동안 보이는 효과 지정||\n|`E::first-line`|E의 첫번째 라인에 효과지정||\n|`E::first-letter`|E의 첫번째 문자에 효과지정||\n|`E::before`|E요소의 시작지점에 생성된 요소||\n|`E::after`|E요소의 끝지점에 생성된 요소||\n\n<br>\n","excerpt":"선택자는 선택을 하게 해주는 요소이다. 이를 통해 특정 요소들을 선택하여 스타일을 적용할 수 있다. CSS의 속성을 부여할 HTML요소를 선택하는 선택자의 종류들에 대해 알아보자. 1. 하위선택자와 자식선택자 문서의 계층구조를 사용하여 특정 요소에 …","fields":{"slug":"/CSS_06/"},"frontmatter":{"date":"Jun 20, 2017","title":"CSS _ 선택자","tags":["CSS","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\ncss에서 지정할 수 있는 정렬은 `inline`, `block` 요소인지에 따라 결정된다. 각각의 경우에 텍스트 요소를 정렬하는 방식을 알아보자.\n\n<br>\n\n### `text-align: center`\n\n텍스트 요소를 가운데로 정렬한다. 단, `block 요소`에는 적용되지 않는다.\n\n<br>\n\n### 블록요소의 가로 정렬은 어떻게 할까?\n\n이 때는 `width: 50%;` 속성을 지정하여 단락을 너비를 부모 요소(페이지 레이아웃)의 절반으로 만들어주면 된다.\n`margin: 0 auto;` 속성은 단락너비가 퍼센트 이외의 수치값인 경우 `auto` 속성을 주어 사용한다. 또는 `margin: 0 25%;`는 단락너비가 퍼센트이므로 마진에 퍼센트를 사용할 수 있다.\n\n<br />\n\n### vertical-align\n\n관련 텍스트 행을 기준으로 인라인 요소를 정렬한다. 따라서 블록 요소인 `div`나 `p`에는 적용되지 않는다. 이 때는 `display: inline;` 속성을 적용해준다.\n\n\t- 다른 인라인 요소에 상대적으로 정렬하므로 영향받는 값에 따라 모양이 달라질 수 있다.\n\t\t- **baseline** : 기본 속성이다. 적용되면 부모요소의 기준선에 맞춘다.\n\t\t- **top/middle/bottom** : 부모 요소기준으로 위/중앙/아래에 위치.\n\t\t- **text-top/bottom** : 요소의 맨 아래를 부모 font의 위/아래에 맞춘다.\n\t\t- **super** : 부모의 위첨자 기준에 맞춘다.\n\t\t- **sub** : 부모의 아래첨자 기준선에 맞춘다.\n\n```html\n\t<p><a href=#>한식</a></p>\n\t<p><a href=#>중식</a></p>\n\t<p><a href=#>일식</a></p>\n```\n\n```css\np {\n\tfloat: left;\n\tvertical-align: middle;\n}\n```\n","excerpt":"css에서 지정할 수 있는 정렬은 ,  요소인지에 따라 결정된다. 각각의 경우에 텍스트 요소를 정렬하는 방식을 알아보자.  텍스트 요소를 가운데로 정렬한다. 단, 에는 적용되지 않는다. 블록요소의 가로 정렬은 어떻게 할까? 이 때는  속성을 지정하여…","fields":{"slug":"/CSS_04/"},"frontmatter":{"date":"Jun 19, 2017","title":"CSS _ 페이지 정렬","tags":["CSS","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nCSS는 HTML의 요소에 스타일 속성을 지정할 수 있도록 고안된 언어이다. 따라서 특정 요소에만 속성을 주기 위해서는 요소별로 구분자, 쉽게 말해 `구별할 수 있는 이름`이 필요하다. 그리고 이러한 이름에는 지정한 속성에 대한 우선순위 계층이 존재하는데 이를 `특정도`라고 한다.\n\n### 특정도란?\n\n각 선택자는 css구문에서 해당하는 스타일 수 * 특정도 값을 더한 값\n\n특정도 계산식은 다음과 같다.\n\n|스타일|특정도|특정도값|\n|:----:|:----:|:-----:|\n|`!important`|absolute|-|\n|Inline(인라인 스타일)|A|1000|\n|ID 선택자|B|100|\n|Class 선택자|C|10|\n|Tag 선택자 |D|1|\n\n<br>\n\n### 마법의 `!important`\n\n어떤 특정도도 무시하고 가장 우선순위로 적용하게 해준다. 그렇지만 코드의 유지보수에는 적절하지 않은 속성이다. 절대적으로 해당 속성을 따르기 때문에 지정한 부분은 잊어버리면 끝장이다. 되도록 쓰지 않는 것을 추천한다.\n","excerpt":"CSS는 HTML의 요소에 스타일 속성을 지정할 수 있도록 고안된 언어이다. 따라서 특정 요소에만 속성을 주기 위해서는 요소별로 구분자, 쉽게 말해 이 필요하다. 그리고 이러한 이름에는 지정한 속성에 대한 우선순위 계층이 존재하는데 이를 라고 한다.…","fields":{"slug":"/CSS_05/"},"frontmatter":{"date":"Jun 19, 2017","title":"CSS _ 특정도","tags":["CSS","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n우리가 사용하고 있는 웹서버(`Apache`, `iis`, `Nginx` 등)는 `동기적`이다. 덕분에 브라우저에서 요청을 할 때마다 그에 따른 응답 결과를 서버에서 받아 보내줄 수 있다. 그러나 한번에 수많은 요청이 들어왔을 때는 어떨까? 웹서버는 처리가 끝날 때까지 브라우저에게 결과를 보내주지 못하고 무한한 로딩 시간을 거치게 된다. 이는 웹서비스 전체 사용자의 요청을 한 명의 사용자가 기다려야한다는 말과도 같다.\n\n예를 들어, 익히 알려진 SNS인 인스타그램(Instagram)에서는 1개의 포스트에 100만 개 이상의 좋아요가 달리는 경우가 있다. 이 때 수많은 사용자가 동시다발적으로 좋아요를 누르게 되면 웹서버는 이를 처리하느라 페이지를 보여주지 못할 것이다.\n\n따라서 웹서버가 처리하기에 부담스러운 요청은 `비동기 태스크 큐`를 통해 처리한다. 즉, 작업이 실행되는 시점과 생성되는 시점, 또는 생성 순서에 상관없이 웹서버에 부담을 주는 작업을 순차적으로 처리하는 과정을 일컫는다. 따라서 웹페이지를 보여주는 것과 사용자의 요청을 분리하여 실행하기 때문에 웹서버를 가볍게 유지할 수 있고 작업이 끝날 때까지 기다리지 않아도 된다.\n\n<br>\n\n### 장고에서 비동기 태스크 큐 사용하기\n\n파이썬으로 비동기 태스크 큐를 사용할 수 있는 툴에는 `celery`가 있다. celery는 메세지 브로커와 파이썬의 작업 프로세스를 연결해 비동기 작업을 수행하는 시스템을 제공한다.  \n\n#### 큐 (Queue)\n\n큐를 해석하면 '대기 행렬', '줄을 서서 기다리다' 라는 의미를 가지고 있다. 작업을 요청 순서대로 쌓아놓고 대기했다가 순차적으로 실행한다는 의미를 가지는 것이다. 그리고 이러한 메세지 큐에 작업을 보내주는 시스템은 브로커라고 부른다.\n\n#### 브로커 (broker)\n\n브로커는 작업들이 보관되어 있는 장소를 말한다. 요청에 따라 보내줘야 할 데이터를 지속적으로 보관할 수 있는 도구라면 무엇이든 가능하다. 장고에서는 `RabbitMQ`나 `Redis`를 가장 많이 쓴다. 비동기 작업큐를 처음 사용한다면 `Redis`로 시작하는 것이 좋다. `Redis`는 브로커의 용도로 만들어진 것은 아니지만 in-memory 데이터 저장장치이기 때문에 쉽게 사용할 수 있다.\n\n#### 프로듀서 (producer)\n\n나중에 실행될 태스크를 큐에 넣는 코드를 말한다. 브로커와 프로듀서를 혼동할 수도 있는데, 프로듀서는 브로커에게 데이터를 기록해주는 역할을 담당하고 있다. 프로듀서가 보낸 데이터를 브로커가 받아 메세지 큐에 대기시키는 것이다.\n\n#### 워커 (worker)\n\n마지막으로 워커는 태스크를 브로커에서 가져와 실행하는 코드를 말한다. 일반적으로는 하나 이상의 워커가 있으며, 각 워커는 데몬(사용자가 직접 제어하지 않고, 백그라운드에서 돌면서 여러 작업을 하는 프로그램) 형태로 실행되고 관리받는다.\n\n\n<br>\n\n### 언제 비동기 태스크 큐를 사용하는가?\n\n비동기 태스크 큐를 사용해야하는 이유는 모두 다를 수 있다. 하지만 사용자 경험 측면에서 생각했을 때를 생각하면 판단은 쉬워진다. 특정 코드에서 병목 현상이 나타나거나 페이지 로드에 부담을 줄 것 같은 상황에서 사용하면 된다. 즉, 연산 결과에 시간이 걸리는 작업은 태스크 큐를 사용하는 것이 좋고 사용자에게 바로 결과를 제공해야할 경우에는 태스크 큐를 사용하지 않는 것이 좋다.\n\n#### (1) 비동기 태스크 큐를 이용하자!\n\n- 이메일 전송\n- 파일 수정작업(이미지)의 경우\n- 외부 API에서 대량의 데이터를 받아오는 작업\n- 테이블에 대량의 데이터를 추가/수정하는 경우\n- 웹훅(webhook) - 특정 액션 앞뒤로 정해진 일을 하도록 하는 것(글 등록 알림, 외부 메신저 연결 등)\n- 긴 시간이 필요한 연산처리\n\n#### (2) 비동기 태스크 큐를 이용하지 말자!\n\n- 사용자 프로필 변경 등의 단순 작업\n- 블로그 및 CMS 엔트리 추가\n\t- CMS란 저작물 관리 시스템(Content Management System)의 약자로 사진, 음성, 전자문서와 같은 파일을 관리하는 소프트웨어이다. 웹 저작물 관리 시스템은 웹사이트에 웹 저작물을 발행하는 데 필요한 작업들을 수월하게 해준다. [더 읽어보기](https://ko.wikipedia.org/wiki/%EC%A0%80%EC%9E%91%EB%AC%BC_%EA%B4%80%EB%A6%AC_%EC%8B%9C%EC%8A%A4%ED%85%9C)\n\n트래픽이 중하 정도의 수준인 사이트는 작업내용에 상관없이 사용할 필요가 없다. 반면, 트래픽이 많은 사이트의 경우에는 모든 작업에 대해 태스크 큐를 사용해야 한다.\n\n<br>\n\n### 태스크 큐 소프트웨어\n\n장고에서 비동기 태스크 큐를 사용하려는 경우에는 3가지 중에 1가지를 선택하면 된다.\n\n#### 셀러리 (celery)\n\n앞서 언급한 셀러리의 경우 장고의 표준으로 가장 많이 사용하는 시스템이다. 대용량 데이터도 처리가 수월하며 기능이 풍부하다는 장점이 있는 반면 세팅이 까다롭고 트래픽이 적은 사이트의 경우에는 오히려 낭비적인 측면도 있다.\n\n따라서 태스크 관리가 복잡한 대용량 프로젝트에 사용하는 것이 좋다.\n\n#### 레디스 큐 (redis queue)\n\n레디스를 기반으로 셀러리에 비해 적은 메모리를 사용한다. 그렇지만 역시 대용량에도 무리없이 사용할 수 있다. 셀러리에 비해서는 기능이 적지만 세팅이 비교적 쉽다. 저장소를 레디스로만 사용할 수 있다는 특징이 있다.\n\n#### django-backend-tasks\n\n세팅이 매우 쉽고 이용이 가장 간편하다. 장고의 ORM을 백엔드로 이용하기 때문에 대용량을 처리하기에는 무리가 있다. 또한 하나의 워커만 사용하기 때문에 여러 개의 워커가 필요하다면 셀러리나 레디스를 사용하는 것이 좋다. 보통 `django-backend-tasks`를 사용하는 경우는 주기적으로 일어나야하는 일괄처리(batch) 작업이 사용되는 소규모 프로젝트가 있다.\n\n\n종합해보면 용량에 상관없이 레디스 큐를 사용하는 것을 추천한다. 그러나 셀러리를 사용할 수 있다면 프로젝트 규모가 커질 것을 대비하여 셀러리를 사용하는 것이 좋다.\n\n<br>\n\n### 태스크는 쉽고 단순하게\n\n태스크 큐는 사용자가 볼 수 없는 코드나 몸집이 불어나기 쉽다. 하지만 태스크 또한 각 프로세스 당 메모리와 리소스를 사용하는 작업이기 때문에 사이트에 영향을 줄 수도 있다.\n\n뷰를 작성하는 방식처럼 쉽고 단순하게 작성하는 것이 좋다. 아래의 예시는 인스타그램에서 포스트 총 갯수에 대한 좋아요 수를 세어 화면에 표시해주는 태스크 함수이다.\n\n```python\n### tasks.py\n\n@app.task\ndef task_update_post_like_count(post_pk):\n    # 셀러리에서 장고 프로젝트를 임포트하기전에 실행하므로\n    # 함수 내부에서 필요한 모델을 import해준다.\n    from .models.post import Post\n    post = Post.objects.get(pk=post_pk)\n\n    # 모델의 메서드를 불러오는 방식으로 task 함수를 간단하게 표현\n    post.calc_like_count()\n    return post.like_count\n```\n\n살펴보면 실제 연산을 처리하는 함수인 `calc_like_count()`는 모델의 인스턴스 메서드로 처리하였다. 태스크 코드를 함수 안으로 넣어 해당 함수를 호출하는 방식으로 사용하면 코드를 쉽게 디버깅할 수 있을 뿐만 아니라 재사용 측면에서도 장점을 지닌다.\n\n<br>\n\n### 비동기 메시지 큐 관리\n\n#### JSON화 가능한 값만 태스크 함수에 전달하자\n\n태스크 함수에 복잡한 객체를 인자로 사용할 경우 시간과 메모리를 더 많이 사용할 수도 있다. 위의 예시처럼 객체를 넘겨줘야할 경우에는 `프라이머리 키(primary key)`나 `객체의 구분자`를 함께 보내 최신 데이터를 뽑아오는 방식으로 사용할 수 있다.\n\n이외의 경우에는 정수, 부동소수점, 문자열, 튜플, 딕셔너리, 리스트 등의 자료형만 사용하는 것이 좋다.\n\n<br>\n\n#### 태스크와 워커를 모니터링하자\n\n태스크 함수를 디버깅하려면 서버가 동작하고 있는지, 작업이 순차적으로 실행되는지, 태스크가 죽지는 않았는지 살펴볼 필요가 있다. 태스크와 워커를 시각적으로 모니터링 해주는 패키지가 있으니 사용하고 있는 소프트웨어에 따라 사용하면 된다. (아래 링크 참조)\n\n- [셀러리 - 플라워](https://pypi.python.org/pypi/flower)\n\n- [레디스 큐 - 장고 레디스보드](https://pypi.python.org/pypi/django-redisboard)\n\n- [레디스 큐 - django-rq](https://pypi.python.org/pypi/django-rq)\n\n장고 프로젝트에 설치하고 장고의 어드민 페이지에서 관리를 할 수도 있다.  \n\n<br>\n\n#### 에러 핸들링을 이용하자\n\n태스크 자체의 문제가 아닌 서드파티 패키지나 네트워크 이상으로 에러가 발생하는 경우 다음 값을 세팅해두면 에러가 자연스럽게 복구되는데 도움을 준다.\n\n- 태스크에 대한 최대 재시도 횟수\n\n```\n# 설정에서 값을 지정\nbroker_connection_max_retries=100\n\n# 해당 값이 0 or None이면 영원히 재시도할 것이다.\n# 기본값은 100이다.\n```\n\n- 재시도 전 지연시간 (적어도 10초 이상)\n\n지연시간은 점진적으로 간격을 키워주는 것이 좋다. 계속 같은 시간의 요청이 들어오면 실패 원인을 찾는데 오히려 더 많은 시간을 쏟을 수도 있다.\n\n\n### 참고 자료\n\nTwo Scoops of Django 25장 - 비동기 태스크 큐 (p.293 - 300)\n","excerpt":"우리가 사용하고 있는 웹서버(, ,  등)는 이다. 덕분에 브라우저에서 요청을 할 때마다 그에 따른 응답 결과를 서버에서 받아 보내줄 수 있다. 그러나 한번에 수많은 요청이 들어왔을 때는 어떨까? 웹서버는 처리가 끝날 때까지 브라우저에게 결과를 보내…","fields":{"slug":"/2scoops-25-비동기태스크큐/"},"frontmatter":{"date":"Jun 18, 2017","title":"BookReview > Two Scoops of Django _ 25장. 비동기 태스크 큐 이해하기","tags":["book review","Django","Celery","Redis","Queue"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\ncss에서 대부분의 css속성은 부모 요소에서 자식 요소로 상속된다. 속성을 상속할 때 사용하는 선택자와 상속의 우선순위를 의미하는 특정도에 대해 알아보고, 텍스트 속성을 이용하여 상속을 설명해보았다.\n\n```css\nbody {\n font-size: 12px;\n}\n```\n\n- 상속이 되지 않는 속성도 있다. ex_ **border**, **padding**\n- **inherit** : `inherit` 을 사용하여 css의 모든 속성을 부모 요소(기본값도 가능)에서 상속받을 수 있다.\n\n<br>\n\n### 2. class, id 선택자\n\n- **class** : `.chapters {}`\n - 여러개의 html요소에 지정 가능\n\n- **id** : `#chapter1-1 {}`\n\t- 단 하나의 요소에만 지정 가능.\n\n<br />\n\n### 3. 특정도\n\n좀더 구체적인 특성 부여가 덜 구체적인 특성 부여를 덮어 쓴다. 같은 속성에 여러 개의 구체적 속성 부여가 있을 경우 가장 마지막에 지정된 속성이 부여된다.\n\n- `태그 선택자` < `클래스 선택자` < `id 선택자` 순으로 높은 특정도를 가진다.\n\n<br />\n\n### 4. 선택자들 - 글자 관련\n\n```css\n/*예시*/\nh1 {\n font-family : \"helvetica\";\n font-weight : bold;\n font-style : italic;\n text-decoration : underline;\n font-size : 2em;\n}\n```\n\n<br />\n\n#### (1) 글자 크기 `font-size`\n\n- 수치값 : CSS에서 단위가 없는 수치는 에러를 발생시킨다!\n\t- 에러를 발생시키지 않는 예외: 배수 값 지정하는 경우(참고: `line-height`)\n\n- 절대값 : 글자 확대, 창 크기에 상관없이 고정된 값. 기본적으로 px 사용\n- 상대값 : 화면크기에 따라 글자크기, 화면 레이아웃 등도 변할 수 있도록 em값을 사용한다.\n\t- **em** : CSS에서 글꼴의 높이.<br>현재 글꼴에 비례한 글꼴의 크기를 지정할 수 있다.\n\n\t\t```css\n\t\tfont-size : 2em; = 200%\n\t\tfont-size : 1.6em; = 160%\n\t\tfont-size : 1.2em; = 120%\n\t\tfont-size : 1em; = 100%\n    ```\n\n\t- **rem** : root 크기를 정해놓고 root값에 비례하여 크기를 지정할 수 있다.\n\n\t\t```css\n\t\tbody {\n\t\t font-size : 16px;\n\t\t}\n\n\t\tfont-size : 2rem; /*= 32px*/\n\t\t```\n\n<br>\n\n#### (2) 글자 두께 `font-weight`\n\n- 키워드 방식 : **bold**, **normal**\n- 숫자 방식 : 100 ~ 900\n\n<br>\n\n#### (3) 글자 스타일 `font-style`\n\n- 키워드 방식 : **italic** = **oblique**, **normal**\n\n<br>\n\n#### (4) 글자 장식 `text-decoration`\n\n- 키워드 방식 : **line-through**, **underline**, **none**\n- 여러 개 사용가능, `띄어쓰기`로 구분.\n\n<br>\n\n#### (5) 글자 정렬 `text-align`\n\n- 키워드 방식 : **left**, **right**, **center**, **justify**\n- justify는 양쪽 정렬이다. 쓰지 않는 것이 좋다.\n\n<br>\n\n#### (6) 행간 `line-height`\n\n- 글자열 라인의 높이를 지정할 수 있다.(박스, 이미지에는 적용안됨)\n- 퍼센트 속성값을 사용할 수 있다.\n\n\t```css\ndiv {\n font-size : 12px;\n line-height : 120%; /* == 12px의 1.2배 == 14.4px */\n}\n```\n\n\t- 부모 요소의 글꼴 크기 기준 퍼센트 값이 적용된다.\n\t- div 하위 요소 내에 자식요소가 있고 거기에 다른 폰트크기가 정해져 있을 경우에도 `line-height`는 부모인 dd의 값을 따라 14px로 적용된다.\n\t- 주의할 점은 자신의 글꼴 크기에 비례한 line-height 값이 아님!\n\n- 단위를 지정하지 않는 수치값\n\n\t```css\ndiv {\nfont-size: 12px;\nline-height: 1.2;\n}\n```\n\n\t- div 내의 하위 요소가 특정 폰트 크기를 정해놓았으면 자식요소의 폰트크기의 배수를 따른다. 즉, 부모의 폰트크기를 따르지 않고 그때그때의 폰트 크기에 적용된다!\n\t- 모든 요소에 line-height 값을 지정하지 않아도 된다.\n\t- body와 같은 상위요소에 한번 정해두면 편하다.\n\t- 대부분의 브라우저가 line-height의 기본값으로 1.0 or 1.2를 배수를 갖고 있다.\n\n\n<br>\n\n#### (7) 글자/단어 간격 `letter-spacing / word-spacing`\n\n- 글자 간격 : 글자 사이의 간격을 띄운다.\n- 단어 간격 : 띄어쓰기 너비를 키운다.\n- 수치값을 사용하며, **퍼센트값은 사용하지 않는다**!!\n- 늘이기 : `word-spacing: .1em;`\n- 줄이기 : `letter-spacing : -.1em;`\n\n<br>\n\n#### (8) 들여쓰기 / 내어쓰기 `text-indent`\n\n단락 시작줄에 들여쓰기 및 내어쓰기를 하고 싶은 경우 사용.\n\n- 들여쓰기 : `text-indent: .5em;`\n- 내어쓰기 : `text-indent: -.5em;`\n\n<br>\n\n출처 : html/css도서 - [웹표준가이드]\n\n<br />\n","excerpt":"css에서 대부분의 css속성은 부모 요소에서 자식 요소로 상속된다. 속성을 상속할 때 사용하는 선택자와 상속의 우선순위를 의미하는 특정도에 대해 알아보고, 텍스트 속성을 이용하여 상속을 설명해보았다. 상속이 되지 않는 속성도 있다. ex_ bord…","fields":{"slug":"/CSS_01/"},"frontmatter":{"date":"Jun 17, 2017","title":"CSS _ 상속과 텍스트 속성","tags":["CSS","markup","inheritance"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nCSS에서 공간영역을 조절할 수 있는 박스모델과 배경이미지 지정하는 방법에 대해 알아본다.\n\n\n### 1.  박스 모델\n\n- `마진` - `보더` - `패딩` - `콘텐트`\n- 최초 마진, 보더, 패딩 두께는 0이다.\n\t- `width` : 요소가 포함하고 있는 콘텐트의 너비 (수치값, 퍼센트값)\n\t\t- 인라인 요소에는 지정할 수 없다.\n\t- `height` : 요소가 포함하고 있는 콘텐트의 높이 (수치값, 퍼센트값)\n\t\t- 퍼센트값을 쓸 때 해당 요소가 포함한 콘텐트의 높이값이 명시되어 있지 않으면 퍼센트는 적용되지 않는다.\n\n<br>\n\n#### # 마진, `margin`\n- 주로 콘텐트의 바깥 여백을 주는 데 사용한다.\n- 배경색이 적용되지 않는 공간.\n- `마진통합` :\n\n\t```css\n\th1 { margin-bottom: 10em; }\n\tp { margin-top: 5em; }\n\t- 마진은 15em이 아니라 10em이다.\n\t```\n\n\t- 첫번째 요소의 아래마진과 두번째요소의 윗마진이 겹칠 떄 두 마진 값은 더해지지 않고 `둘 중 큰 값`으로 마진이 정해진다.\n\n<br>\n\n#### # 보더 `border`\n\n- 테두리 라인을 지칭한다.\n- 굵기, 컬러 등을 설정할 수 있다.\n- 배경색은 테두리선 안쪽에서부터 시작한다.\n\t- `border-color` : 색상지정\n\t- `border-style` : **solid**, **dotted**, **dashed**\n\t- `border-width` : **thin**, **thick**, **medium** 또는 수치값, 퍼센트x\n\t`border: 1em solid black;` 로 줄여쓸 수 있다.\n\n<br>\n\n#### # 패딩 `padding`\n\n- 콘텐트의 안쪽 여백이다.\n- 배경색이 적용되는 공간.\n\n<br>\n\n#### # 요소의 전체크기 정하기 `box-sizing`\n\n- **border-box** : 요소 전체를 기준으로 너비와 높이를 산정\n- **content-box** : 요소가 포함하고 있는 콘텐트의 너비와 높이만으로 산정\n\n<br>\n\n### 7. 널리 사용되는 배경 속성\n\n<br>\n\n#### # 배경색 `background-color`\n\n- 색상값 : **모든 색상값(#red; or #rrggbb;)** or **투명도값(rgba)** 지정 가능\n- 배경색은 흰색이라도 반드시 지정하는 것이 좋다.\n\n<br>\n\n#### # 투명도 `opacity` `RGBa`\n\n|`opacity`|`RGBa`|\n|:-------:|:-----:|\n|해당 요소의 모든 하위요소에 상속되고 재정의가 불가능하다<br>배경, 글자, 하위요소 모두 투명하게 처리된다.|개별 지정이 가능하다.<br>`background-color: rgba(0, 0, 0, 0.2)`<br>투명색상값은 배경에 적용된다.<br>색상값을 지정할 수 있는 어떤 속성에든 지정가능하다.<br>글자(color), 테두리색(border-color)|\n\n<br>\n\n#### # 배경이미지 `background-image`\n\n```css\n background-image : url(\"./images/a.png\")\n```\n\n- 키워드값 : 특정 요소의 배경에 이미지를 삽입\n- url은 모든 브라우저에서 지원하는 png(이미지), gif, jpeg(사진포맷) 사용권장.\n- 디폴트값이 repeat으로, 페이지의 전체 배경에 패턴을 반복한다.\n\t- 이 경우 `background-repeat: no-repeat`을 지정하여 반복을 피할 수 있다.\n\n<br>\n\n#### # 배경 반복설정 `background-repeat`\n- 키워드값\n - repeat : 배경 이미지를 가로, 세로방향으로 반복.\n - no-repeat : 배경이미지를 1번만 출력\n - repeat-x : 이미지를 가로 방향으로만 반복\n - repeat-y : 이미지를 세로 방향으로만 반복\n\n<br>\n\n#### # 배경이미지의 위치 `background-position`\n- 이미지가 놓일 위치 지정\n- 이미지를 반복할 경우 반복이 시작되는 위치 지정가능\n- 복수의 키워드값 지정 가능\n\n    ```css\n    background-position: right top;\n    /*이미지를 오른쪽에 위치시키고 위에서 아래로 반복시키고 싶을 때.*/\n\t```\n\n\t|키워드값|이미지 위치지정|반복|\n\t|:-----:|:----:|:----:|\n\t|top|가장 위|위에서 아래로|\n\t|center|화면의 정가운데|가운데에서 위,아래,오른쪽,왼쪽)으로|\n\t|bottom|가장 아래|아래에서 위로|\n\t|left|왼쪽|왼쪽에서 오른쪽으로|\n\t|right|오른쪽|오른쪽에서 왼쪽으로|\n\n- 수치값 :\n\t- `background-position: 3em 6em;`\n\t- 이미지를 왼쪽에서 3em, 위에서 6em 떨어진 곳에 위치시키고 싶을 떄\n\t- 이미지의 너비가 고정되지 않은 상태에서 수치값으로 오른쪽에 위치시키는 것은 불가능!\n\n<br>\n\n- 퍼센트값 :\n\t- 정교하게 위치시키고 싶을 때 유용하다.\n\t- `background-position: 60%;`\n\t- 이미지의 60% 지점이 배경의 60% 지점과 일치하는 곳에 이미지를 위치시킴\n\t- 가운데 정렬도 매우 쉽다. `background-position: 50%`\n\n<br>\n\n#### # 배경이미지 스크롤 여부 `background-attach`\n\n- 페이지를 스크롤할 때 컨텐츠와 상관없이 배경이미지를 고정할 것인가?\n- scroll 또는 fix: 고정\n- scroll(기본값)\n\n<br>\n","excerpt":"CSS에서 공간영역을 조절할 수 있는 박스모델과 배경이미지 지정하는 방법에 대해 알아본다. 1.  박스 모델  -  -  -  최초 마진, 보더, 패딩 두께는 0이다.  : 요소가 포함하고 있는 콘텐트의 너비 (수치값, 퍼센트값) 인라인 요소에는 지…","fields":{"slug":"/CSS_02/"},"frontmatter":{"date":"Jun 17, 2017","title":"CSS _ 박스 모델","tags":["CSS","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nCSS에서는 화면의 구성요소들을 각각 인라인, 블록 요소로 구분하고 이에 맞는 스타일 속성을 부여한다. CSS에서 적용할 수 있는 페이지 레이아웃 속성에 대해서 알아보자.\n\n<br>\n\n## 1. 기본 페이지 레이아웃\n\n- CSS요소를 화면에 출력할 수 있는 방법을 html의 인라인과 블록으로 구분\n\n### (1) 인라인요소 & 블록요소 `display`\n\n- 키워드값 : **block**, **inline**, **none**, **inline-block**\n- `display: inline;`\n\t- 기본값.\n\t- 요소를 inline요소처럼 표시한다.\n\t- 앞뒤로 줄바꿈 되지 않는다.\n\t- 블록요소에 사용하면 블록을 생성하지 않고 이전 요소와 다음 요소 사이에 배치된다.\n\t- 블록 요소를 인라인 요소로 변화시킬 때 사용한다.\n\n- `display: block;`\n\t- 인라인 요소에 사용하여 블록처럼 위치시킬 수 있다.\n\t- 새로운 레이아웃 블록을 생성하고 양 옆에 또다른 요소를 가질 수 없다.\n\t- 블록으로 만들어 `float` 속성을 사용하기도 한다.  \n\t- `strong`, `em`과 같은 인라인 요소에 사용가능하지만 여전히 블록요소를 포함할 수는 없다.\n\n- `display: none;`\n\t- 박스가 생성되지 않는다.\n\t- 따라서 공간을 차지하지도 않는다.\n\n- `display: inline-block;`\n\t- 요소는 inline인데 내부는 block처럼 표시하고 싶을 때.\n\t- 박스모양이 inline요소처럼 가로 정렬된다.\n\n<br>\n\n- 리스트 형태의 키워드값 : **list-item**\n- `display: list-item;`\n\t- p와 같은 요소를 리스트 형태로 출력할 수 있다.\n\t- 이렇게 어떤 요소를 리스트 형태로 출력하려면 리스트 스타일 표시자를 추가하기 위해 왼쪽 바깥 여백(margin-left)을 부여해야 한다.\n\n<br>\n\n### (2) 가시성 `visibility`\n\n- 키워드값 : **visible**, **hidden**\n- `visibility: visible;`\n\t- 속성이 보이도록 화면에 출력\n- `visibility: hidden;`\n\t- 속성이 보이지 않게 숨김처리\n\t- 화면에 출력되지 않고 문서에서 차지하는 공간 또한 사라지게 함.\n\n<br>\n\n## 2. 고급 페이지 레이아웃\n\n### (1) 콘텐트 띄우기 `float`\n\n**CSS의 컨텐트 출력방식**\n\n- 블록 방식 : 새로운 박스에 출력\n- 인라인 방식 : 같은 라인 내 출력\n\n`float`\n\n- 특정 콘텐트가 주변 콘텐트와 자연스럽게 어울리도록 띄울 수 있다.\n- `float: left` : 콘텐트의 왼쪽모서리가 기본 레이아웃에서 벗어나 화면 왼쪽모서리로 이동\n- `float: right` : 콘텐트가 오른쪽 끝으로 이동\n- 이후의 콘텐트는 float 주위를 감싸게 된다.\n\n\n### (2) 속성 초기화 `clear`\n\n- 더이상 float 속성이 적용되는 것을 원치 않을 때\n- `float` 속성을 원치 않는 요소에 `clear: both;` 속성 부여\n- `clear: right;` : 왼쪽 속성은 유지하고 오른쪽 float속성은 없애고 싶을 때\n- `clear: left;` : 위와 반대로 적용됨\n\n\n<br>\n\n### (3) 콘텐트의 위치선정 `position`\n\n- **static** : 기본값. 문서의 기본적인 흐름 가운데 요소를 위치시킨다.\n- **relative**\n\t-  문서의 기본적인 전체 흐름 가운데 위치한 후, top/bottom, left/right 값을 주어 위치시킬 수 있다.\n\t-  relative 속성값이 적용되어도 전체 문서 기본 흐름에 속해있다.\n- **absolute**\n\t- 문서의 기본 흐름을 완전히 벗어나 새로운 콘텐트의 흐름을 시작한다.\n\t- relative, absolute, fixed 중 하나의 속성을 갖는 첫번째 요소를 기준으로 이동.\n\t- 다음에 오는 요소는 absolute 요소가 없는 것으로 간주한다.(따라서 다음에 오는 요소와 겹쳐보일 수 있다. )\n\t- top/bottom, right/left 값을 주어 위치시킨다.\n- **fixed**\n\t- 문서의 기본 흐름을 완전히 벗어나 새로운 콘텐트의 흐름을 시작한다.\n\t- 스크롤해도 항상 고정된 위치에 자리한다.\n\t- top/bottom, right/left 값을 주어 위치시킨다.\n\n<br>\n\n### (4) top/left와 bottom/right\n\n```css\n/*화면 가장 아래에 고정된다.*/\nposition: fixed;\nbottom: 0;\nright: 0;\n```\n\n- top : 위에서 아래로 수치값만큼 이동\n- left : 왼쪽에서 오른쪽으로 수치값만큼 이동\n- bottom : 아래에서 위로 수치값만큼 이동\n- right : 오른쪽에서 왼쪽으로 수치값만큼 이동\n\n<br>\n<br>\n\n## 3. 심화 - 페이지 정렬\n\n### (1) 가로 가운데 정렬\n\n- `text-align: center` : 텍스트 요소를 가운데 정렬. block요소에는 적용되지 않음.\n\n\t```\n\t블록 요소의 가로 정렬\nwidth: 50%; <- 단락을 너비를 부모 요소(페이지레이아웃)의 절반으로 만든다.\nmargin: 0 auto; <- 단락너비가 퍼센트이외의 수치값인 경우 'auto'를 쓴다.\n또는 margin: 0 25%; <- 단락너비가 퍼센트이므로 마진에 퍼센트를 사용할 수 있다.\n```\n\n<br />\n\n- `vertical-align`\n\t- 관련 텍스트 행을 기준으로 인라인 요소를 정렬\n\t- 따라서 블록요소인 div나 p에는 적용되지 않는다. -> `display: inline;`주고...\n\t- 다른 인라인 요소에 상대적으로 정렬하므로 영향받는 값에 따라 모양이 달라질 수 있다.\n\t\t- **baseline** : 기본값. 부모요소의 기준선에 맞춘다.\n\t\t- **top/middle/bottom** : 부모 요소기준으로 위/중앙/아래에 위치.\n\t\t- **text-top/bottom** : 요소의 맨 아래를 부모 font의 위/아래에 맞춘다.\n\t\t- **super** : 부모의 위첨자 기준에 맞춘다.\n\t\t- **sub** : 부모의 아래첨자 기준선에 맞춘다.\n\n```html\n<p><a href=#>한식</a></p>\n<p><a href=#>중식</a></p>\n<p><a href=#>일식</a></p>\n```\n\n```css\np {\n\tfloat: left;\n\tvertical-align: middle;\n}\n```\n","excerpt":"CSS에서는 화면의 구성요소들을 각각 인라인, 블록 요소로 구분하고 이에 맞는 스타일 속성을 부여한다. CSS에서 적용할 수 있는 페이지 레이아웃 속성에 대해서 알아보자. 1. 기본 페이지 레이아웃 CSS요소를 화면에 출력할 수 있는 방법을 html…","fields":{"slug":"/CSS_03/"},"frontmatter":{"date":"Jun 17, 2017","title":"CSS _ 페이지 레이아웃","tags":["CSS","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n`HTML`은 웹페이지를 위한 마크업 언어인 동시에 비교적 쉽게 구조를 만들 수 있는 템플릿 언어이다. 텍스트로 구성된 웹페이지에 구조적인 속성을 부여하는 태그들을 알아보자.\n\n<br>\n\n### (1) 헤드라인 h1 ~ h6\n\n중요도 순으로 개요를 나타낼 때 사용하는 태그이다. 주로 학술문서나 검색엔진에서 검색 시 중요하게 사용한다. 실제 크기는 CSS에서 만들고자 하는 웹페이지에 맞춰 새로 설정하므로 단계별로 구별할 제목이 있다면 `hr`태그를 사용한다.\n\n\n```html\n<h1>html</h1>\n<h2>역사</h2>\n<h3>개발</h3>\n...\n<h6>최초규격</h6>\n```\n\n<br>\n\n### (2) 줄바꾸기(line breaks), `p`와 `br`태그\n\n```html\n<!-- p태그 (paragraph, 문단) -->\n<p>안녕하세요. 오늘은 날씨가 화창하네요\n  그렇지만 마스크를 꼭 착용하세요. 미세먼지 농도가 높거든요!</p>\n```\n\n<br>\n\n```html\n<!-- br태그 (linebreak, 줄바꾸기) -->\n안녕하세요.<br>\n오늘은 날씨가 화창하네요.<br>\n그렇지만 마스크를 꼭 착용하세요.<br>\n미세먼지 농도가 높거든요!<br>\n```\n\n<br>\n\n### (3) 그외 > `hr`, `blockquote`, `pre`태그\n\n```html\n<!-- 1. hr태그 (Horizontal rule, 수평선) -->\n<p>안녕</p>\n<hr>\n<p>또 안녕</p>\n```\n\n```html\n<!-- 2. blockquote태그 (인용문) -->\n<blockquote>인용문 내용</blockquote>\n```\n\n```html\n<!-- 3. pre태그 (Preformatted text, 이미 형식화된 텍스트) -->\n<pre>\ndef pretag_test():\n  val = 'pretag'\n</pre>\n```\n\n<br>\n\n### (4) 줄바꿈 없는 텍스트 태그\n\n```html\n<!-- 1. strong, b태그 (강조, 굵게 표시)\n\t: 보이는 것은 같으나 오디오 청취시 다르게 발음한다. -->\n<strong>강조할 텍스트</strong>\n<b>굵게 표시할 텍스트</b>```\n```\n\n```html\n<!-- 2. em, i태그 (문맥상 특정부분 강조, 이탤릭 표시)\n\t: i 태그의 경우 한글에는 지원되지 않는다.   -->\n<em>강조할 텍스트</em>\n<i>기울여 표시할 텍스트</i>\n```\n\n```html\n<!-- 3. mark태그 (형광펜 효과)\n\t: 형광펜으로 그은 효과의 텍스트, 인라인요소이다. -->\n<mark>형광펜으로 그은 효과텍스트</mark>\n```\n\n<br />\n\n## 링크와 이미지 태그 - `hyperlink`, `image`\n\n### (1) 링크, anchor\n\n**a 태그**<br>\n**href** : 이동할 페이지주소<br>\n**target** : 링크 걸린 페이지를 여는 법<br>\n\n  - `_self` : 본래창에서 이동\n  - `_blank` : 새창에서 열기\n\n**title** : 마우스를 올렸을 때 보여줄 제목\n\n\n```html\n<a href=\"http://www.naver.com\" target=\"_blank\" title=\"네이버 열기\">네이버 바로가기</a>\n```\n\n<br />\n\n### (2) 이미지 삽입, image\n\n**img 태그**<br>\n**src** : 이미지의 경로<br>\n**width, height** : 이미지의 가로/세로크기(px 단위)<br>\n**alt** : 대체 텍스트<br>\n`alt` 태그 역시 시각장애인에게 설명을 줄 만한 텍스트를 넣을 수 있다.\n\n```html\n<img src=\"이미지의 경로\" width=\"30\" height=\"200\" alt=\"이미지 설명\">\n```\n\n<br>\n\n## 데이터 태그 (data tags)\n\n데이터를 나타내는 목록형 태그를 의미한다.\n\n<br>\n\n### (1) 목록\n\n: 목록 형태로 나타나는 요소는 `ol`이나 `ul`요소로 구현하고 css로 스타일 속성을 부여한다.\n\n> ordered list, ol<br>\n\n```html\n<ol>\n\t<li>항목</li>\n\t<li>항목</li>\n\t<li>항목</li>\n\t<li>항목</li>\n</ol>\n```\n\n> unordered list, ul\n\n```html\n<ul>\n\t<li>항목</li>\n\t<li>항목</li>\n\t<li>항목</li>\n\t<li>항목</li>\n</ul>\n```\n\n<br />\n\n#### 1) 목록 속성\n\n**type** : 나열할 속성 정의 <br>\n\n| 값 | 설명 |\n|----|----------|\n| 1 | 숫자(기본값) |\n| a | 영문 소문자 |\n| A | 영문 대문자 |\n| i | 로마 숫자 소문자 |\n| I | 로마 숫자 대문자 |\n\n**start**: 시작할 숫자 지정\n\n**reversed** : 역순으로 표시\n\n```html\n<ol type=\"A\" start=\"3\" reversed>\n\t<li>First</li>\n\t<li>First</li>\n\t<li>First</li>\n</ol>\n```\n\n<br>\n\n#### 2) 정의목록(Description List)\n\n: 목록과 정의목록은 서로 중첩하여 사용가능.\n\n```html\n<dl> <!--정의목록 태그 -->\n  <dt>dt는 목록 중 개념을 나타낸다.</dt>\n  <dd>dd는 해당 개념의 정의를 나타낸다.</dd>\n  <dd></dd>\n  <dt>CSS</dt>\n  <dd>Cascading Style Sheet</dd>\n  <dd>HTML의 형태를 지정하는 언어이다.</dd>\n</dl>\n","excerpt":"은 웹페이지를 위한 마크업 언어인 동시에 비교적 쉽게 구조를 만들 수 있는 템플릿 언어이다. 텍스트로 구성된 웹페이지에 구조적인 속성을 부여하는 태그들을 알아보자. (1) 헤드라인 h1 ~ h6 중요도 순으로 개요를 나타낼 때 사용하는 태그이다. 주…","fields":{"slug":"/HTML_06/"},"frontmatter":{"date":"Jun 17, 2017","title":"HTML _ 텍스트와 관련된 태그","tags":["HTML","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML에서 표를 만들 수 있는 테이블 요소에 대해서 알아보자!\n\n<br>\n\n## 테이블의 기본 구조\n\n**table 태그** <br>\n**thead / tbody / tfoot** : 행을 그룹화하는 태그 <br>\n**tr** : 행 <br>\n**th** : 헤더셀 <br>\n**td** : 데이터셀 <br>\n\n```html\n<table> : 테이블의 시작\n <thead> : 열의 제목, 한번만 선언 가능\n  <tr> : 행을 나타냄\n   <th>이름</th> : 테이블의 헤더셀\n   <th>나이</th>\n   <th>성별</th>\n  </tr>\n </thead>\n <tbody> : 본문, 여러번 선언하여 행을 그룹화하기도 한다.\n  <tr> : 다음 행\n  \t<td>철수</td> : 테이블의 일반셀\n   <td>23세</td>\n   <td>남성</td>\n  </tr>\n </tbody>\n <tfoot> : 도표 하단, 전체의 합계 또는 결과를 표시, 한번만 선언가능\n  <tr>\n   <td>평균</td>\n  </tr>\n </tfoot>\n</table>\n```\n\n**colspan** : 행 병합<br/>\n**rowspan** : 열 병합\n\n```html\n<table>\n <tr>\n  <td rowspan=\"2\">이름</td>\n  <td>성별</td>\n  <td>취미</td>\n </tr>\n <tr>\n  <td colspan=\"2\">나이</td>\n </tr>\n</table>\n```\n<br>\n","excerpt":"HTML에서 표를 만들 수 있는 테이블 요소에 대해서 알아보자! 테이블의 기본 구조 table 태그 \nthead / tbody / tfoot : 행을 그룹화하는 태그 \ntr : 행 \nth : 헤더셀 \ntd : 데이터셀  colspan : 행 병합\nr…","fields":{"slug":"/HTML_05/"},"frontmatter":{"date":"Jun 17, 2017","title":"HTML _ 테이블 요소","tags":["HTML","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n브라우저는 기본적으로 이미지 포맷을 지원하여 이미지에 대한 플러그인은 필요없지만 비디오나 오디오는 플러그인을 지원해야한다. 이 때 사용할 수 있는 것이 HTML의 내장 컨텐트 태그 요소이다.\n\n<br>\n\n### 비디오, 오디오 내장 - `<object>`\n\n```html\n<object data=\"/video/a.mpeg\" type=\"video/mpeg\">\n <img src=\"images/error.png\" alt=\"reload please\">\n</object>\n```\n\n* **data** : 포함할 파일의 url\n* **type** : 브라우저가 콘텐트를 지원할 수 있는지 다운로드 전에 알 수 있다.\n\n`data`, `type` 모두 필수 속성은 아니지만 포함해주는 것이 좋다. 파이어폭스 브라우저를 사용할 경우, 필수로 적어주어야 한다.\n\n* 재생불가한 경우 : **object 태그 안에 img태그를 넣어** 재생이 안될 때 이미지가 표시되도록 한다.\n\n- **콘텐트 타입 : MIME(Multipurpose Internet Mail Extensions)** <br> 서버에서 콘텐트를 제공할 때 콘텐트 타입을 제공해주어야 브라우저가 해당 타입을 파악하여 렌더링해줄 수 있다.\n- 기본으로 적용되는 타입: `text/html`, or `video/mpeg`\n\n- `<object>`태그는 매우 광범위한 용도로 사용될 수 있기 때문에 오히려 사용하기 불편하다. 이미지, 플래시, 실버라이트, html, 오디오, 비디오 무엇이든지 삽입하는 용도로 설계된 태그이기 때문이다. 브라우저가 태그를 인식하지 못해 비디오와 오디오콘텐트에 특화된 기능(재생컨트롤)을 표시할 수 없는 일이 발생하기도 한다. 또, 가끔 비디오 전용 기능을 이미지 컨텐트에 삽입하기도 하는 오류를 범하기도...\n\n- 대안 :\n\n| 비디오, 오디오가 아닌 플러그인 콘텐트|비디오, 오디오 콘텐트|\n|:----:|:-----:|\n|`<object>` 사용(플래시 기반)|`<video>`태그!|\n\n<br>\n\n### `<video>` 태그\n\n```html\n<video poster=\"images/error.png\">\n <source src=\"비디오파일출처1\" type=\"video/mp4\">\n <source src=\"비디오파일출처2\" type=\"video/ogg\">\n</video>\n```\n\n* `poster` : 비디오 로딩중 또는 재생불가일 때 이미지를 불러와준다.\n* `autoplay` : 비디오 로딩시 자동재생\n* `loop` : 반복재생\n* `controls` : 재생 컨트롤 표시\n* `width`, `height` : 성능면에서 적는 것이 좋음.\n\n<br>\n\n### `<audio>` 태그\n\n```html\n<audio controls>\n <source src=\"오디오파일출처1\" type=\"audio/mp3\">\n <source src=\"오디오파일출처2\" type=\"video/wave\">\n <object data=\"플래시파일출처\">\n  <p>오디오 지원불가</p>\n </object>\n</audio>\n```\n\n* 오디오는 poster값을 지원하지 않는다.\n* 재생불가 시 대신 object로 플래시 문구를 띄워준다.\n\n\n<br>\n\n## form 태그\n\n### `<form>`\n\n- **method** : 폼에 입력된 데이터가 전송되는 방식을 결정. GET/POST가 있음.\n- **action** : 전송된 데이터를 표시할 스크립트의 url 정보를 부여.\n\n<br>\n\n### `<input>`\n\n- **name** : **반드시 있어야하는 요소** 이다. 폼이 서버로 전송되었을 때 name의 속성값이 폼 데이터의 구분자가 된다. 이 속성을 주지 않으면 서버는 전달 받은 데이터가 어떤 것인지 구분하지 못한다.<br>\n- **disabled** : 폼 컨트롤을 비활성화.\n- **checked** : 미리 체크해놓는 효과\n- **multiple** : 다중선택 가능\n- **type** : 폼 요소 구분.\n\n\t|종류|이름|내용|name속성|\n|:--:|:--:|:--:|:--:|\n|텍스트필드|text|**size**: 입력받을 문자의 크기(텍스트필드의 width값, css를 사용하는 것이 낫다.)<br> 사용할 수 있는 최대문자수(=maxlength)가 아님!!!|input은 전송받은 데이터와 name값을 연결지어 서버로 전송한다.|**value** : 해당 요소의 초깃값을 설정(힌트 등)\n|체크박스|checkbox|체크되지 않은 값은 전송되지 않는다.<br>**checked** : 미리 체크한 상태로 전송 가능<br>사용자에게 입력을 강요(필수입력)하기 위해 사용한다.<br>여러 개 체크가능하다.|체크된 여러 개의 값이 name-value 쌍으로 연결되어 서버로 전송된다.|\n|라디오버튼|radio|여러 개 체크가 불가능하다.<br>**checked** : 미리 체크한 상태로 전송 가능<br>같은 name속성을 갖는 라디오버튼이 여러개 있으면 전송될 때 미리 checked를 적어놓은 것이 전송된다. 남자, 여자 라디오버튼을 선택할 때 체크하지않으면 미리 남자에 적용해놓은 checked가 작용하여 서버로 보내진다.|\n|푸시버튼<br>**button**|버튼|타입 버튼도 있고 요소 버튼도 있다.<br>value값을 줘서 사용자 문구를 버튼 위에 입력할 수 있다.|\n|푸시버튼<br>**submit**|제출|버튼 type의 디폴트값이다.<br>기본적으로 submit이라는 value값을 가지지만 value값을 따로 줘서 사용자문구를 버튼 위에 입력할 수 있다.|\n|푸시버튼<br>**reset**|초기화|기본적으로 reset이라는 value값을 가지지만 value값을 따로 줘서 사용자문구를 버튼 위에 입력할 수 있다.|\n\n<br>\n\n### 버튼 - `<button>`\n\n- 버튼\n- 디폴트: `submit`\n- 비어있지 않은 요소로, value가 아닌 요소 내부의 내용이 버튼 위에 적힌다.\n- IE6, 7에서는 데이터전송에 오류가 많아 input으로 대체한다.|\n\n<br>\n\n### 드롭다운 메뉴 - `<select>`\n\n- **option** : 메뉴 아이템(`<li>`와 비슷)\n- **optgroup** : 여러 개의 옵션을 그룹지어 보여준다.  \n- **multiple** : 잘 안쓴다. 다수의 option을 체크할 때.\n\n<br>\n\n### 장문의 텍스트 입력필드 - `<textarea>`\n\n비어있지 않은 요소로, value에 값을 주지않고 요소 안에 내용을 입력하면 사용자가 입력할 데이터의 예제를 보여줄 수 있다.\n\n<br>\n\n### `<label>` - 폼 컨트롤에 대한 문구\n\n사용자 입장에서 어떤 폼인지, 무엇을 입력해야 하는지 문구를 보여줄 수 있는 태그로, 암묵적, 명시적 레이블 둘 다 사용할 수 있다.\n\n<br>\n\n#### (1) 암묵적 레이블\n\n`<label>`안에 input요소를 넣는 방식\n\n```html\n<label>monkey type here:\n<input type=\"text\" name=\"monkeytype\" value=\"less than 10 letters\">\n</label>\n```\n\n<br>\n\n#### **명시적 레이블**\n\nfor 사용하여 인풋의 id값을 연결하는 방\n\n```html\n<!-- for의 값은 label요소의 내용을 부여할 폼의 id값이다. -->\n<label for=\"monkey\">monkey type here:\n <textarea name=\"monkeytype\" id=\"monkey\">\n hello! introduce yourself.\n </textarea>\n<label>\n```\n\n출처 : html/css도서 -[웹표준가이드]\n","excerpt":"브라우저는 기본적으로 이미지 포맷을 지원하여 이미지에 대한 플러그인은 필요없지만 비디오나 오디오는 플러그인을 지원해야한다. 이 때 사용할 수 있는 것이 HTML의 내장 컨텐트 태그 요소이다. 비디오, 오디오 내장 -  data : 포함할 파일의 ur…","fields":{"slug":"/HTML_02/"},"frontmatter":{"date":"Jun 16, 2017","title":"HTML _ 내장 컨텐트 태그","tags":["HTML","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML은 마크업 언어로, 내용에 의미를 부여하는 언어이다. 따라서 각 요소의 속성 자체를 그대로 유지하는 것이 좋다. 디자인 요소는 최대한 css에서 해결하도록 한다.\n\n<br>\n\n## 1. 기본태그 소개\n\n### `<p>`\n\n- 단락을 의미, paragraph\n- 블록 요소\n- 줄바꿈을 하려면 `<br>`을 사용\n- 다른 블록 요소를 포함할 수 없는 유일한 블록요소이다.\n\n<br>\n\n### `<pre></pre>`\n\nHTML 파일에 작성한 단락 모습 그대로 화면에 출력한다. 따라서 줄바꿈을 위해 `<br>`을 사용할 필요가 없다.\n\n```html\n<pre>\nhello!\nhtml!\n</pre>\n```\n\n<br>\n\n### `<div></div>`\n\n- 특별한 의미가 없는 블록 요소\n- 블록 요소와 인라인 요소 모두를 담을 수 있는 그릇이다.\n- 콘텐트를 논리그룹으로 묶어야하는 상황, 장이나 기사와 같이 콘텐트 의미별로 구역을 나눌 떄 사용\n- class, id를 사용하여 css를 적용\n- 문서전체 구조를 파악하는 데 큰 도움.\n- 모든 종류의 콘텐트에 무분별하게 사용하지 않는다.\n\n- **`<span>`** <br>\n\n  div처럼 의미가 없다. 하지만 인라인 요소로, 특정 콘텐트에 상세한 특성을 부여할 때 사용한다.\n\n<br>\n\n#### 팁!\n\n  이렇게 종료태그에 주석을 달아놓으면 나중에 닫는 태그를 매칭하는 데 시간을 단축할 수 있다.\n\n```html\n\t\t</div><!--chapter1의 div-->\n\t</div><!--chapters의 div-->\n</div><!--all-chapter의 div-->\n```\n\n<br>\n\n## 중첩목록\n\n```html\n<ol>\n <li>커피</li>\n <li>콜라</li>\n  <ul>\n   <li>코카콜라</li>\n   <li>펩시</li>\n  </ul>\n</ol>\n```\n\n<br>\n\n## 블록 요소와 인라인 요소\n\n|블록 요소|인라인 요소|\n|:-----:|:-------:|\n|h, p, pre, div, ol, ul, li, dt, dd|br, a, strong, em, i, abbr|\n\n- 블록 요소는 다른 블록 요소 또는 인라인 요솔를 포함할 수 있다.\n- 블록 요소는 인라인 요소 안에 포함될 수 없다.\n- 인라인 요소는 다른 인라인 요소만 포함할 수 있다.\n- p는 블록 요소이지만 다른 블록 요소를 포함할 수 없다.\n\n<br>\n\n### 강조 - `<strong>과 <em>`\n\n- `<b>` 또는 `<i>`는 문서에 디자인 속성을 부여한다.\n- `<strong>` 또는 `<em>`는 문서의 의미를 강조한다.\n- `<b>` 또는 `<i>` 를 사용하기 보다는 문서에 의미를 부여하는 `<strong>` 또는 `<em>`을 사용하는 것이 맞다.\n\n<br>\n\n### 인라인 요소 - `<abbr>`\n\n- 약어를 의미한다.\n- 예시\n\n```html\n<abbr title=\"World Wide Web Consortium\">W3C</abbr>\n```\n\n<br>\n\n### 인라인 요소 - `<span>`\n\n- 의미가 없음.\n- 특정 컨텐츠에 상세특성을 부여할 때 사용\n- 보통 가장 안쪽에서 쓰인다.\n\n<br>\n\n### 인라인 요소 - `<a>`\n\n`<a href=\"id값\">`\n`<a href=\"#chapter1-2\">`\n\n- 같은 페이지 안에서 부여한 아이디 값을 기준으로 링크를 걸 수도 있다.\n\n```html\n<!-- 블록 요소가 인라인 요소 내부에 있으면 안된다. -->\n<a href=\"dd.com\"><h1>hello</h1></a>\n\n<!-- h1은 블록 요소이므로 a로 감쌀 수 없다. 따라서 h1 안에 a가 들어가야한다.  -->\n<h1><a href=\"dd.com\">hello</a></h1>\n```\n<br>\n\n출처 :html/css도서 -[웹표준가이드]\n","excerpt":"HTML은 마크업 언어로, 내용에 의미를 부여하는 언어이다. 따라서 각 요소의 속성 자체를 그대로 유지하는 것이 좋다. 디자인 요소는 최대한 css에서 해결하도록 한다. 1. 기본태그 소개  단락을 의미, paragraph 블록 요소 줄바꿈을 하려면…","fields":{"slug":"/HTML_01/"},"frontmatter":{"date":"Jun 16, 2017","title":"HTML _ 기본 태그와 인라인, 블록 요소","tags":["HTML","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML을 작성할 때 알아 놓으면 좋은 특수문자 변환기호를 정리해보았다.\n\n\n## 특수 문자\n\n|종류|모양|문자열 변환(escaping)|\n|:--:|:--:|:--:|\n|copyright   |&copy;|`&copy;`|\n|앰퍼센트|&amp;|`&amp;`|\n|부등호|&lt;, &gt;|`&lt;`, `&gt;`|\n|작은 따옴표|&lsquo;, &rsquo;|`&lsquo;`, `&rsquo;`|\n|큰 따옴표|&ldquo;, &rdquo;|`&ldquo;`, `&rdquo;`|\n|유로기호|&euro;|`&euro;`|\n\n<br>\n\n\n출처 : html/css도서 -[웹표준가이드]\n","excerpt":"HTML을 작성할 때 알아 놓으면 좋은 특수문자 변환기호를 정리해보았다. 특수 문자 종류 모양 문자열 변환(escaping) copyright ©  앰퍼센트 &  부등호 <, > ,  작은 따옴표 ‘, ’ ,  큰 따옴표 “, ” ,  유로기호 € …","fields":{"slug":"/HTML_03/"},"frontmatter":{"date":"Jun 16, 2017","title":"HTML _ 특수문자","tags":["HTML","markup"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML은 웹페이지의 구조를 다루는 문법이다. 그리고 CSS는 HTML의 각 요소에 스타일 속성을 지정한다. 예를 들어, 문장을 쓰고 그 문장의 글씨 크기를 15px로 맞추고 싶다면 전자는 HTML, 후자는 CSS가 담당하게 된다.  SASS는 작업시 효율적으로 CSS를 작성하기 위해 고안된 문법이라 할 수 있다.\n\n<br>\n\n### 1. HTML (HyperText Markup Language)\n\n : 마크업을 이용해 월드와이드웹(www)의 페이지를 서로 오갈 수 있는 웹문서를 만드는 언어.\n\n - 마크업 언어 : 태그 등을 이용하여 문서나 데이터 구조를 명기하는 언어\n - 하이퍼텍스트 : 링크를 이용해 웹페이지를 서로 연결하는 것.\n\n<br>\n\n### 2. 웹 표준(W3C, World Wide Web Consortium) Standards\n\n : 월드와이드웹 컨소시엄의 약자. 웹표준과 가이드라인 개발을 목적으로 설립하였다. 즉, World Wide Web을 서술하고 정의하는 공식 표준 및 규격이라고 이해하면 된다.\n\n 서로 다른 브라우저 및 환경에서도 같은 결과를 보여줄 수 있도록 웹사이트를 만들 때 지켜야 하는 규격을 정해놓은 것이 바로 웹 표준이다. 웹표준이 등장하기 전까지는 브라우저별로 웹페이지를 제작해야만 했었다. 이러한 웹표준에 맞는 HTML과 CSS를 지켜주어야 어떠한 브라우저에서도 동일한 화면이 출력된다.\n\n 만약 본인의 웹서비스가 웹표준을 얼마나 지키고 있는지 알고싶다면 아래 웹표준 지원에 대한 브라우저 점수를 확인하는 사이트 방문해보면 된다.\n\n [HTML5 Test](http://html5test.com/)\n\n<br>\n\n## html의 기본 구조\n\n`<!DOCTYPE html>`를 반드시 선언하여 `html5`의 규약을 따르고 있음을 명시해준다. 해당 선언이 생략될 경우에는 테이블에 속성을 따로 지정해주어도  `user agent stylesheet`라는 브라우저 자체의 문법이 적용될 수 있으니 주의하여야 한다.\n\n - html5를 사용하겠다는 선언과 태그로 구성되어 있다.\n\n```html\n<!DOCTYPE html> <!--DOCTYPE: 문서유형을 지정 / html: HTML5형식의미-->\n<html> <!--HTML문서의 시작과 끝-->\n  <head>\n    <title>Document</title> <!--브라우저의 제목표시줄에 출력-->\n  </head>\n  <body>\n    <!--문서의 본문-->\n  </body>\n</html> <!--태그-->\n```\n\n<br />\n\n### (1) 주석 Comment\n\n<!--주석-->\n\n주석은 화면에는 표시되지 않으며, 소스에서만 확인할 수 있다. 개발기간이 길고 소스가 많을 수록 작업 내용을 주석으로 정리해야 디버깅할 때 효율적이다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Document</title>\n</head>\n<body>\n  <!--이 사이에 넣는 내용은 주석-->\n</body>\n</html>\n```\n\n<br />\n\n### (2) 태그의 요소(Element)와 속성(Attribute)\n\n**href** : Hyper Reference(참조)<br>\n**src** : Source(출처) <br>\n태그는 가급적 `소문자`로 쓴다.\n\n```html\n<!-- 값을 주는 내용이 없을 경우 스스로 닫는 태그를 쓴다. -->\n<!-- <요소 속성 = \"값\"> -->\n\n<!-- 절대경로 - http:// 나 https:// 로 시작하는 전체 주소 -->\n<img src=\"http://www.google.com/images/abc.png\">\n\n<!-- 상대경로 - 해당 HTML파일을 기준으로 이미지 파일의 위치를 나타내는 방식 -->\n<img src=\"images/abc.png\">\n```\n\n<br>\n\n```html\n<!-- <요소 속성 = \"값\">내용</요소>\n: 값을 주는 내용이 있을 경우 <열리는태그>와 </닫히는태그>를 쓴다. -->\n<a href=\"http://www.naver.com\">네이버 바로가기</a>\n```\n\n<br />\n\n### (3) head 태그\n\n : 문서의 메타데이터 집합<br>\n : 웹페이지에 직접적으로 보이지 않는 정보를 브라우저에게 제공\n\n```html\n<head>\n  <!-- 웹페이지의 인코딩 방식 정의 -->\n  <meta charset=\"utf-8\">\n\n  <!-- IE에서 렌더링 방식을 최신으로 설정 -->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\n  <!-- css파일을 연결하는 메타태그 -->\n  <link rel=\"stylesheet\" href=\"style.css\">\n\n  <!-- javascript파일을 연결하는 메타태그 -->\n  <script src=\"script.js\" charset=\"utf-8\"></script>\n\n  <!-- 문서의 제목 -->\n  <title>Document</title>\n</head>\n```\n\n이외에도 다양한 `meta태그`가 존재한다. 페이스북에 링크했을 때 제목/설명/커버이미지를 보여주는 meta태그나 검색엔진에서 주로 사용할 내용, 모바일 확대/축소여부 등 설정값을 지정할 수 있다. CSS나 JS파일의 링크도 head요소 내부에 `link`, `style`, `script` 요소로 나타낸다.\n\n<br />\n\n### (4) body 태그\n\n : 브라우저에 표시될 내용, 사용자에게 보여진다.\n\n```html\n<body>\n  <!-- 제목태그 --> <h1>html 문법</h1>\n  <!-- 문단태그 --> <p>html을 배웁니다.</p>\n  <!-- 인용태그 --> <blockq>처음으로 작성한 HTML문서입니다.</blockq>\n</body>\n```\n\n\n<br />\n\n## 요소(element)의 형태 - 블록과 인라인\n\n### (1) 블록 요소\n\n줄바꿈이 일어나는 형태.\n\n블록 요소는 기본적으로 `width`가 전체 너비의 값을 가진다. 해당 요소에 배경색(background color)를 지정하면 실제로 들어있는 글자 내용과는 별개로 전체 너비 영역만큼을 차지한다는 것을 알 수 있다.\n\n```html\n<h1>블록 요소</h1>\n<p>p요소는 블록형태입니다.</p>\n<div>div요소도 블록형태입니다.</div>\n```\n\n<br />\n\n### (2)인라인 요소\n\n줄바꿈이 일어나지 않는 형태.\n\n줄바꿈 없이 기본적으로는 자신의 내용만큼의 가로 너비를 가진다. 블록 요소는 인라인 요소를 포함할 수 있지만, **인라인 요소는 블록요소를 포함할 수 없다.**\n\n```html\n<strong>strong요소</strong>\n<a href=\"\">a요소</a>\n<span>span요소</span>\n```\n\n<br />\n\n### (3) 레이아웃 요소\n\ndiv와 span요소는 오직 block과 inline방식의 레이아웃을 구현하는 데에 사용한다.\n\n```html\n<div>\n  <p>블록요소 내부에 <span>인라인요소를 사용합니다.</span></p>\n</div>\n```\n","excerpt":"HTML은 웹페이지의 구조를 다루는 문법이다. 그리고 CSS는 HTML의 각 요소에 스타일 속성을 지정한다. 예를 들어, 문장을 쓰고 그 문장의 글씨 크기를 15px로 맞추고 싶다면 전자는 HTML, 후자는 CSS가 담당하게 된다.  SASS는 작업…","fields":{"slug":"/HTML_04/"},"frontmatter":{"date":"Jun 16, 2017","title":"HTML/CSS _ HTML와 CSS 소개","tags":["HTML","markup","CSS"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\ngit에는 데이터베이스에 저장된 코드나 커밋에서 원하는 부분을 빠르고 쉽게 검색하는 도구들이 있다. 프로젝트를 진행할 때 함수의 정의나 함수가 호출되는 곳을 검색해야하는 경우 사용할 수 있다.\n\n<br>\n\n### (1) \"어디에 있는지 검색\" `git grep -n 찾을함수명 또는 문자열`\n\n- 매우 빠르고 깃 히스토리 내의 어떤 정보라도 찾아낼 수 있다.\n- 커밋 트리의 내용이나 워킹 디렉토리의 내용을 문자열이나 정규표현식으로 쉽게 찾을 수 있다.\n- 대상을 지정하지 않으면 워킹 디렉토리 파일에서 찾는다.\n- 명령을 실행할 때 `-n`을 추가하면 찾을 문자열이 위치한 라인번호를 알려준다.\n- 추가 옵션들\n\n\t1) `git grep --count 찾을함수명 또는 문자열`\n\n\t- 어떤 파일에서 몇개나 해당 단어를 찾았는지 보여준다.\n\n\t2) `git grep -p 찾을함수명 *.c`\n\n\t- `*.c`: 확장자가 .c인 파일에서 찾는다.\n\t- `-p` : 매칭되는 라인이 있는 함수나 메서드를 찾을 때 쓴다.   \n\n\t3) `git grep --and 찾을함수명`\n\n\t- 찾을 함수명과 여러 단어가 동시에 나타나는 줄 찾기  \n\n\t4) \t`git grep --break`\n\n\t- 더 읽기 쉬운 형태로 보여준다.\n\n\t5) `git grep --heading`\n\n\t- 더 읽기 쉬운 형태로 보여준다.\n\t- v1.8.0 태그가 붙은 커밋에서 #define과 괄호 안의 내용이 같이 들어간 줄 찾고\n\t쉽게 보여주기\n\n\t```\n\t$ git grep --break --heading -n -e '#define' \\\n\t--and \\(-e LINK -e BUF_MAX \\) v1.8.0\n\t```\n\n<br>\n\n### (2) \"언제 추가됐는지 검색\" - Git 로그 검색 `git log`\n\n- 히스토리에 언제 추가되거나 변경됐는지 찾아볼 때 사용한다.\n- 추가 옵션들\n\n\t1) `git log 찾을 문자열 -S`\n\t- 찾을 문자열이 가장 처음 나타낸 때의 커밋과 없어진 커밋을 검색할 수 있다.\n\n\t2) `git log 찾을 문자열 -S -G`\n\t- 찾을 문자열을 좀 더 세세한 조건으로 찾고 싶을 때 `-G`를 사용한다.\n\n- 라인 로그검색\n\t- `git log -L`\n\t- [참고](https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EA%B2%80%EC%83%89)\n\n\t- 예를 들어, `zlib.c` 파일에 있는 `git_deflate_bound` 함수의 모든 변경 사항들을 보길 원한다고 생각해보자. 다음과 같이 `git log -L :git_deflate_bound:zlib.c` 라고 명령 실행하면 된다. 이 명령을 실행하면 함수의 시작과 끝을 인식해서 함수에서 일어난 모든 히스토리를 함수가 처음 만들어진 때부터 `Patch`를 나열하여 보여준다.\n\n\t- Git이 함수의 처음과 끝을 인식하지 못할 때는 다음과 같이 정규표현식으로 인식하게 할 수도 있다. `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`\n","excerpt":"git에는 데이터베이스에 저장된 코드나 커밋에서 원하는 부분을 빠르고 쉽게 검색하는 도구들이 있다. 프로젝트를 진행할 때 함수의 정의나 함수가 호출되는 곳을 검색해야하는 경우 사용할 수 있다. (1) \"어디에 있는지 검색\"  매우 빠르고 깃 히스토리…","fields":{"slug":"/git_07/"},"frontmatter":{"date":"Jun 15, 2017","title":"Git _ 도구 검색","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\ngit으로 일하다보면 커밋 히스토리를 수정해야할 때가 있다.\n\n깃에서는 커밋한 내용 뿐만 아니라 커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다. 단, **다른 사람과 코드를 공유하기 전에 해야 한다!**\n\n<br>\n\n### **git의 장점**\n\n- staging area로 커밋할 파일 고르는 일을 커밋하는 순간으로 미룰 수 있다.\n- stash 명령으로 하던 일을 미루고 다른 브랜치로 이동할 수 있다.\n- 이미 커밋한 내용을 수정할 수 있다.\n- 커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다.\n\n\n#### (1) 마지막 커밋을 수정하기\n\n1) 커밋 메세지 수정하기\n\n- `git commit --amend`\n- 자동으로 텍스트편집기(vim)을 실행시켜서 마지막 커밋 메세지를 열어주므로, 쉽게 수정하고 저장하면 된다.\n\n- 커밋하고 난 후 새로만든 파일 또는 수정파일을 가장 최근 커밋에 집어넣는 법\n\t- 파일을 수정한 후 `git add`로 staging area에 넣기\n\t- 또는 git rm으로 추적하는 파일(Tracked Files) 삭제하기\n\t- `git commit --amend`를 통해 staging area의 파일들을 커밋한다.\n\n<br>\n\n2) 커밋메세지를 여러 개 수정하는 법 - `rebase`\n\n- 예전 커밋을 수정하려면 `rebase`를 사용한다.\n- 마지막 커밋메세지 3개를 수정하고 싶을 때, `git rebase -i HEAD~3`을 입력\n- `HEAD~3` : 수정하려는 커밋의 부모인 4번째 이전 커밋까지.\n- 이미 중앙 서버에 push한 커밋을 결국 같은 내용을 2번 push하므로 수정하면 안된다.\n- Rebase를 하면 목록에 있는 모든 커밋의 SHA-1 값이 변경되므로 중복 푸시를 하게 된다.\n- 오래된 커밋메세지부터 최신 커밋메세지까지 뜨고, 그 안에서 pick을 지우고 수정하고 싶은 커밋메세지 앞에 edit을 쓴 후 저장하면 된다.\n\n```\n<git rebase -i HEAD~2> 수정 결과:\n\tStopped at 81d7b22... add stash2.txt\n\tYou can amend the commit now, with\n\n\t\tgit commit --amend\n\n\tOnce you are satisfied with your changes, run\n\n\t\tgit rebase --continue\n```\n\n- 알려주는 대로 `git commit --amend`를 치면 수정하고자 했던 커밋 메세지를 수정할 수 있도록 텍스트 편집기가 열려서 수정할 수 있다.(여기서 수정하는 것!)\n- 수정하고 나서 나머지 것들도 아래의 명령어로 계속 진행하여 바꿔나갈 수 있다.\n\n```\n<git rebase --continue>\nSuccessfully rebased and updated refs/heads/master.\n: 앞에서 1개만 수정한다고 명령했으므로 아래와 같이 결과가 나온다.\n```\n\n<br>\n\n3) 커밋 순서바꾸기\n\n- `git rebase -i HEAD~n`으로 할 수 있는 다른 기능\n- 대화형 편집기에서 커밋 전체를 삭제하거나 순서를 조정한 후 저장하면 log에서 바뀐 것을 확인할 수 있다.  \n\n```\n  1 pick 8ea9f5b 파일 다시 추가\n  2 pick beeb261 add .gitignore\n  3 pick 7f38535 add stash2.txt\n\n  1 pick 7f38535 add stash2.txt\n  2 pick 8ea9f5b 파일 다시 추가\n : 위에서 아래처럼 수정하고 저장하면 커밋 순서, 삭제 등을 할 수 있다.\n```\n\n<br>\n\n4) 커밋 합치기\n\n- 대화형 Rebase(vim)를 활용할 수 있다.\n\n```\n<합칠 커밋 앞에 squash로 바꿔주기>\n  1 pick 8ea9f5b 파일 다시 추가\n  2 squash beeb261 add .gitignore\n  3 squash 7f38535 add stash2.txt\n\n<squah한 후 알림창>\n  # This is a combination of 3 commits.\n  2 # This is the 1st commit message:\n  3 파일 다시 추가\n  4\n  5 # This is the commit message #2:\n  6\n  7 add .gitignore\n  8\n  9 # This is the commit message #3:\n 10\n 11 add stash2.txt\n\n<git log> - 3개의 커밋이 하나로 합쳐졌다.\n commit 05e65584897be79c3a56ac9264d64a1c5c43a3a4\nAuthor: juliahwang-imac <qufskan9396@gmail.com>\nDate:   Tue May 16 22:19:26 2017 +0900\n\n    파일 다시 추가\n\n    add .gitignore\n\n    add stash2.txt\n```\n\n\n<br>\n\n5) 커밋 분리하기\n\n- 기존 커밋을 해제하(되돌리)고 stage를 여러 개로 분리한 후 그것을 원하는 횟수만큼 다시 커밋할 수 있다.\n- `git rebase -i`에서 해당 커밋을 edit 으로 변경한다.\n- `git reset HEAD^`로 해당 커밋을 해제하고 내용을 다시 2개로 나누어서 커밋한다.\n- 수정파일은 unstaged 상태가 되는데 파일을 add한 후 커밋을 충분히 나누어서 한다.\n- `git rebase --continue`를 통해 남은 rebase 커밋메세지 수정을 완료해준다.\n\n\n<br>\n<br>\n\n### 수정할 커밋이 너무 많을 때 - filter-branch\n\n- rebase 는 `--continue` 옵션으로 하나하나 수정하므로 많은 양의 커밋을 수정할 때는 번거로운 작업이다.\n\n\n`filter-branch`\n\n- 히스토리 전체에서 필요한 것만을 골라내는데 사용하는 도구.\n- 모든 커밋의 이메일 주소를 변경하거나 어떤 파일을 삭제할 경우 사용할 수 있다.\n- 역시 타인과 공유중이라면 사용하지 말아야한다\n\n<br>\n\n1) 모든 커밋에서 파일 제거하기\n\n- 잘못된 파일을 커밋했거나 암호 등 보안정보를 커밋한 경우 돌아가서 삭제해야 한다.\n\t- `fliter-branch --tree-filter 'rm -f password.txt' HEAD`\n\n\n- 편집기의 백업파일을 잘못 커밋한 경우\n\t- `filter-branch --tree-filter rm -f *~ HEAD`\n\t- 모든 파일, 커밋을 정리하고 브랜치 포인터를 복원해준다.\n\n\n- 프로젝트에 체크아웃하고 각 커밋에 해당 명령을 실행시킨다.\n- 그리고 그 결과를 다시 커밋한다.\n\n<br>\n\n2) 모든 브랜치에 적용할 수 있는 명령을 내리고 싶을 경우\n\n\t-`filter-branch --all`\n\n- 이러한 작업은 테스팅 브랜치에 먼저 해보는 게 좋다.\n\n\n<br>\n\n3) 하위 디렉토리를 루트 디렉토리로 만들고 싶을 경우\n\n- 다른 VCS(버전컨트롤시스템)에서 코드를 임포트하고 사용할 때 받은 하위 디렉토리를 모든 커밋에 대한 루트 디렉토리로 만들 때 사용한다.\n\n- `git filter-branch --subdirectory-filter trunk(하위디렉토리명) HEAD`\n\t-  trunk를 루트디렉토리로 만들고, 관련없는 커밋은 자동으로 삭제한다.\n\n<br>\n\n4) 모든 커밋의 이메일 주소 수정하기\n\n- 프로젝트를 오픈소스로 공개할 때 개인이메일 주소로 변경해야한다.\n- or `git config`로 이메일 주소 넣는 것을 잊었다.\n- `git filter-branch --commit-filter + if문`\n- 해당 커밋만 골라서 수정가능하다.\n- 조건에 만족하는 커밋만 SHA-1값이 바뀌는 것이 아니다.\n- 커밋은 부모의 SHA-1값을 받아오므로 모든 커밋의 SHA-1 값이 바뀐다\n- 따라서 push하기 전에 해줘야 한다!\n","excerpt":"git으로 일하다보면 커밋 히스토리를 수정해야할 때가 있다. 깃에서는 커밋한 내용 뿐만 아니라 커밋 순서, 커밋 메세지, 커밋 파일 수정이 가능하다. 단, 다른 사람과 코드를 공유하기 전에 해야 한다! git의 장점 staging area로 커밋할 …","fields":{"slug":"/git_08/"},"frontmatter":{"date":"Jun 15, 2017","title":"Git _ 히스토리 단장하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nGit은 서로 다른 세 개의 트리를 관리하는 컨텐츠 관리자라고 할 수 있다. 트리(`tree`)란 실제로 `파일의 묶음`을 의미한다. 블롭(`blob`)은 깃에서 개별 파일을 일컫는 단어이다.<br>\n\n<br>\n\n## 세 개의 트리\n\n트리 | 역할\n|:----:|:----:|\nHEAD | 마지막 커밋 스냅샷, 다음 커밋의 부모가 되는 커밋\nindex | 다음에 커밋할 스냅샷\n워킹 디렉토리| 샌드박스\n\n<br>\n\n### **(1) HEAD**\n\n: 현재 브랜치를 가리키는 포인터를 `HEAD`라고 한다. 이 때의 브랜치는 가장 최신의 커밋을 가리키고 있다. HEAD가 가리키는 커밋은 바로 다음 커밋의 부모라고도 부른다.\n\n- HEAD의 스냅샷\n\t- `plumbing` 명령(저수준 명령)을 사용하여 HEAD의 위치를 볼 수 있다.\n \t- `cat-file`, `ls-tree`등의 명령어를 사용하여 HEAD의 주소값을 출력해볼 수 있다.\n\n\t```\n\t<git cat-file -p HEAD>\n\ttree b70c5e654741b75f33318eff6e01cc0b4bb99292\n\tauthor juliahwang-imac <qufskan9396@gmail.com> 1494936369 +0900\n\tcommitter juliahwang-imac <qufskan9396@gmail.com> 1494936369 +0900\n\n\t<git ls-tree -r HEAD>\n\t100644 blob f748449c30d29e135e94854872d8948ae2688a9a stash1.txt\n\t100644 blob e1e398af1512dbb124ca069d9ca543f0edf337ea stash2.txt\n\t```\n\n<br>\n\n### **(2) Index**\n\n: 바로 다음에 커밋할 파일들을 의미한다. 즉, Staging area에 있는 파일들이다.\n\n워킹 디렉토리에서 마지막으로 체크아웃한 브랜치의 파일목록과 파일 내용으로 채워진다. 인덱스는 트리가 아니라 평평한 구조로 되어있다(~~엄밀히 트리구조는 아니다.~~)\n\n- 여기서 파일 내용을 수정한 후 commit하면 index는 새로운 커밋으로 변환된다.\n- 커밋을 시키고 남은 것이 없으므로...\n\n```\n100644 9cd125baa1b6833ae1e9743d6ce7a7811eb93d64 0\t.gitignore\n100644 1e58f894f8d97f10a1d37a6f0b6bea71c7314ed7 0\tstash1.txt\n100644 85e147a0dbaae5dff433a5116ed4781359204871 0\tstash2.txt\n```\n\n<br>\n\n### **(3) 워킹 디렉토리**\n\n: HEAD와 Index가 .git에 저장하는 형태는 알아보기 어려우므로 tree로 구조화해서 보여준다.\n\n워킹 디렉토리는 실제 파일로 눈에 보이기 때문에 편집하기 수월하다. 샌드박스. 커밋하기 전에는 staging area에 올려놓고 수정, 변경이 가능한 상태다.\n\n#### 샌드박스?\n\n실험적 의미의 프로그램을 연결하는 곳을 지칭하기도 한다.\n따라서, 실제 적용 이전에 먼저 샌드박스로 연결하여 테스트하라는 것은\n작동은 실제와 같으나 금융상 또는 법률상의 실제행위는 일어나지 않는 것을 뜻한다.\n\n```\ntree\n.\n├── stash1.txt\n└── stash2.txt\n\n0 directories, 2 files\n```\n\n<br>\n\n## 워크플로우\n\n![워크플로우](https://git-scm.com/book/en/v2/images/reset-workflow.png)\n\n<br>\n\n### (1) 워킹 디렉토리에 파일 생성\n\n- v1의 파일을 생성하고 `git init`하면 git 저장소가 생긴다.\n- 이 때, HEAD는 아직 생성되지 않은 브랜치를 가리킨다.\n\n![워크플로우1](https://git-scm.com/book/en/v2/images/reset-ex1.png)\n\n<br>\n\n### (2) staging area로 워킹 디렉토리 내용을 index로 복사\n\n- 워킹디렉토리에서 `git add`로 staging area로 이동하면 index에 저장.\n\n\n![워크플로우2](https://git-scm.com/book/en/v2/images/reset-ex2.png)\n\n<br>\n\n### (3) 커밋\n\n- `git commit`을 통해 index의 내용을 스냅샷으로 영구히 저장.\n- 스냅샷을 가리키는 커밋 객체를 만든다.\n- 이 때, ==브랜치 'master'가 커밋 객체를 가리키게 된다==\n- `git status` 를 확인하면 아무런 변경사항이 없다. 세 트리가 같은 내용이므로.\n\n![워크플로우3](https://git-scm.com/book/en/v2/images/reset-ex3.png)\n\n<br>\n\n### (4) 파일 수정(Modified)\n\n- 워킹 디렉토리 파일을 고친다.(v2)\n- 이 경우 워킹디렉토리의 내용이 index의 내용과 달라졌기 때문에\n- `changes not staged for commit`으로 출력된다.\n\n![워크플로우4](https://git-scm.com/book/en/v2/images/reset-ex4.png)\n\n<br>\n\n### (5) 수정파일 commit하기\n\n- `git add`를 하면 상태가 `Changes to be commited`로 바뀐다.\n- 즉, 다음 커밋할 것과 마지막 커밋이 다르다는 말.\n- `git commit` 해준다.\n\n![워크플로우5](https://git-scm.com/book/en/v2/images/reset-ex5.png)\n\n<br>\n\n### (6) 브랜치를 바꿀경우? clone할 경우?\n\n- 같은 원리로, 브랜치를 checkout하면\n- HEAD가 새로운 브랜치를 가리키고\n- Index에는 새로운 커밋 스냅샷이 놓인다.\n- 그리고 Index의 내용을 워킹디렉토리로 복사한다.\n\n![워크플로우6](https://git-scm.com/book/en/v2/images/reset-ex6.png)\n\n<br>\n\n## RESET의 역할\n\n파일하나를 수정하고 커밋하는 일을 3번 반복했을 때 아래와 같다.\n\n![리셋의역할](https://git-scm.com/book/en/v2/images/reset-start.png)\n\n<br>\n\n### (1)  HEAD 이동 `git reset --soft HEAD~`\n\n- reset은 제일먼저 HEAD 브랜치를 이전 커밋으로 이동시킨다.\n- 단, 브랜치가 이동하는 것은 아니다(checkout 아님)\n- `git reset 9e6e6a4` -> master가 9e6e6a4체크썸을 가진 커밋으로 이동한다.\n- `git reset --soft HEAD~`를 이용하면 HEAD 이동만 하고 멈춘다.\n\n![리셋의역할1](https://git-scm.com/book/en/v2/images/reset-soft.png)\n\n<br>\n\n### (2) Index 업데이트 `git reset --mixed HEAD~`\n\n- `git status` 명령을 실행하면 index와 HEAD의 다른 점이 녹색으로 출력된다.\n- `git reset --mixed HEAD`를 쓰면 index에 HEAD의 스냅샷을 업데이트한다.\n- ==즉, commit을 되돌리고 staging area를 비운다는 말은 git add까지 reset 한다는 뜻이다.==\n\n![리셋의역할2](https://git-scm.com/book/en/v2/images/reset-mixed.png)\n\n<br>\n\n### (3) 워킹 디렉토리 업데이트 `git reset --hard HEAD~`\n\n- `git reset --hard HEAD~` 명령은 디렉토리의 내용까지 되돌릴 수 있다.\n- git에서 데이터를 삭제시킬 수 있는 명령이므로 되돌릴 수 없으니 주의해야한다.\n\n\n![리셋의역할3](https://git-scm.com/book/en/v2/images/reset-hard.png)\n\n<br>\n\n> reset 명령은 정해진 순서대로 세 개의 트리를 덮어써 나가다가 옵션에 따라 지정한 곳에서 멈춘다.\n\n> 1. HEAD가 가리키는 브랜치를 옮긴다. (--soft 옵션이 붙으면 여기까지)\n\n> 2. Index를 HEAD가 가리키는 상태로 만든다. (--hard 옵션이 붙지 않았으면 여기까지)\n\n> 3. 워킹 디렉토리를 Index의 상태로 만든다.\n\n<br>\n\n### 경로를 주고 reset하기\n\n`reset`할 때 경로를 지정하면 HEAD 이동을 건너뛰고 정해진 경로의 파일에만 reset을 적용한다. index나 워킹디렉토리에 일부분만 갱신할 수 있다. 따라서 특정 파일만 HEAD에서 index로 복사하는 기능이다.\n\n`git reset file.txt` = `git reset --mixed HEAD file.txt`\n\n> 1. 브랜치를 옮긴다. (건너뜀)\n> 2. index를 HEAD가 가리키는 상태로 만든다. (여기서 멈춤)\n> 3. 이 명령은 워킹디렉토리의 파일을 unstaged 상태로 만든다. (가져와서 staging area에 붙여넣었으므로 최신 파일은 unstaged되는 것)\n\n![경로주고reset](https://git-scm.com/book/en/v2/images/reset-path1.png)\n\n<br>\n\n```\n$ git reset eb43bf -- file.txt`\n```\n\n> 1. 커밋에서 v1파일을 가져와 인덱스에 붙여넣는다.\n> 2. index에 있는 파일을 커밋하면 head에는 v1의 정보가 저장된다.(=이전으로 복원된다.)\n\n\n![경로주고reset1](https://git-scm.com/book/en/v2/images/reset-path3.png)\n\n<br>\n\n`git reset --patch`\n\n> 1. 패치옵션으로 Hunk단위로 unstaged 상태를 만들 수 있다.\n\n\n<br>\n\n### 커밋 합치기(squash)\n\n: develop파일과 production파일을 합치고 싶을 때.\n\n`git reset --soft HEAD~2`\n> 1. 2단계 이전의 커밋으로 HEAD가 이동한 상태.\n> 2. 최신버전의 워킹 디렉토리 파일을 add, commit한다.\n> 3. master브랜치는 최신 내용과 첫 v1이 합쳐진 파일을 가지게 된다.\n> 4. v2는 더이상 히스토리에 없다.\n\n![squash](https://git-scm.com/book/en/v2/images/reset-squash-r2.png)\n\n![squash](https://git-scm.com/book/en/v2/images/reset-squash-r3.png)\n\n<br>\n\n## Checkout\n\n**(1) 경로가 없을 때**\n\n`git checkout [브랜치명]` : 브랜치로 이동한다.\n\n차이 1\n\n- `reset --hard`와 달리 매우 안전하게 워킹디렉토리를 다룬다.\n- 워킹디렉토리에서 merge를 해보고 변경안된 파일만 업데이트하기 때문.\n\n차이 2\n\n- HEAD 자체를 다른 브랜치로 옮긴다.\n- reset은 HEAD가 가리키는 브랜치를 옮긴다.\n\n차이 3\n\n- HEAD 와 브랜치가 함께 이동하는가? -> reset\n- HEAD가 가리키는 브랜치가 바뀌는가? -> checkout\n- 아래 그림 참고\n\n> 예를 들어 각각 다른 커밋을 가리키는 master`와 `develop 브랜치가 있고 현재 워킹 디렉토리는 develop 브랜치라고 가정해보자(즉 HEAD는 develop 브랜치를 가리킨다). git reset master 명령을 실행하면 develop 브랜치는 master 브랜치가 가리키는 커밋과 같은 커밋을 가리키게 된다. 반면 git checkout master 명령을 실행하면 develop 브랜치가 가리키는 커밋은 바뀌지 않고 HEAD가 master 브랜치를 가리키도록 업데이트된다. 이제 HEAD는 master 브랜치를 가리키게 된다.\n\n그래서 위 두 경우 모두 HEAD는 결과적으로 A 커밋을 가리키게 되지만 방식은 완전히 다르다. reset 명령은 HEAD가 가리키는 브랜치의 포인터를 옮겼고 checkout 명령은 HEAD 자체를 옮겼다.\n\n![checkout](https://git-scm.com/book/en/v2/images/reset-checkout.png)\n\n\n<br>\n\n(2) 경로가 있을 때\n\n: reset 과 동일하게 HEAD를 움직일 수도 없고 안전하지 않다.\n\n`git reset --hard [branch] file` 과 동일\n\n<br>\n\n**[reset 또는 checkout하기 전에 안전한가? 살펴보기](https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0)\n","excerpt":"Git은 서로 다른 세 개의 트리를 관리하는 컨텐츠 관리자라고 할 수 있다. 트리()란 실제로 을 의미한다. 블롭()은 깃에서 개별 파일을 일컫는 단어이다. 세 개의 트리 트리 역할 HEAD 마지막 커밋 스냅샷, 다음 커밋의 부모가 되는 커밋 ind…","fields":{"slug":"/git_09/"},"frontmatter":{"date":"Jun 15, 2017","title":"Git _ Reset 명확히 알고 가기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> 딕셔너리는 들어있는 값에 순서가 없지만, 키를 기준으로 정렬하고 싶습니다. 그래서 키와 값을 튜플로 구성하고, 이를 순서대로 리스트에 넣으려고 합니다.\n예를들어 {\"김철수\":78, \"이하나\":97, \"정진원\":88}이 있다면 각각의 키와 값을\n\n\t(\"김철수\", 78)\n\t(\"이하나\", 97)\n\t(\"정진원\", 88)\n\n> 과 같이 튜플로 분리하고 키를 기준으로 정렬해서 다음과 같은 리스트를 만들면 됩니다.\n\n\t[ (\"김철수\", 78), (\"이하나\", 97), (\"정진원\", 88) ]\n\n> 다음 sort_dictionary 함수를 완성해 보세요.\n\n### 내 코드\n\n```python\ndef sort_dictionary(dic):\n    '''입력받은 dic의 각 키와 값을 튜플로 만든 다음, 키 값을 기준으로 정렬해서 리스트에 넣으세요. 그 리스트를 return하면 됩니다.'''\n    return[(x, dic[x]) for x in sorted(dic.keys())]\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( sort_dictionary( {\"김철수\":78, \"이하나\":97, \"정진원\":88} ))\n```\n\n<br>\n\n### 타인의 코드\n\n```python\ndef sort_dictionary(dic):\n    return sorted(dic.items())\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( sort_dictionary( {\"김철수\":78, \"이하나\":97, \"정진원\":88} ))\n```\n\n```python\ndef sort_dictionary(dic):\n    '''입력받은 dic의 각 키와 값을 튜플로 만든 다음, 키 값을 기준으로 정렬해서 리스트에 넣으세요. 그 리스트를 return하면 됩니다.'''\n    return sorted(list(zip(dic.keys(), dic.values())), key=lambda x: x[0])\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( sort_dictionary( {\"김철수\":78, \"이하나\":97, \"정진원\":88} ))\n```\n\n```python\ndef sort_dictionary(dic):\n    return sorted(tuple(dic.items()))\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( sort_dictionary( {\"김철수\":78, \"이하나\":97, \"정진원\":88} ))\n```\n","excerpt":"문제 설명 딕셔너리는 들어있는 값에 순서가 없지만, 키를 기준으로 정렬하고 싶습니다. 그래서 키와 값을 튜플로 구성하고, 이를 순서대로 리스트에 넣으려고 합니다.\n예를들어 {\"김철수\":78, \"이하나\":97, \"정진원\":88}이 있다면 각각의 키와 …","fields":{"slug":"/level1. 딕셔너리정렬하기/"},"frontmatter":{"date":"Jun 13, 2017","title":"Python _ Lv1. 딕셔너리 정렬하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> strange_sort함수는 strings와 n이라는 매개변수를 받아들입니다.\nstrings는 문자열로 구성된 리스트인데, 각 문자열을 인덱스 n인 글자를 기준으로 정렬하면 됩니다.\n\n> 예를들어 strings가 [\"sun\", \"bed\", \"car\"]이고 n이 1이면 각 단어의 인덱스 1인 문자 u, e ,a를 기준으로 정렬해야 하므로 결과는 [\"car\", \"bed\", \"sun\"]이 됩니다.\nstrange_sort함수를 완성해 보세요.\n\n### 내 코드\n\n```python\ndef strange_sort(strings, n):\n    '''strings의 문자열들을 n번째 글자를 기준으로 정렬해서 return하세요'''\n    return sorted(strings, key=lambda strings:strings[n])\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( strange_sort([\"sun\", \"bed\", \"car\"], 1) )\n```\n\n<br>\n\n### 타인의 코드\n\nx의 n번째 문자열을 키값으로, x문자열 자체를 value값으로 가지는 dictionary를 선언하고 x의 n번째 문자열만 가지는 list를 각각 선언한 뒤, list를 정렬한다.\n\n선언한 딕셔너리에서 x의 value값을 가져와서 리턴하면 순서대로 정렬된 리스트가 반환된다.\n\n```python\ndef strange_sort(strings, n):\n    '''strings의 문자열들을 n번째 글자를 기준으로 정렬해서 return하세요'''\n    dict1 = {x[n]:x for x in strings}\n    list1 = [x[n] for x in strings]\n    list1.sort()\n    return [dict1[x] for x in list1]\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( strange_sort([\"sun\", \"bed\", \"car\"], 1) )\n```\n\nitemgetter 함수를 사용하여 key값을 n을 기준으로 value 찾음\n\n```python\nfrom _operator import itemgetter\n\ndef strange_sort(strings, n):\n    '''strings의 문자열들을 n번째 글자를 기준으로 정렬해서 return하세요'''\n\n    return sorted(strings, key=itemgetter(n))\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( strange_sort([\"sun\", \"bed\", \"car\"], 1) )\n```\n\n<br>\n\nn번째 문자를 기준으로 정렬해야하므로 n번째 문자를 원래 단어에 붙여서 정렬한 뒤 1번째부터 슬라이스한 값만 반환하였다.\n\n```python\ndef strange_sort(strings, n):\n    a = [i[n]+i for i in strings]\n    a.sort()\n    return [i[1:] for i in a]\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( strange_sort([\"sun\", \"bed\", \"car\"], 1) )\n```\n","excerpt":"문제 설명 strange_sort함수는 strings와 n이라는 매개변수를 받아들입니다.\nstrings는 문자열로 구성된 리스트인데, 각 문자열을 인덱스 n인 글자를 기준으로 정렬하면 됩니다. 예를들어 strings가 \"sun\", \"bed\", \"ca…","fields":{"slug":"/level1. 문자열내맘대로정렬하기/"},"frontmatter":{"date":"Jun 12, 2017","title":"Python _ Lv1. 문자열 내맘대로 정렬하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> numPY함수는 대문자와 소문자가 섞여있는 문자열 s를 매개변수로 입력받습니다.\ns에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 리턴하도록 함수를 완성하세요. 'p', 'y' 모두 하나도 없는 경우는 항상 True를 리턴합니다.\n예를들어 s가 \"pPoooyY\"면 True를 리턴하고 \"Pyy\"라면 False를 리턴합니다.\n\n### 내 코드\n\n```python\ndef numPY(s):\n    # 함수를 완성하세요\n    if s.lower().count('p') == s.lower().count('y'):\n        return True\n    else:\n        return False\n```\n\n<br>\n\n### 타인의 코드\n\n```python\ndef numPY(s):\n    # 함수를 완성하세요\n    return s.lower().count('p') == s.lower().count('y')\n```\n","excerpt":"문제 설명 numPY함수는 대문자와 소문자가 섞여있는 문자열 s를 매개변수로 입력받습니다.\ns에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 리턴하도록 함수를 완성하세요. 'p', 'y' 모두 하나도 없는 경우는 항상…","fields":{"slug":"/level1. 문자열내p와y의갯수/"},"frontmatter":{"date":"Jun 08, 2017","title":"Python _ Lv1. 문자열 내 p와 y의 갯수","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n\n> alpha_string46함수는 문자열 s를 매개변수로 입력받습니다.\ns의 길이가 4혹은 6이고, 숫자로만 구성되있는지 확인해주는 함수를 완성하세요.\n예를들어 s가 \"a234\"이면 False를 리턴하고 \"1234\"라면 True를 리턴하면 됩니다\n\n### 내코드\n\n```python\ndef alpha_string46(s):\n    if len(s) == 4 or len(s) == 6:\n        try:\n            int(s)\n            return True\n        except ValueError as e:\n            return False\n    return False\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( alpha_string46(\"a234\") )\nprint( alpha_string46(\"1234\") )\n```\n\n<br>\n\n### 타인의 코드\n\n```python\ndef alpha_string46(s):\n    return s.isdigit() and len(s) in [4, 6]\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( alpha_string46(\"a234\") )\nprint( alpha_string46(\"1234\") )\n```\n\n<br>\n","excerpt":"문제 설명 alpha_string46함수는 문자열 s를 매개변수로 입력받습니다.\ns의 길이가 4혹은 6이고, 숫자로만 구성되있는지 확인해주는 함수를 완성하세요.\n예를들어 s가 \"a234\"이면 False를 리턴하고 \"1234\"라면 True를 리턴하면 …","fields":{"slug":"/level1. 문자열다루기기본/"},"frontmatter":{"date":"Jun 08, 2017","title":"Python _ Lv1. 문자열 다루기 기본","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> findKim 함수(메소드)는 String형 배열 seoul을 매개변수로 받습니다.\n\n> seoul의 element중 \"Kim\"의 위치 x를 찾아, \"김서방은 x에 있다\"는 String을 반환하세요.\n> seoul에 \"Kim\"은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.\n\n### 내 코드\n\n```\ndef findKim(seoul):\n    kimIdx = 0\n    while kimIdx < len(seoul):\n        if seoul[kimIdx]==\"Kim\":\n            return \"김서방은 {}에 있다\".format(kimIdx)\n        kimIdx += 1\n\n# 실행을 위한 테스트코드입니다.\nprint(findKim([\"Queen\", \"Tod\", \"Kim\"]))\n```\n\n\n### 타인의 코드\n\n```python\ndef findKim(seoul):\n    return \"김서방은 {}에 있다\".format(seoul.index('Kim'))\n\n\n# 실행을 위한 테스트코드입니다.\nprint(findKim([\"Queen\", \"Tod\", \"Kim\"]))\n```\n\n```python\ndef findKim(seoul):\n\n    for i,v in enumerate(seoul):\n        if v == 'Kim':\n            kimIdx = i\n\n\n    return \"김서방은 {}에 있다\".format(kimIdx)\n\n\n# 실행을 위한 테스트코드입니다.\nprint(findKim([\"Queen\", \"Tod\", \"Kim\"]))\n```\n\n<br>\n","excerpt":"문제 설명 findKim 함수(메소드)는 String형 배열 seoul을 매개변수로 받습니다. seoul의 element중 \"Kim\"의 위치 x를 찾아, \"김서방은 x에 있다\"는 String을 반환하세요.\nseoul에 \"Kim\"은 오직 한 번만 나타…","fields":{"slug":"/level1. 서울에서김서방찾기/"},"frontmatter":{"date":"Jun 07, 2017","title":"Python _ Lv1. 서울에서 김서방 찾기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> printTriangle 메소드는 양의 정수 num을 매개변수로 입력받습니다.\n다음을 참고해 *(별)로 높이가 num인 삼각형을 문자열로 리턴하는 printTriangle 메소드를 완성하세요\nprintTriangle이 return하는 String은 개행문자('\\n')로 끝나야 합니다.\n\n높이가 3일때\n\n\t*\n\t**\n\t***\n\n### 내코드\n\n```python\ndef printTriangle(num):\n    s = \"\"\n    for row in range(1, num+1):\n        s += ('*' * row + '\\n')\n    return s\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( printTriangle(3) )\n```\n\n\n### 타인의 코드\n\n```python\ndef printTriangle(num):\n    return ''.join(['*'*i + '\\n' for i in range(1,num+1)])\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint( printTriangle(3))\n```\n","excerpt":"문제 설명 printTriangle 메소드는 양의 정수 num을 매개변수로 입력받습니다.\n다음을 참고해 *(별)로 높이가 num인 삼각형을 문자열로 리턴하는 printTriangle 메소드를 완성하세요\nprintTriangle이 return하는 St…","fields":{"slug":"/level1. 삼각형출력하기/"},"frontmatter":{"date":"Jun 07, 2017","title":"Python _ Lv1. 삼각형 출력하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n> water_melon함수는 정수 n을 매개변수로 입력받습니다.\n길이가 n이고, 수박수박수...와 같은 패턴을 유지하는 문자열을 리턴하도록 함수를 완성하세요.\n\n> 예를들어 n이 4이면 '수박수박'을 리턴하고 3이라면 '수박수'를 리턴하면 됩니다.\n\n### 내 코드\n\n```python\ndef water_melon(n):\n    # 함수를 완성하세요.\n\tif n % 2 == 0:\n\t\treturn '수박' * (n // 2)\n\telse:\n\t\treturn '수박' * (n // 2) + '수'\n\n# 실행을 위한 테스트코드입니다.\nprint(\"n이 3인 경우: \" + water_melon(3));\nprint(\"n이 4인 경우: \" + water_melon(4));\n```\n\n<br>\n\n### 타인의 코드\n\n수박을 n번만큼 곱한다음 만들어진 문자열에서 n번째까지만 슬라이스\n\n```python\ndef water_melon(n):\n\ts = \"수박\" * n\n\treturn s[:n]\n```\n","excerpt":"문제 설명 water_melon함수는 정수 n을 매개변수로 입력받습니다.\n길이가 n이고, 수박수박수...와 같은 패턴을 유지하는 문자열을 리턴하도록 함수를 완성하세요. 예를들어 n이 4이면 '수박수박'을 리턴하고 3이라면 '수박수'를 리턴하면 됩니다…","fields":{"slug":"/level1. 수박수박수박수/"},"frontmatter":{"date":"Jun 05, 2017","title":"lPython _ Lv1. 수박수박수박수?","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> strToInt 메소드는 String형 str을 매개변수로 받습니다.\nstr을 숫자로 변환한 결과를 반환하도록 strToInt를 완성하세요.\n예를들어 str이 \"1234\"이면 1234를 반환하고, \"-1234\"이면 -1234를 반환하면 됩니다.\nstr은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.\n\n### 내 코드\n\n```python\ndef strToInt(str):\n    result = int(str)\n    #함수를 완성하세요\n\n    return result\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(strToInt(\"-1234\"));\n```\n","excerpt":"문제 설명 strToInt 메소드는 String형 str을 매개변수로 받습니다.\nstr을 숫자로 변환한 결과를 반환하도록 strToInt를 완성하세요.\n예를들어 str이 \"1234\"이면 1234를 반환하고, \"-1234\"이면 -1234를 반환하면 됩…","fields":{"slug":"/level1. 스트링을숫자로바꾸기/"},"frontmatter":{"date":"Jun 02, 2017","title":"Python _ Lv1. 스트링을 숫자로 바꾸기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> `sum_digit`함수는 자연수를 전달 받아서 숫자의 각 자릿수의 합을 구해서 return합니다.\n> 예를들어 number = 123이면 1 + 2 + 3 = 6을 return하면 됩니다.\n`sum_digit` 함수를 완성해보세요.\n\n### 내코드\n\n```python\ndef sum_digit(number):\n    '''number의 각 자릿수를 더해서 return하세요'''\n    num_list = list(str(number))\n    sum = 0\n    for i in num_list:\n        sum += int(i)\n    return sum\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(\"결과 : {}\".format(sum_digit(123)));\n```\n\n<br>\n\n### 타인의 코드\n\n재귀 구조를 활용하여 일의 자리수는 나머지값으로 더하고 10의 자리수는  다시 sum_digit()함수를 사용하여 10으로 나눈 값을 더한다.\n\n```python\ndef sum_digit(number):\n    if number < 10:\n        return number;\n    return (number % 10) + sum_digit(number // 10)\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(\"결과 : {}\".format(sum_digit(123)));\n```\n\n<br>\n\nnumber를 str형태로 변환한 후 for loop를 이용해 돌면서 나온 각 자리수를 다시 숫자형으로 변환하고, 리스트 내장함수 sum()을 사용하여 각각의 값을 더해준다.\n\n```python\ndef sum_digit(number):\n    return sum([int(i) for i in str(number)])\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nprint(\"결과 : {}\".format(sum_digit(123)));\n```\n","excerpt":"문제 설명 함수는 자연수를 전달 받아서 숫자의 각 자릿수의 합을 구해서 return합니다.\n예를들어 number = 123이면 1 + 2 + 3 = 6을 return하면 됩니다.\n 함수를 완성해보세요. 내코드 타인의 코드 재귀 구조를 활용하여 일의 …","fields":{"slug":"/level1. 자릿수더하기/"},"frontmatter":{"date":"Jun 02, 2017","title":"Python _ Lv1. 자릿수 더하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> nextSquare함수는 정수 n을 매개변수로 입력받습니다. n이 임의의 정수 x의 제곱이라면 x+1을 리턴하고, n이 임의의 정수 x의 제곱이 아니라면 'no'을 리턴하는 함수를 완성하세요.\n\n> 예를 들어 n이 121이라면 이는 정수 11의 제곱이므로 (11+1)의 제곱인 144를 리턴하고, 3이라면 'no'를 리턴하면 됩니다.\n\n### 내 코드\n\n```python\nimport math\n\ndef nextSquare(n):\n\tif math.sqrt(n) - int(math.sqrt(n)) == 0:\n\t\tnum = math.sqrt(n) + 1\n\t\treturn math.pow(num, 2)\n\treturn 'no'\n```\n\n<br>\n\n### 타인의 코드\n\n```python\ndef nextSqure(n):\n    sqrt = n ** (1/2)\n\n    if sqrt % 1 == 0:\n        return (sqrt + 1) ** 2\n    return 'no'\n```\n","excerpt":"문제 설명 nextSquare함수는 정수 n을 매개변수로 입력받습니다. n이 임의의 정수 x의 제곱이라면 x+1을 리턴하고, n이 임의의 정수 x의 제곱이 아니라면 'no'을 리턴하는 함수를 완성하세요. 예를 들어 n이 121이라면 이는 정수 11의…","fields":{"slug":"/level1. 정수제곱근판별하기/"},"frontmatter":{"date":"Jun 01, 2017","title":"Python _ Lv1. 정수 제곱근 판별하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 문제 설명\n\n> rm_small함수는 list타입 변수 mylist을 매개변수로 입력받습니다.\nmylist 에서 가장 작은 수를 제거한 리스트를 리턴하고, mylist의 원소가 1개 이하인 경우는 []를 리턴하는 함수를 완성하세요.\n예를들어 mylist가 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10, 8, 22]면 [10, 22]를 리턴 합니다.\n\n### 내 코드\n\n```python\ndef rm_small(mylist):\n\treturn [i for i in mylist if i > min(mylist)]\n\nmy_list=[4, 3, 2, 1]\nprint('결과 {} \".format(rm_small(my_list)))\n```\n\n### 타인의 코드\n\n```python\ndef rm_small(mylist):\n    # 함수를 완성하세요\n    mylist.remove(min(mylist))\n    return mylist\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nmy_list = [4,3,2,1]\nprint(\"결과 {} \".format(rm_small(my_list)))\n```\n\n```python\ndef rm_small(mylist):\n    # 함수를 완성하세요\n    lowest_num_idx = 0\n    for i in range(len(mylist) - 1):\n        if mylist[lowest_num_idx] > mylist[i + 1]:\n            lowest_num_idx = mylist.index(mylist[i + 1])\n\n    del mylist[lowest_num_idx]\n    return mylist\n\n\n# 아래는 테스트로 출력해 보기 위한 코드입니다.\nmy_list = [4, 3, 2, 1]\nprint(\"결과 {} \".format(rm_small(my_list)))\n```\n","excerpt":"문제 설명 rm_small함수는 list타입 변수 mylist을 매개변수로 입력받습니다.\nmylist 에서 가장 작은 수를 제거한 리스트를 리턴하고, mylist의 원소가 1개 이하인 경우는 []를 리턴하는 함수를 완성하세요.\n예를들어 mylist가…","fields":{"slug":"/level1. 제일작은수제거하기/"},"frontmatter":{"date":"Jun 01, 2017","title":"Python _ Lv1. 제일 작은수 제거하기","tags":["algorithm","python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`git`에서도 일정 시점에 `tag`를 등록하여 원하는 시점까지 버전을 그룹핑하거나 기록해둘 수 있다. 태그는 `v1.0`처럼 특정 시점에 이름을 붙이는 기능인데, 주로 서비스의 배포 버전을 제공할 때 사용한다. 또한 작업중 되돌아갈 여지가 있는 시점에 붙이기도 한다.\n\n<br>\n\n## Git의 태그\n\n`Git`에서 생성할 수 있는 태그는 `Annotated`와 `Lightweight` 두 가지가 있다.\n\n`Annotated` 형식의 태그는 Git 데이터베이스에 태그를 만든 사람의 이름, 이메일, 태그생성일, 태그 메세지 등의 정보를 저장한다.\n\n반면 `Lightweight` 형식의 태그는 이러한 정보를 저장하지 않고 태그만 저장한다. 따라서 추가적인 정보가 필요할 때만 `Annotated` 형식의 태그를 사용하면 된다.\n\n아래에서 설명하는 명령어는 기본으로  `Annotated` 형식의 태그를 생성하므로 `Lightweight` 형식은 따로 설명할 예정이다.\n\n<br>\n\n## 태그 생성하기\n\n태그는 다음 명령어로 생성한다. 태그명과 함께 생성하면 에디터모드에서 해당 태그에 대한 설명 메시지를 추가할 수 있다.\n\n```powershell\n# 새로운 태그이름과 메세지를 생성한다.\n# git tag -a <태그명> -m \"태그의 설명 메세지\"\n$ git tag -a v1.0 -m \"new tag 1.0\"\n\n# -m 명령으로 메세지를 쓰지 않으면 git은 편집기를 실행시킨다.\n# git tag -a <태그명>\n$ git tag -a v1.0\n```\n\n만들어진 태그는 다음과 같이 확인한다.\n\n```powershell\n$ git tag\nv1.0\n```\n\n위의 명령은 알파벳 순서대로 정리된 태그를 보여준다.\n\n<br>\n\n## 태그 정보 조회하기\n\n`show` 명령어를 통해 생성된 태그의 정보와 커밋된 정보들을 확인할 수 있다.\n\n```powershell\n$ git show v1.0\n\n# 태그의 정보\ntag v1.0\nTagger: JuliaHwang <qufskan9396@gmail.com>\nDate:   Tue Oct 05 19:33:10 2017 +0900\n\nadd first tag\n\n# 커밋 정보\ncommit 42073f5a29f37567a635c7745545abf8996a7e7c\nMerge: 280b054 bed426b\nAuthor: JuliaHwang <qufskan9396@gmail.com>\nDate:   Wed Aug 2 16:23:15 2017 +0900\n\n    Merge branch 'master' of github.com:juliahwang/gitpractice into julia\n```\n\n<br>\n\n## Lightweight 형식의 태그 생성하기\n\n`Lightweight` 태그는 기본적으로 파일에 커밋 체크섬만을 저장한다. `Lightweight` 태그를 만들 때는 `-a`, `-s`, `-m` 옵션을 사용하지 않는다.\n\n```powershell\n# lightweight 태그 생성\n$ git tag v1.0-lw\n\n# 태그 조회\n$ git tag\nv1.0\nv1.0-lw\n```\n\n생성한 `v1.0-lw`에 대해 정보를 확인해보면 태그 정보는 출력되지 않는다.\n\n```powershell\n$ git show v1.0-lw\ncommit 42073f5a29f37567a635c7745545abf8996a7e7c\nMerge: 280b054 bed426b\nAuthor: JuliaHwang <qufskan9396@gmail.com>\nDate:   Wed Aug 2 16:23:15 2017 +0900\n\n    Merge branch 'master' of github.com:juliahwang/gitpractice into julia\n```\n\n<br>\n\n## 태그에 서명하기\n\nGPG(`RSA`, 즉, 공개키 암호키를 사용한 암호화 방식) 개인키가 있는 경우에는 `-s` 옵션으로 태그에 서명을 저장할 수 있다.\n\n```powershell\n$ git tag -s v1.0 -m \"add signature on v1.0\"\n```\n\n`git show` 명령어를 통해서는 서명을 확인할 수 있다.\n\n<br>\n\n\n## 예전 커밋에 태그하기\n\n지나간 커밋에 대해 태그를 하고 싶을 경우에는 커밋 히스토리를 조회하여 태그를 붙이기 위한 커밋 체크섬을 알아야 한다.\n\n`log` 명령어로 원하는 커밋의 체크섬 일부를 알아낸다.\n\n\n```powershell\n$ git log --pretty=oneline\n9fceb02d0ae598e95dc970b74767f19372d61af8 create new file\n964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme file\n4682c3261057305bdd616e23b64b0857d832627b add remote practice\n166ae0c4d3f420721acbb115cc33848dfcc2121a start project\n```\n\n`updated readme file`에 `v1.1` 태그를 붙이려고 한다. 해당 커밋의 체크섬 앞부분 일부를 사용하여 다음과 같이 명령을 실행한다.\n\n```powershell\n$ git tag -a v1.1 -m \"add readme\" 8a5cbc43\n```\n\n`show` 명령어를 실행하면 해당 커밋에 태그가 등록된 것을 커밋정보로 확인할 수 있다.\n\n<br>\n\n## 태그를 원격 저장소에 공유하기\n\n`git push`는 태그를 원격저장소에 함께 전송하지 않는다. 즉, 태그는 서버에 별도로 푸시해야한다는 뜻이다.  \n\n태그를 푸시할 때는 레포지토리의 브랜치명인 `master`가 아닌 버전 이름으로 해줘야 한다.\n\n```powershell\n$ git push origin v1.0\n\n# 복수의 태그를 한번에 푸시할 경우\n$ git push origin --tags\n\n$ git push origin --tags\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 167 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo github.com:juliahwang/gitpractice.git\n * [new tag]         v1.0 -> v1.0\n * [new tag]         v1.0-lw -> v1.0-lw\n```\n\n<br>\n\n공유된 태그정보는 아래 이미지의 `releases` 탭에서 확인할 수 있다.\n\n![tag1](https://github.com/juliahwang/juliahwang.github.io/blob/master/_posts/images/2017-10-06/tag1.png?raw=true)\n\n<br>\n\n태그 탭에서는 태그기록을 확인할 수 있으며,\n배포버전으로 내보내거나 릴리즈 노트를 저장할 수 있다.\n\n![tag2](https://github.com/juliahwang/juliahwang.github.io/blob/master/_posts/images/2017-10-06/tag2.png?raw=true)\n\n<br>\n\n### 원격 저장소를 `clone`, `pull`할 경우\n\n당연한 말이지만 태그정보도 함께 받을 수 있다.\n\n<br>\n","excerpt":"에서도 일정 시점에 를 등록하여 원하는 시점까지 버전을 그룹핑하거나 기록해둘 수 있다. 태그는 처럼 특정 시점에 이름을 붙이는 기능인데, 주로 서비스의 배포 버전을 제공할 때 사용한다. 또한 작업중 되돌아갈 여지가 있는 시점에 붙이기도 한다. Git…","fields":{"slug":"/git_06/"},"frontmatter":{"date":"Oct 06, 2016","title":"Git _ 태그 관리하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`git`에서는 로컬 저장소에서만 관리하던 소스코드를 원격 저장소에 올려 다른 사람들이 보거나 사용할 수 있도록 하고 있다. 이를 통해 단순 공유뿐만 아니라, 협업, 그리고 더 나아가 오픈소스의 기여까지 편리하게 작업할 수 있다. 이번 포스트에서는 원격저장소를 다루는 방법에 대해 알아보았다.\n\n<br>\n\n## 원격(리모트) 저장소\n\n```powershell\n# 리모트 저장소가 있는지 확인하거나 저장소 이름 확인\n$ git remote\n# 대부분 origin을 사용하는데, 원하는 이름으로 지어줄 수 있다.\norigin\n```\n\n<br>\n\n### 원격저장소 연결하기\n\n`Github`의 레포지토리를 기준으로 설명하였다. 웹에서 레포지토리를 생성한 후 레포지토리 주소를 터미널에서 연결하기 원하는 로컬 저장소 폴더에 등록해준다.\n\n```powershell\n# git remote add origin <repo주소>\n$ git remote add origin https://github.com/bbrubidev/remote-project.git\n```\n\n<br>\n\n### 하나의 로컬저장소에 원격저장소 여러 개 연결하기\n\n레포지토리는 여러 개 등록할 수도 있다. 단, 원격 저장소의 이름을 다른 것으로 해준다.\n\n```powershell\n# git remote add onemore <다른 repo주소>\n$ git remote add onemore another-remote-project.git\n```\n\n이 때는 푸시할 때 원격 저장소 이름을 구분하여 버전관리를 해준다.\n\n```powershell\n# origin 원격저장소에 푸시\n$ git push origin master\n\n# onemore 원격저장소에 푸시\n$ git push onemore master\n```\n\n<br>\n\n### 원격저장소 연결 확인하기\n\n`-v` 옵션을 통해 연결한 저장소의 상태를 체크할 수 있다.\n\n```powershell\n$ git remote -v\norigin\thttps://github.com/bbrubidev/bbrubidev.github.io.git (fetch)\norigin\thttps://github.com/bbrubidev/bbrubidev.github.io.git (push)\n```\n\n위에서 `fetch`는 파일을 불러오는 저장소를 의미하며, `push` 파일을 저장하는 저장소를 의미한다.\n\n복수의 원격 저장소를 연결한 경우에는 다음과 같이 출력된다.\n\n```powershell\n$ git remote -v\norigin\thttps://github.com/bbrubidev/remote-project.git (fetch)\norigin\thttps://github.com/bbrubidev/remote-project.git (push)\nonemore https://github.com/bbrubidev/another-remote-project.git (fetch)\nonemore https://github.com/bbrubidev/another-remote-project.git (push)\n```\n\n<br>\n\n## 원격 저장소 `clone`하기\n\n`remote-project`의 상위폴더 위치에서 `remote-project-clone` 이라는 이름의 새로운 폴더를 만든다.\n\n그리고 이미 로컬저장소가 연결되어 있는 원격저장소를 `remote-project-clone` 폴더에 `clone` 명령어로 내려받는다.\n\n```powershell\n$ git clone https://github.com/bbrubidev/remote-project.git remote-project-clone\n```\n\n즉, 동일한 원격 저장소와 연결된 로컬 저장소가 2개가 되었다.\n\n```txt\n1. remote-project(local1)\n2. remote-project-clone(local2)\n```\n\n<br>\n\n## `fetch`와 `merge`, 그리고 `pull`\n\n하나의 원격 저장소를 여러 로컬 저장소에서 사용할 경우 각 로컬 저장소에서 작업한 변경사항들을 저장소별로 적용해줘야 한다.\n\n이 때 원격 저장소에서 업데이트된 최신 스냅샷을 반영하는 명령어로 `fetch`, `merge`, 그리고 `pull`을 사용한다.\n\n원 로컬저장소와 `clone`받은 새로운 로컬저장소가 있을 때, `remote-project(local1)`에 새로운 파일(`README.md`)을 커밋하고 푸시하면 `version2`가 생긴다.\n\n`remote-project-clone` 폴더는 여전히 `version1`에 머물러있어 `remote-project`의 새파일이 반영되지 않은 상태다.\n\n이 때는 원격저장소에서 `fetch` 명령어와 `merge` 명령어를 통해 최신수정사항을 반영해준다.\n\n```powershell\n# 원격저장소에서 최신의 스냅샷을 가져온다.\n$ git fetch\n\n# 스냅샷을 현재 저장소에 반영한다.\n$ git merge origin/master\n\n# fetch와 merge를 한번에 실행해주는 명령어로 pull을 사용하기도 한다.\n$ git pull\n```\n\n예를 들어, Github 웹에서 `README.md`를 추가할 경우 로컬 저장소에는 파일이 없으므로 `git pull origin master`로 최신 정보를 불러와야한다.\n\n<br>\n\n---\n\n## 마치며\n\n어떤 명령어를 써야할 지 모르겠을 때는 `help` 명령어를 사용한다.\n\n```powershell\n# git help <명령어>\n$ git help merge\n```\n\n해당 명령어에 대해 사용할 수 있는 세부 명령어에 대한 정보를 자세히 설명해 놓았다.\n\n<br>\n","excerpt":"에서는 로컬 저장소에서만 관리하던 소스코드를 원격 저장소에 올려 다른 사람들이 보거나 사용할 수 있도록 하고 있다. 이를 통해 단순 공유뿐만 아니라, 협업, 그리고 더 나아가 오픈소스의 기여까지 편리하게 작업할 수 있다. 이번 포스트에서는 원격저장소…","fields":{"slug":"/git_05/"},"frontmatter":{"date":"Oct 04, 2016","title":"Git _ 원격저장소 연결하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n버전관리컨트롤 시스템인 Git에서 파일을 실수로 추가하지 않았거나 추가하면 안될 파일의 상태를 바꾸고 싶을 때 어떻게 해주어야하는지 정리해보았다.\n\n<br>\n\n## 커밋 합치기\n\n`git`에서 프로젝트 초기에 설정해주는 `.gitignore` 등의 파일을 빼먹고 커밋했다면 다음 명령어를 사용하여 원하는 커밋에 파일을 추가해줄 수 있다.\n\n```powershell\n$ git commit --amend\n```\n\n에디터 창이 열리면 처음에 입력했던 커밋 메세지가 그대로 뜬다. 추가하거나 그대로 저장한다. `.gitignore`를 추가한 커밋사항이 추가저장된 것을 확인할 수 있다.\n\n<br>\n\n### 삭제\n\n이 경우에는 바로 전에 커밋된 파일을 삭제할 수는 있지만 해당 커밋 이후 다른 커밋을 하고 해당 커밋으로 돌아온 경우 파일이 되살아난다.\n\n<br>\n\n## staging area에서 파일 제외하기\n\n`git add *`나 `git add -A`는 `untracked` 상태의 파일들을 한꺼번에`staging area`로 옮겨준다. 해당 명령어를 실행한 후 몇몇 파일은 `untracked` 상태로 되돌리고 싶은 경우에는 다음과 같이 명령어를 사용한다.\n\n```powershell\n$ git rm -r \"example.md\" --cached\n```\n\n<br>\n\n## 커밋에서 파일 하나만 제외하기\n\n`add` 명령어로 staging area에 파일을 추가하거나 커밋한 경우 다음 명령어를 사용하면 원하는 위치의 파일이나 파일명과 일치하는 파일을 `untracked` 상태로 되돌릴 수 있다.\n\n```powershell\n$ git reset HEAD~1\n$ git reset HEAD <파일명>\nUnstaged changes after reset:\nM\texample.md\n```\n\n<br>\n\n## modified 상태의 파일 되돌리기\n\n이미 커밋하고 수정한 파일(`modified` 상태)에서 수정이전의 상태로 가고싶은 경우에 `checkout` 명령어를 사용한다.\n\n`git checkout --<파일명>`\n\n하지만 해당 명령어는 그동안의 수정내용을 모두 지우고 복구되지도 않으니 주의해야한다.\n\n<br>\n","excerpt":"버전관리컨트롤 시스템인 Git에서 파일을 실수로 추가하지 않았거나 추가하면 안될 파일의 상태를 바꾸고 싶을 때 어떻게 해주어야하는지 정리해보았다. 커밋 합치기 에서 프로젝트 초기에 설정해주는  등의 파일을 빼먹고 커밋했다면 다음 명령어를 사용하여 원…","fields":{"slug":"/git_03/"},"frontmatter":{"date":"Oct 02, 2016","title":"Git _ 버전관리 상태 수정하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`git`을 사용하여 버전관리를 할 때 포함시켜야하는 파일들과 포함되면 안되는 파일들이 존재한다. 이번 포스트에서는 버전관리에 포함시키지 말아야 하는 파일을 `git`에서 어떻게 처리하는지, 그리고 이미 원격 저장소에 올린 파일을 제외시키는 방법에 대해 정리하였다.\n\n<br>\n\n## .gitignore\n\n버전관리에서 제외시킬 파일은 `.gitignore` 파일을 생성하여 관리한다. 프로젝트에 필요한 비밀정보 및 개인정보로 구성된 json 형태의 파일이나 `.DS_Store`, `pyenv` 관련 파일들을 적어두는 것이다.\n\n- `.gitignore`은 프로젝트 생성 초기에 만들어주는 것이 좋다.\n- `.gitignore` 파일을 생성한 후 에디터로 열어 커밋하지 않을 파일 확장자를 추가한다.\n- 또는 git이 무시할 파일의 패턴을 등록하여 `git add` 또는 `git commit` 명령어에서 제외되도록 한다.\n\t- `[oa]` : 대괄호 안에 있는 문자를 확장자로 쓰는 파일들은 무시된다. 예를 들어, `o`와 `a`가 포함된 파일은 git에 올라가지 않는다.\n\t- `*.swp` : 파일이름에 상관없이 `.swp`를 확장자로 가지는 파일을 모두 제외시켜준다.\n\n```txt\n# .gitignore\n# 추가할 확장자명\n\n #################\n #compiled source#\n *.a\n *.o\n *.so\n\n ############\n # packages #\n *.dmg\n *.iso\n *.tar\n *.swp\n\n ######################\n # OS generated files #\n .DS_Store*\n```\n\n<br>\n\n- 작성완료 후에는 `.gitignore`파일을 버전컨트롤 관리시스템에 등록해준다.\n\n```powershell\n$ git add .\n$ git commit -m \"add ignore file config\"\n```\n\n<br>\n\n## 버전컨트롤이 되고 있는 파일 제외시키기\n\n원격저장소에 올라간 파일은 이미 버전 컨트롤이 시작된 파일이다.(즉, commit된 파일이다.) 만약 제외시킬 파일을 실수로 버전관리에 추가했거나 나중에 제외시킬 필요가 생겼을 경우에는 `.gitignore`에 해당 파일이 제외되도록 추가히주는 것 뿐만 아니라 이미 올라간 기록을 지워주는 작업이 필요하다.\n\n예를 들어 `.DS_Store` 파일을 실수로 `add` 또는 `commit`했을 경우에는 다음과 같이 제외해준다.\n\n```powershell\n$ git rm --dry-run *.DS_Store\n```\n\n<br>\n\n## 이미 파일이 원격저장소에 `push`된 경우\n\n이미 원격저장소에 푸시를 했다면 문제는 좀더 복잡해진다. 이럴 때는 레포지토리를 클론하여 다음과 같은 과정을 진행해준다.\n\n```powershell\n# 제외시킬 파일을 이름으로 찾아 기록에서 삭제한다.\nfind . -name \".DS_Store\" -exec git rm --cached -f {} \\;.\n\n# 삭제한 과정을 커밋해준다.\ngit commit -m \"delete files\"\n\n# 해당 커밋을 푸시해준다.\ngit push\n```\n\n해당 파일을 깃 레포지토리에서 지우면서 로컬에서만 관리하고 싶은 경우에  위와 같이 처리해준다.\n`.gitignore`는 `.DS_Store`가 인덱스에서 먼저 제거된 경우에만 작동하므로 `git rm --cached -f` 명령어를 사용하였다.\n\n<br>\n\n---\n\n## 마치며\n\n버전관리에 등록될 파일과 그렇지 않은 파일을 관리해주는 것은 보안 측면에서 매우 중요하다. 되도록이면 프로젝트 초기 설계단계에서 작성하여 실수로 기록을 남기는 일이 없도록 하자.\n\n만약 어떤 파일을 제외시켜야 할 지 모르겠다면 사용하고 있는 언어와 프레임워크, OS 별로 원격저장소에서 제외시킬 파일 확장자를 관리해주는 API 사이트(https://www.gitignore.io/)를 사용하는 것도 좋은 방법이다.\n\n![확장자](imgs/2017-10-10/gitignore1.png)\n\n<br>\n\n접속하여 검색창에서 사용하는 언어를 입력하면 다음과 같이 해당 언어에 대해 생성되는 파일 중 버전관리에서 제외할 확장자들을 텍스트로 제공해준다.\n\n![확장자](imgs/2017-10-10/gitingore2.png)\n\n\n<br>\n","excerpt":"을 사용하여 버전관리를 할 때 포함시켜야하는 파일들과 포함되면 안되는 파일들이 존재한다. 이번 포스트에서는 버전관리에 포함시키지 말아야 하는 파일을 에서 어떻게 처리하는지, 그리고 이미 원격 저장소에 올린 파일을 제외시키는 방법에 대해 정리하였다. …","fields":{"slug":"/git_04/"},"frontmatter":{"date":"Oct 02, 2016","title":"Git _ 제외시킬 파일 관리하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n버전 컨트롤 시스템인 `git`의 기본원리와 사용법에 대해 간단히 정리하였다.\n\n<br>\n\n\n> 워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다. Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracked 파일은 또 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나이다. 그리고 나머지 파일은 모두 Untracked 파일이다. Untracked 파일은 워킹 디렉토리에 있는 파일 중 스냅샷에도 Staging Area에도 포함되지 않은 파일이다. 처음 저장소를 Clone 하면 모든 파일은 Tracked이면서 Unmodified 상태이다. 파일을 Checkout 하고 나서 아무것도 수정하지 않았기 때문에 그렇다.\n<br>\n\n![img](https://git-scm.com/book/en/v2/images/lifecycle.png)\n\n**(1) Committed**\n\n- 데이터가 로컬 데이터베이스에 안전하게 저장된 상태\n\n<br>\n\n**(2) Tracked**\n\n- git 로컬 저장소에 add된 상태\n\n<br>\n\n**(3) Untracked**\n\n- 파일을 생성하여 작업한 후 git의 로컬저장소에 `add`하지 않은 상태\n\n\n<br>\n\n**(4) Modified**\n\n- 수정한 파일을 로컬저장소에 아직 커밋하지 않은 상태\n\n<br>\n\n**(5) Staged**\n\n- 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태\n- `Staging area`는 `.git` 디렉토리에 있다. 곧 커밋할 파일에 대한 정보를 저장하는 곳이다.\n\n<br>\n\n**(6) Git Directory**\n\n- 메타데이터와 객체 디비(파일)을 저장하는 곳\n- 다른 컴퓨터에 있는 저장소를 clone하면 깃 디렉토리가 만들어진다.\n\n<br>\n\n\n## Git 설치\n\n다음 명령어로 git 설치를 진행한다.\n\n```powershell\n# brew로 설치\n$ brew install git\n$ brew search git\n\n# git 최초설정 진행\n$ git config —global user.name \"이름\"\n$ git config —global user.email \"이메일\"\n$ git config —global core.editor vim\n\n# 설정 확인\n$ git config —list\n\n# 깃에서 사용할 수 있는 명령어 소개\n$ git help\n\n# 특정 명령어에 대한 도움말\n$ git help \"명령어 이름\"\n\n# 깃 버전 확인\n$ git --version\n```\n\n<br>\n\n## 버전관리법\n\n- 폴더로 만들고 `git init` 입력\n- `touch README.md`\n- `md README.md`를 써서 마크다운으로 입력 가능\n- `git add README.md`\n- `git commit`\n- 커밋 메세지 입력 (**입력하지 않으면 commit되지 않는다**)\n- `git log` 명령어를 통해서는 `commit 내역`을 확인할 수 있다.\n- `git log` 명령어에  `-p` 옵션을 추가할 경우 로그를 한번에 확인할 수 있다.\n\n<br>\n\n## 파일 생성에서 커밋까지\n\n- 파일 생성은 `vi` 명령어나 `touch` 명령어를 통해 진행할 수 있다.\n\n```powershell\n$ vi text.txt\n$ touch text.md\n```\n\n- 에디터를 열지 않고도 바로 내용이 있는 파일을 생성할 수 있다. `echo \"기록할 내용\" > \"파일명\"` 명령어를 사용할 경우 파일을 에디터 등으로 열지 않고 기록할 내용을 파일 내에 저장해준다. **단, 꺽쇠(`>`)를 1개 쓰면 이미 있던 내용이 날아가고 새로운 내용으로 덮어쓰므로 있던 내용에 붙여넣기를 할 때는 `>>`를 쓴다.**\n\n- `cat 파일명.확장자`는 파일의 내용을 셸에서 바로 출력, 확인할 수 있게 해주는 명령어이다.\n- `git status` 명령어를 통해 `untracked file`가 생성된 것을 확인할 수 있다.\n- `git commit` : vim 에디터 모드에서 commit 상태를 확인할 수 있으며, 최상단에 커밋 메세지를 입력할 수 있다. **입력하지 않으면 커밋되지 않는다.**\n- `git commit -m \"커밋메세지\"` 명령어를 통해 커밋메세지를 한번에 입력할 수 있다.\n- `git add --all`는 모든 파일을 `staging area`에 추가하는 명령어이다.\n- `git reset HEAD abc2.txt` 명령어는 `add`한 파일을 다시 `untracked file`로 돌릴 때 사용한다.\n\n<br>\n\n## 파일 생성 후 수정/저장\n\n\n- 파일을 만들고 나중에 수정사항이 생겼을 때 만든 파일은 staged 상태이며 추가적으로 수정된 내용은 `modified` 상태로 저장된다.\n\n- `git diff`는 `staged`된 내용과 `modified`된 내용의 차이를 보여준다. 즉, 수정했지만 아직 staged되지 않은(`==modified`) 상태의 파일을 비교할 수 있다. 이 때 `git diff --staged` 또는 `git diff --cached`는 `staged`된 내용과 `commit`된 내용의 차이를 보여준다.\n\n- `modified` 상태의 파일은 `staging area` 안에 들어있지 않은 추후 수정내용을 가지고 있다. 따라서 modified 내용을 추가적으로 `add` 명령어를 사용하여 `staging area`에 넣어주어야 한다.\n\n\n<br>\n\n## 파일 삭제\n\n- 셸에서 특정 파일을 삭제할 때 `rm` 명령어를 쓰면 git에서 바로 추적된다. 이 때 추적된 파일의 상태는 `deleted`이다.\n- 반면 `git rm 파일이름` 명령어를 사용할 경우에는 git에서 해당 파일의 추적내역을 삭제하는 것이므로 `commited`에서 `staged`로 옮겨가고 추적되지 않는다.\n\n<br>\n","excerpt":"버전 컨트롤 시스템인 의 기본원리와 사용법에 대해 간단히 정리하였다. 워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다. Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracke…","fields":{"slug":"/git_00/"},"frontmatter":{"date":"Jun 15, 2016","title":"Git _ 기본 이해하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## clean 명령어의 정의\n\n작업 중의 효율을 고려한 `stash` 명령어와 함께 사용할 수 있는 것이 `clean`명령어이다. 깃에서 추적되지 않는 파일만 지우는 명령어가 바로 `git clean`이라 할 수 있다.\n\n\n## 1. git clean\n\n`git clean` 과 `git stash --all`\n\n: 추적중이지 않은 파일만 지우는 것이 기본 동작인 명령어다. 워킹 디렉토리의 파일들을 모두 지우고 싶을 때 사용하거나 `merge` 또는 외부 도구가 만들어낸 파일을 지울 때, 이전 빌드 작업으로 생성된 파일을 지우는데 사용된다.\n\n- 워킹 디렉토리 내에 추적하고있지 않은 모든 파일이 지워지기 때문에 실제로 사용할 때는 `git stash --all`으로 모든 파일을 일단 `stash`한 후 디렉토리에서 지운다.\n\n<br>\n\n## 2. clean의 옵션 사용하기\n\n### `git clean -f -d`\n\n: 추적중이지 않은 모든 정보를 디렉토리에서 지워버릴 때. 하위 디렉토리까지 모두 지운다.\n<br>* `-f`는 강제의 의미를 띄고 있다.\n\n<br>\n\n### `git clean -d -n`\n\n: 명령을 실행했을 때 어떤 일이 일어날 지 미리 보고싶다면 `-n`을 사용한다. 마치 git에게 **\"가상으로 지워보고 어떤 파일이 지워질지 알려달라\"**고 말하는 것과 같다.\n\n<br>\n### `git clean -x`\n\n: 무시된 파일(.DS_Store나 .gitignore에 등록한 확장자 파일들)까지 모두 지울 때\n\n<br>\n### `clean -d -i`\n\n: clean 명령을 대화형으로 실행해 지우고 싶은 것만 지울 수도 있다.\n","excerpt":"clean 명령어의 정의 작업 중의 효율을 고려한  명령어와 함께 사용할 수 있는 것이 명령어이다. 깃에서 추적되지 않는 파일만 지우는 명령어가 바로 이라 할 수 있다. 1. git clean  과  : 추적중이지 않은 파일만 지우는 것이 기본 동작…","fields":{"slug":"/git_01/"},"frontmatter":{"date":"Jun 15, 2016","title":"Git _ 파일 삭제를 위한 clean 명령어 사용하기","tags":["Git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n협업에서 각자 작업을 하다가 협업자의 작업을 머지해야하는 상황이 생길 수 있다. 그런데 작업 중인 내용이 아직 커밋을 하기에는 어정쩡한 상태라면 어떻게 해야할까? 이럴 때 유용하게 사용되는 것이 바로 git의 `stash` 명령어다.\n\n<br>\n\n## 1. git stash\n\n: 작업 중 다른 요청으로 잠시 브랜치를 변경해야 할 경우, 커밋하지 않고 이동했다가 나중에 다시 돌아와서 작업을 하고 싶을 때 사용하는 명령어.\n\n- 사용하면 워킹 디렉토리에서 수정한 파일들만 저장한다.\n- 즉, 파일을 커밋하고 수정중인 파일이거나 커밋 전의 파일들을 잠시 보관해둘 장소가 필요할 때 stash에 쌓아 두는 것.\n\n<br>\n\n#### `stash`란?\n- Modified 상태이면서 Tracked 상태인 파일과 Staging area에 있는 파일들을 보관해두는 장소를 일컫는다.\n- Modified 상태의 파일은 커밋하지 않고 다른 브랜치로 이동하면 수정 내역이 사라진다.\n\n\n<br>\n\n## 2. 하던 일 stash하기\n\n### (1) 예제 준비\n1. [stash-practice] 파일을 생성하고 `git init` 해준다.\n2. 이어 `git add .`, `git commit -m \"Initial commit\"`으로 커밋을 생성한다.\n3. 해당 폴더 안에 stash1.txt 와 stash2.txt 파일을 각각 생성하고 내용입력 후\n4. 파일 생성한 것에 대해 커밋을 해주고 두 파일 모두를 수정한다.\n5. 수정 후 stash1.txt만 add하면 예제 준비 완료.\n\n```\n$ git status\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   index.html\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   lib/simplegit.rb\n```\n\n<br>\n\n### (2) 브랜치 변경\n\n브랜치를 변경하기 전에 `git stash` 또는 `git stash save`를 치면 **스택에 새로운 stash가 만들어지고**, 수정중이었던 파일과 staging area에 있는 파일들이 이동한다.\n\n```\niterm2\nSaved working directory and index state WIP on master: 35a31d6 stash1.txt와 stash2.txt 파일 생성\nHEAD is now at 35a31d6 stash1.txt와 stash2.txt 파일 생성\n\n$ git status - 워킹 디렉토리가 깨끗해짐.\nOn branch master\nnothing to commit, working tree clean\n```\n로그를 확인해보면 지금까지 작업중인 수정파일들이 `stash`에서 참조되고 있다는 것을 확인할 수 있다.\n\n```\n$ git log\n*   5e4291c (refs/stash) WIP on master: 35a31d6 stash1.txt와 stash2.txt 파일 생성\n|\\\n| * 818a10d index on master: 35a31d6 stash1.txt와 stash2.txt 파일 생성\n|/\n* 35a31d6 (HEAD -> master) stash1.txt와 stash2.txt 파일 생성\n```\n\n\n<br>\n\n### (3) stash 파일 확인 - `git stash list`\n\n: stash된 파일(들)을 확인하는 명령어\n\n~~~\nstash@{0}: WIP on master: 35a31d6 stash1.txt와 stash2.txt 파일 생성\n~~~\n\n<br>\n\n### (4) stash 다시 적용 - `git stash apply`\n\n: stash로 넣어놨던 파일들을 다시 워킹디렉토리에 불러오는 명령어\n\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   stash1.txt\n\tmodified:   stash2.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n해당 명령어 적용 후 `stash`를 참조하던 파일들이 다시 워킹디렉토리로 옮겨진 것을 확인할 수 있다.\n\n<br>\n\n### + `git stash apply stash@{n}`\n\n: stash된 파일들의 목록에서 부여된 번호를 위 명령어의 n에 쓰면 그 번호의 stash만 워킹디렉토리로 불러오게 할 수 있다.\n\n```\ngit stash apply stash@{0} -> 역시 위와 같은 결과를 보여준다.\n```\n\n<br>\n\n### + `git stash pop`\n\n: stash를 적용하고 나서 바로 스택에서 제거해준다.\n\n\n<br>\n\n## 3. stash는 까다롭지 않다. 단...\n\n`git stash apply --index`\n\n- **`git stash`를 적용할 때 staged였던 파일을 다시 staged 상태로 불러오지 않는다.**\n\t- `git stash apply --index` 옵션을 줘서 staged 상태까지 적용한다. 그래야 원래 상태로 되돌아올 수 있다.\n\n- 물론! 다른 브랜치로 이동해서 stash를 복원할 수도 있다.\n- 다시 `git stash apply`할 디렉토리가 깨끗할 필요도 없다.\n- 수정하고 커밋하지 않은 파일이 있어도 stash가 적용가능하다.\n- 충돌이 있다면 알려준다.\n\n<br>\n\n### stash 제거 1 - `git stash drop`\n- apply 는 단순히 stash를 적용해주는 명령어이므로 stash는 아직 스택에 남아있다.\n- `git stash drop`명령어로 해당 stash를 제거한다.\n\n```\nDropped refs/stash@{0} (f1588c7b4eb171fe448da1fe0c0d9bb73156793a)\n```\n\n<br>\n\n### stash 제거 2 - `git stash pop`\n\n- stash를 적용하고 나서 바로 스택에서 제거해준다.\n- apply와 drop을 합친 것과 같다!\n\n\n<br>\n\n## 4. stash를 만드는 새로운 방법\n\nstash를 만드는 방법은 여러가지가 있다.\n\n### (1) 이미 staging area에 들어있는 파일을 stash하지 않고 싶을 때\n\n`git stash save --keep-index`\n\n: 수정한 파일들 중 몇몇 파일만 커밋하고 나머지는 나중에 처리하고 싶을 때 사용하는 명령어\n\n```\n$ git stash save --keep-index\nSaved working directory and index state WIP on master: 35a31d6 stash1.txt와 stash2.txt 파일 생성\nHEAD is now at 35a31d6 stash1.txt와 stash2.txt 파일 생성\n<git status -s>\nM  stash1.txt\n?? .gitignore\n```\n\n<br>\n\n### (2) 추적하지 않는 파일과 추적중인 파일을 같이 stash할 때\n\n`git stash --include-untracked` or `git stash -u`\n\n- 기본적으로 stash는 추적 중인 파일(`tracked files`)만 저장한다.\n- 추적중이지 않은 파일은 stash명령어를 사용할 때 `--include-untracked` or `-u`를 붙여서 사용한다.\n\n<br>\n\n### (3) 저장할 것과 저장하지 않을 것을 고르고 싶을 때\n\n`git stash --patch`\n\n- `--patch` 옵션을 붙이면 모든 사항을 저장하지 않고 **변경 데이터 중 저장할 것을 지정**할 수 있게 해준다.\n- e : 내용을 edit할 수 있다.\n\n\n<br>\n\n## 5. stash를 이용한 브랜치 만들기\n\nstash를 저장하고 그 브랜치에서 한동안 새로운 작업을 하다가 다시 stash를 불러오면 충돌이 일어날 수도 있다. 이럴 때 stash를 쉽게 다시 테스트하는 명령어 `git stash branch`를 사용한다.\n\n- stash할 당시의 커밋을 checkout한 후 새로운 브랜치를 만들고 여기에 적용. 그 이후에는 stash를 삭제해버린다.\n\n<br>\n","excerpt":"협업에서 각자 작업을 하다가 협업자의 작업을 머지해야하는 상황이 생길 수 있다. 그런데 작업 중인 내용이 아직 커밋을 하기에는 어정쩡한 상태라면 어떻게 해야할까? 이럴 때 유용하게 사용되는 것이 바로 git의  명령어다. 1. git stash : …","fields":{"slug":"/git_02/"},"frontmatter":{"date":"Jun 15, 2016","title":"Git _ 협업을 위한 stash 명령어 사용하기","tags":["Git"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}