{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-3-장고프로젝트구성하기/","result":{"data":{"markdownRemark":{"html":"<p>장고는 파이썬으로 쉽게 웹개발에 필요한 구조와 클래스를 제공하는 프레임워크이다.(<a href=\"http://juliahwang.kr/django/2017/09/07/%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0.html\" target=\"_blank\">더 읽어보기 - 1편. 장고 프로젝트 세팅하기</a>) 이번 포스트에서는 투스쿱 도서 3장을 정리하면서 장고의 프로젝트를 구성하는 다양한 방법에 대해 소개하고자 한다.</p>\n<br>\n<h2 id=\"장고에서-제공하는-프로젝트-레이아웃\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83\" aria-label=\"장고에서 제공하는 프로젝트 레이아웃 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고에서 제공하는 프로젝트 레이아웃</h2>\n<p>장고에서 프로젝트 및 앱을 생성하는 명령어는 다음과 같다.(<del>장고가 설치되었다는 전제 하에 실행한다</del>)</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 장고가 설치된 위치에서</span>\n\n$ django<span class=\"token operator\">-</span>admin startproject <span class=\"token namespace\">[project-name]</span>\n$ cd <span class=\"token namespace\">[project-name]</span>   <span class=\"token comment\"># 생성된 프로젝트 폴더 내로 이동</span>\n$ django<span class=\"token operator\">-</span>admin startapp <span class=\"token namespace\">[app-name]</span></code></pre></div>\n<p>위의 명령어를 실행할 경우 다음과 같은 프로젝트 구조가 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ tree <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n└── bookpractice  <span class=\"token comment\"># [repository_root]</span>\n    ├── README<span class=\"token punctuation\">.</span>md\n    └── django_app  <span class=\"token comment\"># [django_project_root]  </span>\n        ├── config  <span class=\"token comment\"># [config_root]</span>\n        │   ├── __init__<span class=\"token punctuation\">.</span>py\n        │   ├── settings<span class=\"token punctuation\">.</span>py\n        │   ├── urls<span class=\"token punctuation\">.</span>py\n        │   └── wsgi<span class=\"token punctuation\">.</span>py\n        ├── flavors\n        │   ├── __init__<span class=\"token punctuation\">.</span>py\n        │   ├── admin<span class=\"token punctuation\">.</span>py\n        │   ├── apps<span class=\"token punctuation\">.</span>py\n        │   ├── migrations\n        │   │   └── __init__<span class=\"token punctuation\">.</span>py\n        │   ├── models<span class=\"token punctuation\">.</span>py\n        │   ├── tests<span class=\"token punctuation\">.</span>py\n        │   ├── urls<span class=\"token punctuation\">.</span>py\n        │   └── views<span class=\"token punctuation\">.</span>py\n        └── manage<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p>프로젝트 구조를 단순화하면 다음과 같은 루트폴더 구조가 생성되는데, 하나씩 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># [repository_root]/</span>\n  <span class=\"token comment\"># [django_project_root]/</span>\n    <span class=\"token comment\"># [configuration_root]/</span></code></pre></div>\n<br>\n<h3 id=\"최상위-레벨--저장소-루트-repository_root\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%83%81%EC%9C%84-%EB%A0%88%EB%B2%A8--%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A3%A8%ED%8A%B8-repository_root\" aria-label=\"최상위 레벨  저장소 루트 repository_root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최상위 레벨 : 저장소 루트 (repository_root)</h3>\n<p>최상위 루트 디렉토리는 프로젝트의 최상위 절대 루트이다. 해당 위치에는 다음과 같은 파일들이 위치한다.</p>\n<ul>\n<li>git 폴더 및 .gitignore</li>\n<li>requirements.txt</li>\n<li>배포용 설정파일</li>\n<li>README.md</li>\n<li>프로젝트 루트폴더 등</li>\n</ul>\n<br>\n<h3 id=\"두번째-레벨--장고-프로젝트-루트-djangoprojectroot\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%A0%88%EB%B2%A8--%EC%9E%A5%EA%B3%A0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A3%A8%ED%8A%B8-djangoprojectroot\" aria-label=\"두번째 레벨  장고 프로젝트 루트 djangoprojectroot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 레벨 : 장고 프로젝트 루트 (django<em>project</em>root)</h3>\n<p>두 번째 레벨은 장고 프로젝트에 필요한 모든 소스코드가 위치하는 디렉토리다. 프로젝트를 생성할 때 명령어를 구분해보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ django<span class=\"token operator\">-</span>admin startproject <span class=\"token namespace\">[project-name]</span> <span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 현재 위치에 바로 프로젝트 구조를 생성한다.</span>\n<span class=\"token comment\"># 즉, manage.py와 프로젝트 폴더가 현재 경로에 설치된다.</span>\n\n├── manage<span class=\"token punctuation\">.</span>py\n├── mysite\n   ├── __init__<span class=\"token punctuation\">.</span>py\n   ├── settings<span class=\"token punctuation\">.</span>py\n   ├── urls<span class=\"token punctuation\">.</span>py\n   └── wsgi<span class=\"token punctuation\">.</span>py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ django<span class=\"token operator\">-</span>admin startproject <span class=\"token namespace\">[project-name]</span>\n<span class=\"token comment\"># 현재 위치에 폴더를 생성하여 내부에 프로젝트 루트폴더 및 manage.py를 설치해준다.</span>\n\n├── mysite2\n    ├── manage<span class=\"token punctuation\">.</span>py\n    └── mysite2\n        ├── __init__<span class=\"token punctuation\">.</span>py\n        ├── settings<span class=\"token punctuation\">.</span>py\n        ├── urls<span class=\"token punctuation\">.</span>py\n        └── wsgi<span class=\"token punctuation\">.</span>py</code></pre></div>\n<br>\n<h3 id=\"세번째-레벨--설정-루트-configuration_root\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%B2%88%EC%A7%B8-%EB%A0%88%EB%B2%A8--%EC%84%A4%EC%A0%95-%EB%A3%A8%ED%8A%B8-configuration_root\" aria-label=\"세번째 레벨  설정 루트 configuration_root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세번째 레벨 : 설정 루트 (configuration_root)</h3>\n<p>프로젝트의 기본 설정 파일들이 존재하는 디렉터리다. 그리고 기본이 되는 url들이 저장되는 <code class=\"language-text\">urls.py</code>도 있다. 해당 디렉토리는 반드시 유효한 파이썬 패키지로, <code class=\"language-text\">__init__.py</code>를 포함하고 있어야 한다.\n<code class=\"language-text\">startproject</code> 명령어를 실행할 경우 자동으로 생성되는 폴더이기도 하다.</p>\n<br>\n<h2 id=\"startproject-살펴보기\" style=\"position:relative;\"><a href=\"#startproject-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"startproject 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>startproject 살펴보기</h2>\n<p>앞서 살펴보았듯이 장고의 <code class=\"language-text\">startproject</code> 명령은 기본 장고 프로젝트 템플릿을 생성하고 바로 프로젝트 개발에 필요한 구조를 만들어준다. 도서에서는 직접 구조를 빌드하는 방법 이외에 저자가 직접 개발한 <a href=\"https://github.com/pydanny/cookiecutter-django\" target=\"_blank\"><code class=\"language-text\">cookiecutter</code>라는 패키지</a>를 소개하고 있어 한번 사용해보았다.</p>\n<br>\n<h3 id=\"cookiecutter-사용해보기\" style=\"position:relative;\"><a href=\"#cookiecutter-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"cookiecutter 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cookiecutter 사용해보기</h3>\n<p>쿠키커터가 하는 일은 세 가지이다.</p>\n<ul>\n<li>여러가지 설정 스크립트를 통해 설정 변수의 내용을 물어본다.</li>\n<li>입력된 값을 기반으로 프로젝트 표준 코드 구성에 필요한 파일을 제작한다.</li>\n<li>세팅, requirements, 초기문서, 테스트 환경 등을 지정할 수 있다.</li>\n</ul>\n<p>사용방법은 매우 간단하다. <code class=\"language-text\">pip</code> 명령어로 간단히 설치하고 깃헙 주소를 클론하는 방식으로 설치하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ pip install <span class=\"token string\">\"cookiecutter>=1.4.0\"</span></code></pre></div>\n<p>설치가 완료되면 <code class=\"language-text\">cookiecutter</code>명령어를 사용하여 깃헙의 소스를 받아온다. 그리고는 프로젝트 구성에 필요한 스크립트가 자동으로 실행되어, 필요한 것만 <code class=\"language-text\">y</code>로 대답해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ cookiecutter https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>pydanny<span class=\"token operator\">/</span>cookiecutter<span class=\"token operator\">-</span>django\nproject_name <span class=\"token namespace\">[Project Name]</span>: django_app\nproject_slug <span class=\"token namespace\">[django_app]</span>: icecream\nauthor_name <span class=\"token namespace\">[Daniel Roy Greenfeld]</span>: julia\nemail <span class=\"token namespace\">[you@example.com]</span>: qufskan9396@gmail<span class=\"token punctuation\">.</span>com\ndescription <span class=\"token namespace\">[A short description of the project.]</span>: testing cookiecutter package\ndomain_name <span class=\"token namespace\">[example.com]</span>: None\nversion <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">]</span>: 0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1\ntimezone <span class=\"token namespace\">[UTC]</span>: asia<span class=\"token operator\">/</span>seoul\nuse_whitenoise <span class=\"token namespace\">[y]</span>: n\nuse_celery <span class=\"token namespace\">[n]</span>: y\nuse_mailhog <span class=\"token namespace\">[n]</span>: n\nuse_sentry_for_error_reporting <span class=\"token namespace\">[y]</span>: y\nuse_opbeat <span class=\"token namespace\">[n]</span>: n\nuse_pycharm <span class=\"token namespace\">[n]</span>: y\nwindows <span class=\"token namespace\">[n]</span>: n\nuse_docker <span class=\"token namespace\">[n]</span>: y\nuse_heroku <span class=\"token namespace\">[n]</span>: n\nuse_elasticbeanstalk_experimental <span class=\"token namespace\">[n]</span>: n\nuse_compressor <span class=\"token namespace\">[n]</span>: n\n<span class=\"token function\">Select</span> postgresql_version:\n1 <span class=\"token operator\">-</span> 9<span class=\"token punctuation\">.</span>6\n2 <span class=\"token operator\">-</span> 9<span class=\"token punctuation\">.</span>5\n3 <span class=\"token operator\">-</span> 9<span class=\"token punctuation\">.</span>4\n4 <span class=\"token operator\">-</span> 9<span class=\"token punctuation\">.</span>3\n5 <span class=\"token operator\">-</span> 9<span class=\"token punctuation\">.</span>2\nChoose <span class=\"token keyword\">from</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5 <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>: 2\n<span class=\"token function\">Select</span> js_task_runner:\n1 <span class=\"token operator\">-</span> Gulp\n2 <span class=\"token operator\">-</span> Grunt\n3 <span class=\"token operator\">-</span> None\nChoose <span class=\"token keyword\">from</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3 <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>: 3\ncustom_bootstrap_compilation <span class=\"token namespace\">[n]</span>: n\n<span class=\"token function\">Select</span> open_source_license:\n1 <span class=\"token operator\">-</span> MIT\n2 <span class=\"token operator\">-</span> BSD\n3 <span class=\"token operator\">-</span> GPLv3\n4 <span class=\"token operator\">-</span> Apache Software License 2<span class=\"token punctuation\">.</span>0\n5 <span class=\"token operator\">-</span> Not open source\nChoose <span class=\"token keyword\">from</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5 <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>: 1</code></pre></div>\n<p>위의 세팅으로 만들어진 프로젝트 구조는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ tree <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n├── CONTRIBUTORS<span class=\"token punctuation\">.</span>txt\n├── LICENSE\n├── README<span class=\"token punctuation\">.</span>rst\n├── compose\n│   ├── local\n│   │   └── django\n│   │       ├── Dockerfile\n│   │       ├── celery\n│   │       │   ├── beat\n│   │       │   │   └── <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>sh\n│   │       │   └── worker\n│   │       │       └── <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>sh\n│   │       └── <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>sh\n│   └── production\n│       ├── caddy\n│       │   ├── Caddyfile\n│       │   └── Dockerfile\n│       ├── django\n│       │   ├── Dockerfile\n│       │   ├── celery\n│       │   │   ├── beat\n│       │   │   │   └── <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>sh\n│       │   │   └── worker\n│       │   │       └── <span class=\"token function\">start</span><span class=\"token punctuation\">.</span>sh\n│       │   ├── entrypoint<span class=\"token punctuation\">.</span>sh\n│       │   └── gunicorn<span class=\"token punctuation\">.</span>sh\n│       └── postgres\n│           ├── Dockerfile\n│           ├── backup<span class=\"token punctuation\">.</span>sh\n│           ├── list<span class=\"token operator\">-</span>backups<span class=\"token punctuation\">.</span>sh\n│           └── restore<span class=\"token punctuation\">.</span>sh\n├── config\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── settings\n│   │   ├── __init__<span class=\"token punctuation\">.</span>py\n│   │   ├── base<span class=\"token punctuation\">.</span>py\n│   │   ├── local<span class=\"token punctuation\">.</span>py\n│   │   ├── production<span class=\"token punctuation\">.</span>py\n│   │   └── test<span class=\"token punctuation\">.</span>py\n│   ├── urls<span class=\"token punctuation\">.</span>py\n│   └── wsgi<span class=\"token punctuation\">.</span>py\n├── docs\n│   ├── Makefile\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── conf<span class=\"token punctuation\">.</span>py\n│   ├── deploy<span class=\"token punctuation\">.</span>rst\n│   ├── docker_ec2<span class=\"token punctuation\">.</span>rst\n│   ├── index<span class=\"token punctuation\">.</span>rst\n│   ├── install<span class=\"token punctuation\">.</span>rst\n│   ├── make<span class=\"token punctuation\">.</span>bat\n│   └── pycharm\n│       ├── configuration<span class=\"token punctuation\">.</span>rst\n│       └── images\n│           ├── 1<span class=\"token punctuation\">.</span>png\n<span class=\"token punctuation\">|</span>           ├── <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>생략 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n│           └── issue2<span class=\"token punctuation\">.</span>png\n├── env<span class=\"token punctuation\">.</span>example\n├── icecream\n│   ├── __init__<span class=\"token punctuation\">.</span>py\n│   ├── contrib\n│   │   ├── __init__<span class=\"token punctuation\">.</span>py\n│   │   └── sites\n│   │       ├── __init__<span class=\"token punctuation\">.</span>py\n│   │       └── migrations\n│   │           ├── 0001_initial<span class=\"token punctuation\">.</span>py\n│   │           ├── 0002_alter_domain_unique<span class=\"token punctuation\">.</span>py\n│   │           ├── 0003_set_site_domain_and_name<span class=\"token punctuation\">.</span>py\n│   │           └── __init__<span class=\"token punctuation\">.</span>py\n│   ├── static\n│   │   ├── css\n│   │   │   └── project<span class=\"token punctuation\">.</span>css\n│   │   ├── fonts\n│   │   ├── images\n│   │   │   └── favicon<span class=\"token punctuation\">.</span>ico\n│   │   ├── js\n│   │   │   └── project<span class=\"token punctuation\">.</span>js\n│   │   └── sass\n│   │       ├── custom_bootstrap_vars<span class=\"token punctuation\">.</span>scss\n│   │       └── project<span class=\"token punctuation\">.</span>scss\n│   ├── taskapp\n│   │   ├── __init__<span class=\"token punctuation\">.</span>py\n│   │   └── celery<span class=\"token punctuation\">.</span>py\n│   ├── templates\n│   │   ├── 403_csrf<span class=\"token punctuation\">.</span>html\n│   │   ├── 404<span class=\"token punctuation\">.</span>html\n│   │   ├── 500<span class=\"token punctuation\">.</span>html\n│   │   ├── account\n│   │   │   ├── account_inactive<span class=\"token punctuation\">.</span>html\n│   │   │   ├── base<span class=\"token punctuation\">.</span>html\n│   │   │   ├── email<span class=\"token punctuation\">.</span>html\n│   │   │   ├── email_confirm<span class=\"token punctuation\">.</span>html\n│   │   │   ├── login<span class=\"token punctuation\">.</span>html\n│   │   │   ├── logout<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_change<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_reset<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_reset_done<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_reset_from_key<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_reset_from_key_done<span class=\"token punctuation\">.</span>html\n│   │   │   ├── password_set<span class=\"token punctuation\">.</span>html\n│   │   │   ├── signup<span class=\"token punctuation\">.</span>html\n│   │   │   ├── signup_closed<span class=\"token punctuation\">.</span>html\n│   │   │   ├── verification_sent<span class=\"token punctuation\">.</span>html\n│   │   │   └── verified_email_required<span class=\"token punctuation\">.</span>html\n│   │   ├── base<span class=\"token punctuation\">.</span>html\n│   │   ├── bootstrap4\n│   │   │   ├── field<span class=\"token punctuation\">.</span>html\n│   │   │   └── layout\n│   │   │       └── field_errors_block<span class=\"token punctuation\">.</span>html\n│   │   ├── pages\n│   │   │   ├── about<span class=\"token punctuation\">.</span>html\n│   │   │   └── home<span class=\"token punctuation\">.</span>html\n│   │   └── users\n│   │       ├── user_detail<span class=\"token punctuation\">.</span>html\n│   │       ├── user_form<span class=\"token punctuation\">.</span>html\n│   │       └── user_list<span class=\"token punctuation\">.</span>html\n│   └── users\n│       ├── __init__<span class=\"token punctuation\">.</span>py\n│       ├── adapters<span class=\"token punctuation\">.</span>py\n│       ├── admin<span class=\"token punctuation\">.</span>py\n│       ├── apps<span class=\"token punctuation\">.</span>py\n│       ├── migrations\n│       │   ├── 0001_initial<span class=\"token punctuation\">.</span>py\n│       │   └── __init__<span class=\"token punctuation\">.</span>py\n│       ├── models<span class=\"token punctuation\">.</span>py\n│       ├── tests\n│       │   ├── __init__<span class=\"token punctuation\">.</span>py\n│       │   ├── factories<span class=\"token punctuation\">.</span>py\n│       │   ├── test_admin<span class=\"token punctuation\">.</span>py\n│       │   ├── test_models<span class=\"token punctuation\">.</span>py\n│       │   ├── test_urls<span class=\"token punctuation\">.</span>py\n│       │   └── test_views<span class=\"token punctuation\">.</span>py\n│       ├── urls<span class=\"token punctuation\">.</span>py\n│       └── views<span class=\"token punctuation\">.</span>py\n├── local<span class=\"token punctuation\">.</span>yml\n├── manage<span class=\"token punctuation\">.</span>py\n├── production<span class=\"token punctuation\">.</span>yml\n├── pytest<span class=\"token punctuation\">.</span>ini\n├── requirements\n│   ├── base<span class=\"token punctuation\">.</span>txt\n│   ├── local<span class=\"token punctuation\">.</span>txt\n│   ├── production<span class=\"token punctuation\">.</span>txt\n│   └── test<span class=\"token punctuation\">.</span>txt\n├── setup<span class=\"token punctuation\">.</span>cfg\n└── utility\n    ├── install_os_dependencies<span class=\"token punctuation\">.</span>sh\n    ├── install_python_dependencies<span class=\"token punctuation\">.</span>sh\n    ├── requirements<span class=\"token operator\">-</span>jessie<span class=\"token punctuation\">.</span>apt\n    ├── requirements<span class=\"token operator\">-</span>trusty<span class=\"token punctuation\">.</span>apt\n    └── requirements<span class=\"token operator\">-</span>xenial<span class=\"token punctuation\">.</span>apt</code></pre></div>\n<p>사용해본 경험 상으로는 너무 많은 것이 만들어진 느낌이었다. 도서에서는 <code class=\"language-text\">cookiecutter-django</code>가 <strong>원래 장고에서 제공하는 기본 구성보다 더 많은 것을 제공하기 위해 만들어진 패키지</strong>라고 소개되어 있다.</p>\n<p>필요한 것이 많지 않은 프로젝트를 시작할 경우에는 장고가 제공하는 기본 프로젝트 구조에서 시작하여 빌드해나가는 것이 낫겠다는 생각이 들었다.</p>\n<p>대안 템플릿으로는 <code class=\"language-text\">django-kevin</code>이라는 패키지 또한 소개하고 있었는데, 해당 패키지의 제작자인 케빈 쉬는 도서의 저자가 개발한 <code class=\"language-text\">Two Scoops project</code>를 포크하여 장고 <code class=\"language-text\">1.8</code> 버전에 맞게 업데이트 했다고 한다. 이 패키지는 <code class=\"language-text\">npm</code>과 <code class=\"language-text\">grunt</code>를 사용하여 쿠키커터 패키지보다 좀더 설치과정이 길었다. 직접 사용하려면 <a href=\"https://github.com/imkevinxu/django-kevin\" target=\"_blank\">링크</a>를 클릭하여 진행하면 된다.</p>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 소개한 장고 프로젝트 빌드 패키지 링크는 다음과 같다.</p>\n<ul>\n<li><a href=\"https://github.com/twoscoops/django-twoscoops-project\" target=\"_blank\">django-twoscoops-project</a></li>\n<li><a href=\"https://github.com/pydanny/cookiecutter-django\" target=\"_blank\">cookiecutter-django</a></li>\n<li><a href=\"https://github.com/imkevinxu/django-kevin\" target=\"_blank\">django-kevin</a></li>\n</ul>\n<p>패키지를 사용하는 것에는 장단점이 있다. 손쉽게 프로젝트 구조를 생성하여 프로젝트 개발에만 집중할 수 있다는 점이 장점이라면, 제공하는 스크립트가 한정되어 있어 필요한 것을 추가해야한다거나 직접 빌드해볼 수 있는 연습을 충분히 하지 못할 수 있다는 단점도 존재한다.</p>\n<p>장고의 초심자들은 먼저 장고에서 제공하는 파일 구조를 익힌 다음 패키지를 사용해보는 것도 좋겠다.</p>\n<br>","excerpt":"장고는 파이썬으로 쉽게 웹개발에 필요한 구조와 클래스를 제공하는 프레임워크이다.(더 읽어보기 - 1편. 장고 프로젝트 세팅하기) 이번 포스트에서는 투스쿱 도서 3장을 정리하면서 장고의 프로젝트를 구성하는 다양한 방법에 대해 소개하고자 한다. 장고에서…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83\">장고에서 제공하는 프로젝트 레이아웃</a></p>\n<ul>\n<li><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#%EC%B5%9C%EC%83%81%EC%9C%84-%EB%A0%88%EB%B2%A8--%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A3%A8%ED%8A%B8-repository_root\">최상위 레벨 : 저장소 루트 (repository_root)</a></li>\n<li><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%A0%88%EB%B2%A8--%EC%9E%A5%EA%B3%A0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A3%A8%ED%8A%B8-djangoprojectroot\">두번째 레벨 : 장고 프로젝트 루트 (django<em>project</em>root)</a></li>\n<li><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#%EC%84%B8%EB%B2%88%EC%A7%B8-%EB%A0%88%EB%B2%A8--%EC%84%A4%EC%A0%95-%EB%A3%A8%ED%8A%B8-configuration_root\">세번째 레벨 : 설정 루트 (configuration_root)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#startproject-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">startproject 살펴보기</a></p>\n<ul>\n<li><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#cookiecutter-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">cookiecutter 사용해보기</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-3-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>","fields":{"slug":"/2scoops-3-장고프로젝트구성하기/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _ 3장. 장고 프로젝트 구성하기","date":"Sep 19, 2017","tags":["book review","Django"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-3-장고프로젝트구성하기/","series":[],"lastmod":"2017-09-19"}},"staticQueryHashes":["2027115977","694178885"]}