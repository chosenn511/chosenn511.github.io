{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-6-modeling_03/","result":{"data":{"markdownRemark":{"html":"<p>이번 포스트에서는 모델의 <code class=\"language-text\">_meta</code> API와 모델 매니저, 헬퍼 함수 등의 모델 인터페이스들에 대해 알아보고자 한다. 기본적인 모델에 대한 설명은 <a href=\"https://docs.djangoproject.com/en/1.11/topics/db/models/\" target=\"_blank\">장고 문서</a>를 참고하기 바란다.</p>\n<br>\n<h2 id=\"1-모델의-_meta-api\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%8D%B8%EC%9D%98-_meta-api\" aria-label=\"1 모델의 _meta api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 모델의 _meta API</h2>\n<p>장고 1.8이 되기 전까지 <code class=\"language-text\">_meta</code> API는 공식적이지 않았다. 원래의 목적은 모델, 즉 테이블에 대한 부가적인 정보를 장고 내부적으로 이용하기 위해서였다. 예를 들어 다음과 같은 일을 쉽게 처리할 수 있다.</p>\n<ul>\n<li>모델 내 필드 정보를 가져올 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 모델의 필드 리스트를 가져오는 경우</span>\n>>> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models import User\n>>> User<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_fields<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>&lt;ManyToOneRel: admin<span class=\"token punctuation\">.</span>logentry><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>AutoField: id><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>CharField: password><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>CharField: username><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>EmailField: email><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>DateTimeField: date_joined><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>related<span class=\"token punctuation\">.</span>ManyToManyField: groups><span class=\"token punctuation\">,</span>\n &lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>related<span class=\"token punctuation\">.</span>ManyToManyField: user_permissions><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 모델의 특정 필드를 가져올 경우</span>\n>>> User<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span>\n&lt;django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>CharField: username></code></pre></div>\n<br>\n<ul>\n<li>\n<p>모델 내 특정 필드의 클래스를 가져올 경우</p>\n<ul>\n<li>특히 상속 관계를 가져올 때 유용하다.</li>\n</ul>\n</li>\n<li>장고 모델이 잘 생성되고 구조화되었는지 검사할 경우</li>\n<li>외부 라이브러리를 사용해서 모델을 커스터마이징할 경우</li>\n<li>모델 내의 데이터를 조정하거나 변경할 수 있는 일종의 관리도구를 제작할 경우</li>\n<li>시각화 혹운 분석의 목적으로 모델의 필드에 대한 분석이 필요할 경우</li>\n</ul>\n<br>\n<h2 id=\"2-모델-매니저\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A8%EB%8D%B8-%EB%A7%A4%EB%8B%88%EC%A0%80\" aria-label=\"2 모델 매니저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 모델 매니저</h2>\n<p>장고의 <code class=\"language-text\">모델 매니저</code>(Model Manager)는 <strong>장고의 ORM에서 데이터베이스와 연동하는 인터페이스</strong>이다. 원하는 모델 클래스를 제어하기 위해 모델 클래스(테이블 내 모든 데이터)의 모든 인스턴스에 작동이 가능하다. 또, 장고는 기본적으로 모델을 생성할 때마다 기본 모델 매니저를 제공하며, 우리가 원하는 목적에 맞는 모델 매니저를 생성할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n\n\n<span class=\"token comment\"># 생성해준 커스텀 모델 매니저.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PublishedManager</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user_for_related_fields <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">published</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pub_date__lte<span class=\"token operator\">=</span>timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorReview</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    review <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 커스텀으로 만든 모델 매니저를 추가</span>\n    objects <span class=\"token operator\">=</span> PublishedManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만들어준 모델 매니저를 사용하려면 다음과 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ FlavorReview<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token keyword\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n35\n$ FlavorReview<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>published<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n31</code></pre></div>\n<br>\n<p>기존 모델 매니저를 변형해서 커스텀 모델 매니저를 만들게 되면 다음과 같은 문제가 발생할 수 있다.</p>\n<ul>\n<li>모델을 상속받았을 때 추상화 기초 클래스의 자식 모델 클래스들은 부모 모델의 모델 매니저를 받지만 접합기반 클래스들의 자식 모델 클래스들은 그렇지 못하다.</li>\n<li>모델 클래스에 적용되는 기본적인 모델 클래스는 장고가 기본으로 제공하는 것으로, 이를 바꾸어서 생기는 문제는 파이썬의 일반적인 패턴을 무시하는 것과 같다.</li>\n</ul>\n<p>만약 기존 모델 매니저와 커스텀 모델 매니저를 함께 사용하고 싶은 경우 모델 클래스 내에 다음 구문은 반드시 상위에 배치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">objects <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"3-거대-모델-이해하기\" style=\"position:relative;\"><a href=\"#3-%EA%B1%B0%EB%8C%80-%EB%AA%A8%EB%8D%B8-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"3 거대 모델 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 거대 모델 이해하기</h2>\n<p><code class=\"language-text\">거대 모델</code>(Fat Model)이란 <strong>데이터 관련 코드를 뷰나 템플릿보다는 모델 메서드, 클래스 메서드, 프로퍼티, 매니저 메서드 등에 넣어 캡슐화(Encapsulation) 하는 것</strong>이다.</p>\n<p>위의 방식은 프로젝트 전체를 통틀어 코드 재사용을 개선할 수 있는 최고의 방법이다. 뷰나 템플릿에 로직을 배치하는 것보다 모델에 배치하려는 '리펙토링'이 이루어져오기도 했다.</p>\n<p>하지만 모든 로직을 모델에 넣고 어플리케이션을 서빙하다보면 시간이 지남에 따라 거대 모델이 생겨나게 되며, 이는 반대로 테스트와 유지 보수를 어렵게 할 수 있다.</p>\n<p>이를 막기 위해서는 모델 간 공통으로 사용할 수 있는 메서드나 프로퍼티를 그대로 유지한 채 로직만 <code class=\"language-text\">모델 행동</code>(<code class=\"language-text\">믹스인</code>, Mixin)으로 분리하여 관리하거나 <code class=\"language-text\">상태없는 헬퍼 함수</code>(Stateless Helper Function) 등으로 이전할 수 있다.</p>\n<br>\n<h3 id=\"1-모델-행동-믹스인-mixin\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%8D%B8-%ED%96%89%EB%8F%99-%EB%AF%B9%EC%8A%A4%EC%9D%B8-mixin\" aria-label=\"1 모델 행동 믹스인 mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 모델 행동 (믹스인, MixIn)</h3>\n<p>모델 행동은 캡슐화와 구성화의 개념으로 이루어져 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 기존 정의를 따른 모델 클래스</span>\n<span class=\"token comment\"># blog.py</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    body <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SlugField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> related_name<span class=\"token operator\">=</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n    create_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    modified_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    publish_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 클래스는 다음과 같이 줄이고 다른 모델 클래스와 공유하는 필드를 모델행동에서 불러와서 재사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>behaviors <span class=\"token keyword\">import</span> Authorable<span class=\"token punctuation\">,</span> Permalinkable<span class=\"token punctuation\">,</span> Timestampable<span class=\"token punctuation\">,</span> Publishable\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span><span class=\"token punctuation\">(</span>Authorable<span class=\"token punctuation\">,</span> Permalinkable<span class=\"token punctuation\">,</span> Timestampable<span class=\"token punctuation\">,</span> Publishable<span class=\"token punctuation\">,</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    body <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>다음은 재사용가능한 필드를 정의한 모델 클래스들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># behaviors.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Authorable</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Permalinkable</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SlugField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Publishable</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    publish_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timestampable</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    modified_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<br>\n<h3 id=\"2-상태없는-헬퍼-함수\" style=\"position:relative;\"><a href=\"#2-%EC%83%81%ED%83%9C%EC%97%86%EB%8A%94-%ED%97%AC%ED%8D%BC-%ED%95%A8%EC%88%98\" aria-label=\"2 상태없는 헬퍼 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 상태없는 헬퍼 함수</h3>\n<p>모델로부터 로직을 떼어내서 유틸리티 함수로 관리할 수도 있다. 대표적으로 커스텀 필드나 커스텀 퍼미션을 정의할 경우 <code class=\"language-text\">utils</code> 폴더에 생성하고 모델에서 임포트하여 사용한다.</p>\n<br>\n<hr>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"http://blog.kevinastone.com/django-model-behaviors.html\" target=\"_blank\">장고 모델 행동 - 케빈 스톤(Kevin Stone)의 블로그</a></p>","excerpt":"이번 포스트에서는 모델의  API와 모델 매니저, 헬퍼 함수 등의 모델 인터페이스들에 대해 알아보고자 한다. 기본적인 모델에 대한 설명은 장고 문서를 참고하기 바란다. 1. 모델의 _meta API 장고 1.8이 되기 전까지  API는 공식적이지 않…","tableOfContents":"<ul>\n<li><a href=\"/2scoops-6-modeling_03/#1-%EB%AA%A8%EB%8D%B8%EC%9D%98-_meta-api\">1. 모델의 _meta API</a></li>\n<li><a href=\"/2scoops-6-modeling_03/#2-%EB%AA%A8%EB%8D%B8-%EB%A7%A4%EB%8B%88%EC%A0%80\">2. 모델 매니저</a></li>\n<li>\n<p><a href=\"/2scoops-6-modeling_03/#3-%EA%B1%B0%EB%8C%80-%EB%AA%A8%EB%8D%B8-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">3. 거대 모델 이해하기</a></p>\n<ul>\n<li><a href=\"/2scoops-6-modeling_03/#1-%EB%AA%A8%EB%8D%B8-%ED%96%89%EB%8F%99-%EB%AF%B9%EC%8A%A4%EC%9D%B8-mixin\">(1) 모델 행동 (믹스인, MixIn)</a></li>\n<li><a href=\"/2scoops-6-modeling_03/#2-%EC%83%81%ED%83%9C%EC%97%86%EB%8A%94-%ED%97%AC%ED%8D%BC-%ED%95%A8%EC%88%98\">(2) 상태없는 헬퍼 함수</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-6-modeling_03/#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>","fields":{"slug":"/2scoops-6-modeling_03/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _  6장. 장고에서 모델 이용하기 <3부>","date":"Oct 17, 2017","tags":["book review","Django"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-6-modeling_03/","series":[{"slug":"/2scoops-6-modeling_01/","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <1부>","num":1},{"slug":"/2scoops-6-modeling_02/","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <2부>","num":2},{"slug":"/2scoops-6-modeling_03/","title":"BookReview > Two Scoops of Django _  6장. 장고에서 모델 이용하기 <3부>","num":3}],"lastmod":"2017-10-17"}},"staticQueryHashes":["2027115977","694178885"]}