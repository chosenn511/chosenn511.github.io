{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_04/","result":{"data":{"markdownRemark":{"html":"<p>문제 4번은 재귀 함수를 구현할 때 가장 빈번하게 등장하는 <code class=\"language-text\">피보나치 수열</code>을 구현하는 문제다. 피보나치를 간단하게 설명하자면 다음과 같다. <strong>0과 1로 시작하며(<del>시작값은 달라질 수 있다</del>)  다음 피보나치 수는 바로 앞의 두 피보나치 수의 합이 된다.</strong> 이러한 규칙을 가지고 사용자가 입력한 값 <code class=\"language-text\">n</code>으로 <code class=\"language-text\">n번 째까지의 피보나치 수열</code> 출력하면 된다. 해당 문제도 각각 <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">recursive</code> 방식으로 풀어보았다.</p>\n<br>\n<h2 id=\"문제-4-피보나치-수열-출력\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-4-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4-%EC%B6%9C%EB%A0%A5\" aria-label=\"문제 4 피보나치 수열 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 4) 피보나치 수열 출력</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 4. Fibonacci 수열 출력\n N번째 Fibonacci 수열 값을 출력하는 프로그램을 재귀함수로 구현\n\n1. Input the number : 5\n    1 1 2 3 5\n2. Input the number : 7\n    1 1 2 3 5 8 13\n3. Input the number : 30\n    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040</code></pre></div>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<p>각각의 방식으로 풀기 전에 <code class=\"language-text\">while</code>문을 사용한 함수는 계산한 값들을 저장한 뒤 한번에 출력하도록, <code class=\"language-text\">for</code>문을 사용한 함수는 계산하면서 하나씩 값을 출력하도록 제약조건을 정하고 풀었다.</p>\n<br>\n<h3 id=\"1-while\" style=\"position:relative;\"><a href=\"#1-while\" aria-label=\"1 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) while</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while문 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fibo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n        fibo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> fibo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###</span>\nfibo_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number : 10</span>\n<span class=\"token comment\"># '1 1 2 3 5 8 13 21 34 55'</span></code></pre></div>\n<p>값을 하나씩 저장하기 위해 파이썬의 <code class=\"language-text\">list</code> 자료형을 사용하였다. 먼저 첫번째 값과 두번째 값을 저장한 <code class=\"language-text\">fibo</code> 리스트를 선언해준 뒤 <code class=\"language-text\">while</code>문 안에서 리스트의 내장함수인 <code class=\"language-text\">insert()</code>를 사용하여 원하는 인덱스 위치에 이전 수의 합을 더하여 넣어주었다. 그리고 <code class=\"language-text\">i</code> 값을 1씩 증가시켰다.</p>\n<p>출력할 때는 리스트 내에 저장된 값들을 <code class=\"language-text\">join()</code> 메서드를 사용하여 한 줄로 출력되도록 해주었다.</p>\n<br>\n<h3 id=\"2-for\" style=\"position:relative;\"><a href=\"#2-for\" aria-label=\"2 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) for</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fibo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fibo<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###</span>\nfibo_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number : 10</span>\n<span class=\"token comment\"># 1</span>\n<span class=\"token comment\"># 1</span>\n<span class=\"token comment\"># 2</span>\n<span class=\"token comment\"># 3</span>\n<span class=\"token comment\"># 5</span>\n<span class=\"token comment\"># 8</span>\n<span class=\"token comment\"># 13</span>\n<span class=\"token comment\"># 21</span>\n<span class=\"token comment\"># 34</span>\n<span class=\"token comment\"># 55</span></code></pre></div>\n<p><code class=\"language-text\">for</code>문 역시 처음 두 수를 저장한 <code class=\"language-text\">fibo</code> 리스트를 선언해주었지만 반복문을 돌면서 바로 값을 출력을 하기 위해  for문 안에서 <code class=\"language-text\">print()</code>를 사용하였다.</p>\n<br>\n<h3 id=\"3-recursive-function\" style=\"position:relative;\"><a href=\"#3-recursive-function\" aria-label=\"3 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) recursive function</h3>\n<p>피보나치 수열의 점화식은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">f(n) = f(n - 1) + f(n - 2)</code></pre></div>\n<p>피보나치 수열에서 탈출조건은 2개이다. 해당 문제에서는 초기에 주어진 2개의 수가 <code class=\"language-text\">1, 1</code> 이므로 <code class=\"language-text\">n</code>이 <code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>일 때 <code class=\"language-text\">1</code>을 리턴하도록 하였다. 그러면 다음의 식을 만족한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">f(2) = f(1) + f(0)\n# 2</code></pre></div>\n<br>\n<p>또한 위의 식을 이용할 경우 재귀식이 2개 사용되어 각각의 합이 다음 값을 결정하는 것을 알 수 있다. 따라서 출력을 하려면 앞서 사용했던 방식으로는 무리가 있다. 해당 문제에서는 출력하는 방식을 제외하고 코드를 작성해보았다. <del>출력하는 방법에 대해서는 추가로 포스팅할 예정이다.</del></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 재귀 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fibo_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        r <span class=\"token operator\">=</span> fibo_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># TODO 출력!</span>\n        <span class=\"token keyword\">return</span> r\n\n    <span class=\"token keyword\">return</span> fibo_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"실행시간-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행시간 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># (1) while</span>\nfibo_while  <span class=\"token comment\"># 6.969785317778587e-07</span>\n\n<span class=\"token comment\"># (2) for</span>\nfibo_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5.289912223815918e-07</span>\n\n<span class=\"token comment\"># (3) recursive</span>\nrecursive04<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7.719499990344048e-07</span></code></pre></div>\n<br>","excerpt":"문제 4번은 재귀 함수를 구현할 때 가장 빈번하게 등장하는 을 구현하는 문제다. 피보나치를 간단하게 설명하자면 다음과 같다. 0과 1로 시작하며(시작값은 달라질 수 있다)  다음 피보나치 수는 바로 앞의 두 피보나치 수의 합이 된다. 이러한 규칙을 …","tableOfContents":"<ul>\n<li><a href=\"/recursion_04/#%EB%AC%B8%EC%A0%9C-4-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4-%EC%B6%9C%EB%A0%A5\">문제 4) 피보나치 수열 출력</a></li>\n<li>\n<p><a href=\"/recursion_04/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_04/#1-while\">(1) while</a></li>\n<li><a href=\"/recursion_04/#2-for\">(2) for</a></li>\n<li><a href=\"/recursion_04/#3-recursive-function\">(3) recursive function</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_04/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행시간 측정해보기</a></li>\n</ul>","fields":{"slug":"/recursion_04/"},"frontmatter":{"title":"Python _ Recursion4. 피보나치 수열 출력","date":"Sep 18, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_04/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-18"}},"staticQueryHashes":["2027115977","694178885"]}