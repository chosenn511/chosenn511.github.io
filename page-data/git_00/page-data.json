{"componentChunkName":"component---src-templates-post-tsx","path":"/git_00/","result":{"data":{"markdownRemark":{"html":"<p>버전 컨트롤 시스템인 <code class=\"language-text\">git</code>의 기본원리와 사용법에 대해 간단히 정리하였다.</p>\n<br>\n<blockquote>\n<p>워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다. Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracked 파일은 또 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나이다. 그리고 나머지 파일은 모두 Untracked 파일이다. Untracked 파일은 워킹 디렉토리에 있는 파일 중 스냅샷에도 Staging Area에도 포함되지 않은 파일이다. 처음 저장소를 Clone 하면 모든 파일은 Tracked이면서 Unmodified 상태이다. 파일을 Checkout 하고 나서 아무것도 수정하지 않았기 때문에 그렇다.\n<br></p>\n</blockquote>\n<p><img src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"img\"></p>\n<p><strong>(1) Committed</strong></p>\n<ul>\n<li>데이터가 로컬 데이터베이스에 안전하게 저장된 상태</li>\n</ul>\n<br>\n<p><strong>(2) Tracked</strong></p>\n<ul>\n<li>git 로컬 저장소에 add된 상태</li>\n</ul>\n<br>\n<p><strong>(3) Untracked</strong></p>\n<ul>\n<li>파일을 생성하여 작업한 후 git의 로컬저장소에 <code class=\"language-text\">add</code>하지 않은 상태</li>\n</ul>\n<br>\n<p><strong>(4) Modified</strong></p>\n<ul>\n<li>수정한 파일을 로컬저장소에 아직 커밋하지 않은 상태</li>\n</ul>\n<br>\n<p><strong>(5) Staged</strong></p>\n<ul>\n<li>현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태</li>\n<li><code class=\"language-text\">Staging area</code>는 <code class=\"language-text\">.git</code> 디렉토리에 있다. 곧 커밋할 파일에 대한 정보를 저장하는 곳이다.</li>\n</ul>\n<br>\n<p><strong>(6) Git Directory</strong></p>\n<ul>\n<li>메타데이터와 객체 디비(파일)을 저장하는 곳</li>\n<li>다른 컴퓨터에 있는 저장소를 clone하면 깃 디렉토리가 만들어진다.</li>\n</ul>\n<br>\n<h2 id=\"git-설치\" style=\"position:relative;\"><a href=\"#git-%EC%84%A4%EC%B9%98\" aria-label=\"git 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 설치</h2>\n<p>다음 명령어로 git 설치를 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># brew로 설치</span>\n$ brew install git\n$ brew search git\n\n<span class=\"token comment\"># git 최초설정 진행</span>\n$ git config —global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"이름\"</span>\n$ git config —global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"이메일\"</span>\n$ git config —global core<span class=\"token punctuation\">.</span>editor vim\n\n<span class=\"token comment\"># 설정 확인</span>\n$ git config —list\n\n<span class=\"token comment\"># 깃에서 사용할 수 있는 명령어 소개</span>\n$ git help\n\n<span class=\"token comment\"># 특정 명령어에 대한 도움말</span>\n$ git help <span class=\"token string\">\"명령어 이름\"</span>\n\n<span class=\"token comment\"># 깃 버전 확인</span>\n$ git <span class=\"token operator\">--</span>version</code></pre></div>\n<br>\n<h2 id=\"버전관리법\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EB%B2%95\" aria-label=\"버전관리법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버전관리법</h2>\n<ul>\n<li>폴더로 만들고 <code class=\"language-text\">git init</code> 입력</li>\n<li><code class=\"language-text\">touch README.md</code></li>\n<li><code class=\"language-text\">md README.md</code>를 써서 마크다운으로 입력 가능</li>\n<li><code class=\"language-text\">git add README.md</code></li>\n<li><code class=\"language-text\">git commit</code></li>\n<li>커밋 메세지 입력 (<strong>입력하지 않으면 commit되지 않는다</strong>)</li>\n<li><code class=\"language-text\">git log</code> 명령어를 통해서는 <code class=\"language-text\">commit 내역</code>을 확인할 수 있다.</li>\n<li><code class=\"language-text\">git log</code> 명령어에  <code class=\"language-text\">-p</code> 옵션을 추가할 경우 로그를 한번에 확인할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"파일-생성에서-커밋까지\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%EC%97%90%EC%84%9C-%EC%BB%A4%EB%B0%8B%EA%B9%8C%EC%A7%80\" aria-label=\"파일 생성에서 커밋까지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 생성에서 커밋까지</h2>\n<ul>\n<li>파일 생성은 <code class=\"language-text\">vi</code> 명령어나 <code class=\"language-text\">touch</code> 명령어를 통해 진행할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ vi text<span class=\"token punctuation\">.</span>txt\n$ touch text<span class=\"token punctuation\">.</span>md</code></pre></div>\n<ul>\n<li>에디터를 열지 않고도 바로 내용이 있는 파일을 생성할 수 있다. <code class=\"language-text\">echo &quot;기록할 내용&quot; &gt; &quot;파일명&quot;</code> 명령어를 사용할 경우 파일을 에디터 등으로 열지 않고 기록할 내용을 파일 내에 저장해준다. <strong>단, 꺽쇠(<code class=\"language-text\">&gt;</code>)를 1개 쓰면 이미 있던 내용이 날아가고 새로운 내용으로 덮어쓰므로 있던 내용에 붙여넣기를 할 때는 <code class=\"language-text\">&gt;&gt;</code>를 쓴다.</strong></li>\n<li><code class=\"language-text\">cat 파일명.확장자</code>는 파일의 내용을 셸에서 바로 출력, 확인할 수 있게 해주는 명령어이다.</li>\n<li><code class=\"language-text\">git status</code> 명령어를 통해 <code class=\"language-text\">untracked file</code>가 생성된 것을 확인할 수 있다.</li>\n<li><code class=\"language-text\">git commit</code> : vim 에디터 모드에서 commit 상태를 확인할 수 있으며, 최상단에 커밋 메세지를 입력할 수 있다. <strong>입력하지 않으면 커밋되지 않는다.</strong></li>\n<li><code class=\"language-text\">git commit -m &quot;커밋메세지&quot;</code> 명령어를 통해 커밋메세지를 한번에 입력할 수 있다.</li>\n<li><code class=\"language-text\">git add --all</code>는 모든 파일을 <code class=\"language-text\">staging area</code>에 추가하는 명령어이다.</li>\n<li><code class=\"language-text\">git reset HEAD abc2.txt</code> 명령어는 <code class=\"language-text\">add</code>한 파일을 다시 <code class=\"language-text\">untracked file</code>로 돌릴 때 사용한다.</li>\n</ul>\n<br>\n<h2 id=\"파일-생성-후-수정저장\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1-%ED%9B%84-%EC%88%98%EC%A0%95%EC%A0%80%EC%9E%A5\" aria-label=\"파일 생성 후 수정저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 생성 후 수정/저장</h2>\n<ul>\n<li>파일을 만들고 나중에 수정사항이 생겼을 때 만든 파일은 staged 상태이며 추가적으로 수정된 내용은 <code class=\"language-text\">modified</code> 상태로 저장된다.</li>\n<li><code class=\"language-text\">git diff</code>는 <code class=\"language-text\">staged</code>된 내용과 <code class=\"language-text\">modified</code>된 내용의 차이를 보여준다. 즉, 수정했지만 아직 staged되지 않은(<code class=\"language-text\">==modified</code>) 상태의 파일을 비교할 수 있다. 이 때 <code class=\"language-text\">git diff --staged</code> 또는 <code class=\"language-text\">git diff --cached</code>는 <code class=\"language-text\">staged</code>된 내용과 <code class=\"language-text\">commit</code>된 내용의 차이를 보여준다.</li>\n<li><code class=\"language-text\">modified</code> 상태의 파일은 <code class=\"language-text\">staging area</code> 안에 들어있지 않은 추후 수정내용을 가지고 있다. 따라서 modified 내용을 추가적으로 <code class=\"language-text\">add</code> 명령어를 사용하여 <code class=\"language-text\">staging area</code>에 넣어주어야 한다.</li>\n</ul>\n<br>\n<h2 id=\"파일-삭제\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%82%AD%EC%A0%9C\" aria-label=\"파일 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 삭제</h2>\n<ul>\n<li>셸에서 특정 파일을 삭제할 때 <code class=\"language-text\">rm</code> 명령어를 쓰면 git에서 바로 추적된다. 이 때 추적된 파일의 상태는 <code class=\"language-text\">deleted</code>이다.</li>\n<li>반면 <code class=\"language-text\">git rm 파일이름</code> 명령어를 사용할 경우에는 git에서 해당 파일의 추적내역을 삭제하는 것이므로 <code class=\"language-text\">commited</code>에서 <code class=\"language-text\">staged</code>로 옮겨가고 추적되지 않는다.</li>\n</ul>\n<br>","excerpt":"버전 컨트롤 시스템인 의 기본원리와 사용법에 대해 간단히 정리하였다. 워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다. Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracke…","tableOfContents":"<ul>\n<li><a href=\"/git_00/#git-%EC%84%A4%EC%B9%98\">Git 설치</a></li>\n<li><a href=\"/git_00/#%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EB%B2%95\">버전관리법</a></li>\n<li><a href=\"/git_00/#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%EC%97%90%EC%84%9C-%EC%BB%A4%EB%B0%8B%EA%B9%8C%EC%A7%80\">파일 생성에서 커밋까지</a></li>\n<li><a href=\"/git_00/#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1-%ED%9B%84-%EC%88%98%EC%A0%95%EC%A0%80%EC%9E%A5\">파일 생성 후 수정/저장</a></li>\n<li><a href=\"/git_00/#%ED%8C%8C%EC%9D%BC-%EC%82%AD%EC%A0%9C\">파일 삭제</a></li>\n</ul>","fields":{"slug":"/git_00/"},"frontmatter":{"title":"Git _ 기본 이해하기","date":"Jun 15, 2016","tags":["Git"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/git_00/","series":[],"lastmod":"2016-06-15"}},"staticQueryHashes":["2027115977","694178885"]}