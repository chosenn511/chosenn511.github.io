{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_05/","result":{"data":{"markdownRemark":{"html":"<p>문제 5번은 입력받은 숫자를 거꾸로 출력하는 문제이다. 파이썬에서는 리스트 인덱싱과 슬라이싱을 사용하여 반복문을 사용하지 않고 풀 수도 있다. 해당 포스트에서는 리스트 인덱싱과 반복문(<code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>), 그리고 재귀를 사용하여 풀어보았다.</p>\n<br>\n<h2 id=\"문제-5-숫자를-거꾸로-출력\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-5-%EC%88%AB%EC%9E%90%EB%A5%BC-%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EC%B6%9C%EB%A0%A5\" aria-label=\"문제 5 숫자를 거꾸로 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 5) 숫자를 거꾸로 출력</h2>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 5. 숫자를 거꾸로 출력\n\n사용자에게 정수 N(0 &lt; N &lt;= 1,000,000)을 입력받고, N을 거꾸로 출력하는 프로그램\n1. Input the number : 123456\n    654321\n2. Input the number : 2584697\n    7964852\n3. Input the number : 649731\n    137946\n4. Input the number : 119911\n    119911</code></pre></div>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<h3 id=\"1-list-indexing\" style=\"position:relative;\"><a href=\"#1-list-indexing\" aria-label=\"1 list indexing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) list indexing</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 리스트 인덱싱 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">backward_basic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number(0 &lt; n &lt;=1,000,000) : \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Input the number in given range.\"</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nbackward_basic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number(0 &lt; n &lt;=1,000,000) : 1234</span>\n<span class=\"token comment\"># 4321</span></code></pre></div>\n<p>리스트 인덱싱을 사용하여 주어진 범위의 숫자를 문자열로 입력받은 후 리스트 인덱싱을 통해 숫자를 거꾸로 출력하면 된다. 범위를 벗어날 경우에는 예외처리를 해주었다.</p>\n<br>\n<h3 id=\"2-while\" style=\"position:relative;\"><a href=\"#2-while\" aria-label=\"2 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) while</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">backward_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number(0 &lt; n &lt;=1,000,000) : \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Input the number in given range.\"</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    ln <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> ln<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span>ln<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">### 실행 ###</span>\nbackward_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number(0 &lt; n &lt;=1,000,000) : 1234</span>\n<span class=\"token comment\"># 4321</span></code></pre></div>\n<p>while문을 사용하여 <code class=\"language-text\">i</code>가 주어진 문자열의 길이를 넘지 않을 동안 마지막 인덱스의 값부터 출력하고 <code class=\"language-text\">i</code>를 <code class=\"language-text\">1</code>만큼 증가시켰다. 그리고 <code class=\"language-text\">print()</code> 메서드 안에서 <code class=\"language-text\">end=&quot;&quot;</code>인자를 사용하여 반복문 종료까지의 값이 한 줄로 출력되도록 처리해주었다.</p>\n<br>\n<h3 id=\"3-for\" style=\"position:relative;\"><a href=\"#3-for\" aria-label=\"3 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) for</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">backward_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number(0 &lt; n &lt;=1,000,000) : \"</span><span class=\"token punctuation\">)</span>\n    ln <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Input the number in given range.\"</span>\n    <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span>ln <span class=\"token operator\">-</span> a <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nbackward_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># Input the number(0 &lt; n &lt;=1,000,000) : 1234</span>\n<span class=\"token comment\"># 4321</span></code></pre></div>\n<p>while문을 썼던 것과 동일한 방법으로 풀었다. 사용하여 입력받은 숫자의 길이만큼 반복문을 돌면서 n의 마지막값부터 출력한다.</p>\n<br>\n<h3 id=\"4-recursive-function\" style=\"position:relative;\"><a href=\"#4-recursive-function\" aria-label=\"4 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) recursive function</h3>\n<p>재귀를 사용하여 두 가지 방법으로 풀어보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 재귀 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ln <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward_recursive01</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> num\n\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> backward_recursive01<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward_recursive02</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> num\n\n        <span class=\"token keyword\">return</span> backward_recursive02<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(1) : '</span><span class=\"token punctuation\">,</span> backward_recursive01<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(2) : '</span><span class=\"token punctuation\">,</span> backward_recursive02<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p><strong>backward_recursive01(num) 이해하기</strong></p>\n<p><code class=\"language-text\">backward_recursive01(num)</code>는 입력받은 숫자의 마지막 인덱스 값을 앞으로 가져오고 마지막 인덱스 값을 제외한 문자열을 계속해서 반환하는 방식을 반복한다. 예를 들어, <code class=\"language-text\">12345</code>를 입력했을 경우 다음과 같은 방식으로 리턴값을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> backward_recursive01<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># output = 54321</span>\n<span class=\"token comment\"># ln = 5일 때 5 + 1234</span>\n<span class=\"token comment\"># ln = 4일 때 4 + 123</span>\n<span class=\"token comment\"># ln = 3일 때 3 + 12</span>\n<span class=\"token comment\"># ln = 2일 때 2 + 1</span>\n<span class=\"token comment\"># ln = 1일 때 1        탈출조건 충족</span>\n<span class=\"token comment\"># input = 12345</span></code></pre></div>\n<p>탈출조건의 경우에는 문자열 길이가 <code class=\"language-text\">0</code>이 될 경우 None값을 반환하기 때문에 적절하지 않으므로  <code class=\"language-text\">num[0]</code>의 값이 <code class=\"language-text\">num</code>과 같을 경우(1글자) 그대로 <code class=\"language-text\">num</code>값을 리턴하는 방식으로 종료시켜주었다.</p>\n<br>\n<p><strong>backward_recursive02(num) 이해하기ㄴ</strong></p>\n<p><code class=\"language-text\">backward_recursive02(num)</code>는 위의 방식과 반대방향으로 동작한다. 입력받은 숫자의 첫번째 인덱스 값을 마지막 순서에 더하고 0번째 인덱스 값을 제외한 문자열을 계속해서 반환하는 방식을 반복한다. 예를 들어 <code class=\"language-text\">12345</code>를 입력했을 경우 다음과 같은 방식으로 리턴값을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">backward_recursive02<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># output = 54321</span>\n<span class=\"token comment\"># ln = 5일 때 5432 + 1</span>\n<span class=\"token comment\"># ln = 4일 때 543 + 2</span>\n<span class=\"token comment\"># ln = 3일 때 54 + 3</span>\n<span class=\"token comment\"># ln = 2일 때 5 + 4</span>\n<span class=\"token comment\"># ln = 1일 때 5       탈출조건 충족   </span>\n<span class=\"token comment\"># input = 12345</span></code></pre></div>\n<br>\n<h2 id=\"실행시간-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행시간 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정해보기</h2>\n<p>메서드의 실행시간을 측정하는 <code class=\"language-text\">runtime()</code>를 여러 번 실행하여 실행시간의 평균값을 측정하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 작성한 메서드를 100000번씩 반복 실행하여 나온 실행속도의 평균값 구하는 함수를 avg()로 정의하였다.</span>\n\n\n<span class=\"token comment\"># (1) 리스트 슬라이싱</span>\navg<span class=\"token punctuation\">(</span>backward_basic<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.024862601538188756   </span>\n\n<span class=\"token comment\"># (2) while</span>\navg<span class=\"token punctuation\">(</span>backward_while<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.024396212422288954</span>\n\n<span class=\"token comment\"># (3) for</span>\navg<span class=\"token punctuation\">(</span>backward_for<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.023717234143987298</span>\n\n<span class=\"token comment\"># (4) recursive</span>\navg<span class=\"token punctuation\">(</span>recursive05<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.026360990363173187</span></code></pre></div>\n<br>","excerpt":"문제 5번은 입력받은 숫자를 거꾸로 출력하는 문제이다. 파이썬에서는 리스트 인덱싱과 슬라이싱을 사용하여 반복문을 사용하지 않고 풀 수도 있다. 해당 포스트에서는 리스트 인덱싱과 반복문(, ), 그리고 재귀를 사용하여 풀어보았다. 문제 5) 숫자를 거…","tableOfContents":"<ul>\n<li><a href=\"/recursion_05/#%EB%AC%B8%EC%A0%9C-5-%EC%88%AB%EC%9E%90%EB%A5%BC-%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EC%B6%9C%EB%A0%A5\">문제 5) 숫자를 거꾸로 출력</a></li>\n<li>\n<p><a href=\"/recursion_05/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_05/#1-list-indexing\">(1) list indexing</a></li>\n<li><a href=\"/recursion_05/#2-while\">(2) while</a></li>\n<li><a href=\"/recursion_05/#3-for\">(3) for</a></li>\n<li><a href=\"/recursion_05/#4-recursive-function\">(4) recursive function</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_05/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행시간 측정해보기</a></li>\n</ul>","fields":{"slug":"/recursion_05/"},"frontmatter":{"title":"Python _ Recursion5. 숫자를 거꾸로 출력","date":"Sep 20, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_05/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-20"}},"staticQueryHashes":["2027115977","694178885"]}