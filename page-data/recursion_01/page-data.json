{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_01/","result":{"data":{"markdownRemark":{"html":"<p><code class=\"language-text\">재귀</code>는 <strong>하나의 함수 내에서 자신(해당 함수)을 다시 호출하여 작업을 수행하는 방식으로 문제를 푸는 방법</strong>\n이다. 재귀함수를 설계할 때 가장 중요한 점은 <strong>매 호출시마다 매개변수가 변한다</strong>\n는 점이다. 계속 다른 매개변수에 대해 같은 함수처리를 반복, 즉, 자기 자신을 계속 호출하는 것이다.</p>\n<p>그러므로 <code class=\"language-text\">탈출조건</code>이 재귀에서는 매우 중요해진다. <strong>자기 자신을 반복해서 부르는 행위를 언제 끝낼지 반드시 정의해주어야하는 것</strong>\n이다. 만약 매개변수가 변하지 않거나 특정 패턴만 반복하고 있다면 그 재귀함수는 영원히 실행을 반복하다가 스택 오버플로우를 발생시킬 것이다. 따라서 재귀를 설계할 때는 반드시 <code class=\"language-text\">탈출조건</code>을 염두에 두어야 한다.</p>\n<br>\n<h2 id=\"문제-1-1부터-n까지-연속된-수의-합-출력\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-1-1%EB%B6%80%ED%84%B0-n%EA%B9%8C%EC%A7%80-%EC%97%B0%EC%86%8D%EB%90%9C-%EC%88%98%EC%9D%98-%ED%95%A9-%EC%B6%9C%EB%A0%A5\" aria-label=\"문제 1 1부터 n까지 연속된 수의 합 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 1) 1부터 n까지 연속된 수의 합 출력</h2>\n<p>다음 문제는 매개변수로 정수를 받으며, 1부터 해당 정수까지의 모든 정수를 더하는 과정을 재귀로 푸는 문제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 1. 수의 합 출력\n1부터 N 까지 모든 수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. input 1부터 the number = 42\n    42까지의 합 : 903\n2. input 1부터 the number = 1\n    1까지의 합 : 1\n3. input 1부터 the number = 468\n    468까지의 합 : 109746\n4. input 1부터 the number = 1000\n    1000까지의 합 : 500500</code></pre></div>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<h3 id=\"1-while\" style=\"position:relative;\"><a href=\"#1-while\" aria-label=\"1 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) while</h3>\n<p>재귀를 생각하기 전에 파이썬의 <code class=\"language-text\">while</code>과 <code class=\"language-text\">for</code>를 사용하여 해당 문제를 풀어보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input 1부터 the number = '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">import</span> copy\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> n\n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'{n}까지의 합: {result}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n        n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###     </span>\nseq_sum_while<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input 1부터 the number = 10</span>\n<span class=\"token comment\"># '10까지의 합: 55'</span></code></pre></div>\n<p><code class=\"language-text\">while</code>문을 사용하여 푼 방법은 위과 같다. <strong>n이 0이 아닐 경우</strong> 계속해서 리턴값인 <code class=\"language-text\">result</code>에 <code class=\"language-text\">n</code>을 더해주고 다음 반복문 실행 전에 <code class=\"language-text\">n</code>에서 <code class=\"language-text\">1</code>씩 빼준다.</p>\n<br>\n<h3 id=\"2-for\" style=\"position:relative;\"><a href=\"#2-for\" aria-label=\"2 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) for</h3>\n<p>이번에는 <code class=\"language-text\">for</code>문을 사용해서 풀어보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input 1부터 the number = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">import</span> copy\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'{n}까지의 합: {result}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n        n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nseq_sum_for<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input 1부터 the number = 10</span>\n<span class=\"token comment\"># '10까지의 합: 55'</span></code></pre></div>\n<p><code class=\"language-text\">for</code>문은 훨씬 간단했다. <code class=\"language-text\">n</code>까지 포함해야하므로 <code class=\"language-text\">range()</code>함수를 사용하여 범위를 정해주고 반복문을 실행하면서 <code class=\"language-text\">i</code>를 리턴값인 <code class=\"language-text\">result</code>에 더해주었다.</p>\n<br>\n<h3 id=\"3-recursive-function\" style=\"position:relative;\"><a href=\"#3-recursive-function\" aria-label=\"3 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) recursive function</h3>\n<p>다음은 재귀로 푼 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">recursive01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> copy\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input 1에서부터 the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 탈출조건</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> result\n        result <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> seq_sum_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{n}까지의 합: {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>seq_sum_recursive<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###</span>\nrecursive01<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input 1에서부터 the number : 1000</span>\n<span class=\"token comment\"># 1000까지의 합: 500500</span></code></pre></div>\n<p><code class=\"language-text\">n</code>을 매개변수로 받았을 때, 자기자신을 계속 호출하면서 연속된 수를 더해나가야하므로 함수 자체를 연산식에 사용해야한다. 연속된 수를 매개변수 값에서부터 시작하여 1까지 더해나가려면 다음과 같은 식이 성립한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">n + (n - 1) + (n - 2) + ... + 2 + 1\nn + f(n - 1)\n\nf(n - 1) = (n - 1) + f(n - 2)\nf(n - 2) = (n - 2) + f(n - 3)\n...\nf(1) = 1 + f(0)\nf(0) = 0 + f(-1)</code></pre></div>\n<p>그리고 <code class=\"language-text\">탈출조건</code>은 <code class=\"language-text\">n</code>이 1이 될 때까지 더해주어야 하므로 <code class=\"language-text\">n == 0</code>일 때 리턴값인 <code class=\"language-text\">result</code>를 반환하고 함수를 종료하도록 설계하였다.</p>\n<br>\n<h3 id=\"실행시간-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행시간 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정해보기</h3>\n<p><code class=\"language-text\">while</code>, <code class=\"language-text\">for</code>, <code class=\"language-text\">recursive</code>로 푼 메서드의 실행시간을 각각 측정해보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># n = 1000일 때</span>\n\n<span class=\"token comment\"># (1) while</span>\nruntime<span class=\"token punctuation\">(</span>seq_sum_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 4.600151441991329e-07</span>\n\n<span class=\"token comment\"># (2) for</span>\nruntime<span class=\"token punctuation\">(</span>seq_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 4.050089046359062e-07</span>\n\n<span class=\"token comment\"># (3) recursive</span>\nruntime<span class=\"token punctuation\">(</span>recursive01<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 7.560010999441147e-07</span></code></pre></div>\n<p>더하기 연산 같은 간단한 알고리즘이지만 재귀가 확실히 느렸다. 또, 매개변수로 <code class=\"language-text\">10000</code> 정도의 값을 줄 경우 재귀를 사용한 메서드는 스택오버플로우를 발생시켰다.</p>\n<p>함수의 실행시간 측정하는 방법은 따로 포스트할 예정이다.</p>\n<br>\n<h2 id=\"완료-코드\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C-%EC%BD%94%EB%93%9C\" aria-label=\"완료 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 완료 코드</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> copy\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input 1부터 the number = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_while1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> n\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> result\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_for1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> i\n        <span class=\"token keyword\">return</span> result\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">seq_sum_recursive1</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> seq_sum_recursive1<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while - {n}까지의 합: {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>seq_sum_while1<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for - {n}까지의 합: {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>seq_sum_for1<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recursive - {n}까지의 합: {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>seq_sum_recursive1<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nadd01<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input 1부터 the number = 10</span>\n<span class=\"token comment\"># while - 10까지의 합: 55</span>\n<span class=\"token comment\"># for - 10까지의 합: 55</span>\n<span class=\"token comment\"># recursive - 10까지의 합: 55</span></code></pre></div>\n<br>\n<p><strong>+추가</strong></p>\n<p>재귀를 사용한 메서드를 실행할 때 스택머신 가동 횟수를 제한하고 싶을 경우에는 <strong>재귀 횟수를 조절할 수 있는 내장 모듈</strong>\n을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\"># 1000 이상의 재귀 호출은 RecursionError를 발생시킨다.</span>\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>먼저 선언해놓고 재귀를 사용한 메서드를 사용하면 된다.</p>\n<br>","excerpt":"는 하나의 함수 내에서 자신(해당 함수)을 다시 호출하여 작업을 수행하는 방식으로 문제를 푸는 방법\n이다. 재귀함수를 설계할 때 가장 중요한 점은 매 호출시마다 매개변수가 변한다\n는 점이다. 계속 다른 매개변수에 대해 같은 함수처리를 반복, 즉, 자…","tableOfContents":"<ul>\n<li><a href=\"/recursion_01/#%EB%AC%B8%EC%A0%9C-1-1%EB%B6%80%ED%84%B0-n%EA%B9%8C%EC%A7%80-%EC%97%B0%EC%86%8D%EB%90%9C-%EC%88%98%EC%9D%98-%ED%95%A9-%EC%B6%9C%EB%A0%A5\">문제 1) 1부터 n까지 연속된 수의 합 출력</a></li>\n<li>\n<p><a href=\"/recursion_01/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_01/#1-while\">(1) while</a></li>\n<li><a href=\"/recursion_01/#2-for\">(2) for</a></li>\n<li><a href=\"/recursion_01/#3-recursive-function\">(3) recursive function</a></li>\n<li><a href=\"/recursion_01/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행시간 측정해보기</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_01/#%EC%99%84%EB%A3%8C-%EC%BD%94%EB%93%9C\">완료 코드</a></li>\n</ul>","fields":{"slug":"/recursion_01/"},"frontmatter":{"title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","date":"Sep 11, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_01/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-11"}},"staticQueryHashes":["2027115977","694178885"]}