{"componentChunkName":"component---src-templates-post-tsx","path":"/ggcloudDeploy-6_01/","result":{"data":{"markdownRemark":{"html":"<p>웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, <strong>쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리</strong>\n에 대해서 설명하고자 한다.</p>\n<br />\n<h2 id=\"1-쿠버네트는-https-로드밸런싱을-선호한다\" style=\"position:relative;\"><a href=\"#1-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8A%B8%EB%8A%94-https-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%9C%EB%8B%A4\" aria-label=\"1 쿠버네트는 https 로드밸런싱을 선호한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 쿠버네트는 HTTP(S) 로드밸런싱을 선호한다.</h2>\n<p>해당 부분은 설명이 여기저기 분산되어 있고 구글에서 제공하는 문서가 다소 빈약하므로 포괄적인 원리에 대해서 개인적으로 이해한 바대로 설명하겠다.</p>\n<p>쿠버네트 엔진 문서를 보면 다음과 같이 두 가지의 방식의 배포방법을 알려준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">Kubernetes Engine offers integrated support for two types of cloud load balancing for a publicly accessible application:\n\n\t1. You can create TCP load balancers by specifying type: LoadBalancer on a Service resource manifest. Although a TCP load balancer works for HTTP web servers, they are not designed to terminate HTTP(S) traffic as they are not aware of individual HTTP(S) requests. Kubernetes Engine does not configure any health checks for TCP load balancers.\n\n\t2. You can create HTTP(S) load balancers by using an Ingress resource. HTTP(S) load balancers are designed to terminate HTTP(S) requests and can make better context-aware load balancing decisions. They offer features like customizable URL maps and TLS termination. Kubernetes Engine automatically configures health checks for HTTP(S) load balancers.\n\nIf you are exposing an HTTP(S) service hosted on Kubernetes Engine, HTTP(S) load balancing is the recommended method for load balancing.</code></pre></div>\n<p>위의 설명을 간략히 설명하면 <strong>쿠버네트 엔진을 사용하는 경우 HTTP(S) 로드 밸런싱 방식을 사용하는 것을 추천</strong>\n하고 있다. 이 방식은 도메인을 호스트명으로 두고 여러 개의 URL을 생성해 연결할 수 있다는 점과 TLS 인증서 발급을 커스터마이징할 수 있다는 관리 측면의 장점을 가지고 있다.</p>\n<p>1번에서 설명한 TCP 로드밸런싱 방식의 배포가 <code class=\"language-text\">Service</code> 설정으로 배포를 진행한다면\nHTTP(S) 로드 밸런싱 기법은 <code class=\"language-text\">Ingress</code> 설정을 사용한다. 그렇다면 <code class=\"language-text\">Ingress</code>는 무엇일까?</p>\n<br />\n<h2 id=\"2-ingress-이해하기\" style=\"position:relative;\"><a href=\"#2-ingress-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"2 ingress 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Ingress 이해하기</h2>\n<p><a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\" target=\"_blank\">Ingress에 대한 문서</a>가 처음 읽으면 어렵기도 하고 전체 개념을 설명해주지 않는 것 같아서 핵심적인 부분만 인용하여 설명하고자 한다.</p>\n<p>기존의 <strong>TCP 방식 로드밸런싱 방식</strong>은 다음과 같다. 즉, 웹앱을 직접 연결하여 퍼블리싱하는 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">    internet\n        |\n  ------------\n  [ Services ]</code></pre></div>\n<p>반면 <strong><code class=\"language-text\">Ingress</code>는 <code class=\"language-text\">internet</code>과 <code class=\"language-text\">Service</code>(배포한 클러스터) 사이에 위치해 외부에서 들어오는 복수 개의 인바운드 요청을 클러스터로 연결해주는 설정파일</strong>이다. 즉, 다음과 같이 그려볼 수 있다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">    internet\n        |\n   [ Ingress ]\n   --|-----|--\n   [ Services ]</code></pre></div>\n<p>이러한 <code class=\"language-text\">Ingress</code>는 다음과 같은 설정을 가능케 한다.</p>\n<ul>\n<li>외부로 연결되는 URL을 원하는 갯수만큼 설정 가능 == 들어오는 문을 여러 개 만드는 것</li>\n<li>로드밸런스 트래픽 처리 == 유연한 분산처리</li>\n<li>SSL 설정 가능 == 보안 처리</li>\n<li>이름 기반 가상호스팅 가능 == 도메인 호스팅이 별도로 필요없음</li>\n</ul>\n<br />\n<p>위의 개념 설명을 바탕으로 매우 간략하게 짜여진 <code class=\"language-text\">Ingress</code> 파일을 살펴보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress   <span class=\"token comment\"># 파일형식</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>ingress   <span class=\"token comment\"># 해당 설정에 할당하는 이름</span>\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 세부 설정(나중에 Ingress 컨트롤러, tls 관련 설정이 여기에 들어간다)</span>\n    <span class=\"token key atrule\">ingress.kubernetes.io/rewrite-target</span><span class=\"token punctuation\">:</span> /\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /testpath    <span class=\"token comment\"># Ingress를 적용하기 원하는 패스</span>\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\t   <span class=\"token comment\"># 서브하고자 하는 백엔드 서비스 설정</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> test\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<br />\n<p><code class=\"language-text\">Ingress</code>는 설정파일이라고 했는데, 이 말인 즉슨 <code class=\"language-text\">Ingress</code> 설정파일은 그 자체로 동작하지 않는다. 따라서 <code class=\"language-text\">Ingress</code>에 적힌대로 처리를 해주는 <code class=\"language-text\">Ingress-Controller</code>가 필요하다.</p>\n<p>보통 <code class=\"language-text\">Nginx</code>를 사용하는 편이고, Jay Gorrell의 문서<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>에 따르면 <a href=\"https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%B2%84%EC%8A%A4_%ED%94%84%EB%A1%9D%EC%8B%9C\" target=\"_blank\">리버스 프록싱</a>이 가능한 모든 시스템이면 된다고 한다. 예를 들면 <code class=\"language-text\">Apache</code> 웹서버나 <code class=\"language-text\">Nginx</code>와 같은 것들이다. 해당 역할은 보안을 위한 것인데, 클라이언트가 서버로 요청을 보낼 때 가운데에서 중개를 해주고 공격이 들어오더라도 내부서버로 침투하지 못하도록 하는 역할을 한다.</p>\n<p>나는 이 역할을 해주는 <code class=\"language-text\">Nginx Ingress Controller</code>를 사용했다. 만약 로드밸런서 서비스를 지원하지 않는 플랫폼에서 배포를 하는 경우에는 배포하고자 하는 앱을 <code class=\"language-text\">NodePort</code>로 배포한 후 해당 노드와 연결시켜주면 된다. 이렇게 하면 리버스 프록시 라우팅이 노출된 <code class=\"language-text\">NodePort</code> 내부 각 노드의 Ingress Controller로 연결된다.  </p>\n<p>내 Ingress Controller의 설정파일은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> customize<span class=\"token punctuation\">-</span>this<span class=\"token tag\">!</span> // <span class=\"token comment\"># Deployment의 namespace와 통일해주자!</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> customize<span class=\"token punctuation\">-</span>this<span class=\"token tag\">!</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n      <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">prometheus.io/port</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'10254'</span>\n        <span class=\"token key atrule\">prometheus.io/scrape</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'true'</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">terminationGracePeriodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> gcr.io/google_containers/nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller<span class=\"token punctuation\">:</span>0.9.0<span class=\"token punctuation\">-</span>beta.11\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> POD_NAME\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> metadata.name\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> POD_NAMESPACE\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> metadata.namespace\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n            <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n            <span class=\"token key atrule\">hostPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n            <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n            <span class=\"token key atrule\">hostPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n          <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> /nginx<span class=\"token punctuation\">-</span>ingress<span class=\"token punctuation\">-</span>controller\n            <span class=\"token punctuation\">-</span> <span class=\"token string\">\"--default-backend-service=$(POD_NAMESPACE)/default-http-backend\"</span></code></pre></div>\n<br />\n<h2 id=\"3-default-http-backend\" style=\"position:relative;\"><a href=\"#3-default-http-backend\" aria-label=\"3 default http backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Default-http-backend?</h2>\n<p>자, 컨트롤러의 설정파일을 찬찬히 봤다면 또 다른 의문이 들 것이다. <code class=\"language-text\">default-http-backend</code>는 무엇일까?</p>\n<p>위의 Controller 설정 파일은 Ingress 설정에서 요청한 라우트를 서빙하기 위해 Ingress 리소스를 모니터링한다. 해당 파일은 실행시 <code class=\"language-text\">--default-http-backend</code>라는 아규먼트를 요청하는데, 이는 Nginx Ingress Controller를 사용할 경우에만 필요로 한다.</p>\n<br>\n<p>간단히 말하면 <code class=\"language-text\">Default-http-backend</code>는 Ingress Controller가 확인할 수 없는 Ingress 설정이 있을 경우 <code class=\"language-text\">404</code> 페이지를 돌려주는 서비스이다.</p>\n<p>아래의 설정파일에도 적혀있듯이, 404 페이지를 반환하는 도커이미지면 모두 <code class=\"language-text\">Default-http-backend</code>로 사용할 수 있다. 단, <code class=\"language-text\">/healthz</code> 패스에서는 <code class=\"language-text\">200</code>을 돌려주도록 설정되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># default-deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> customize this<span class=\"token tag\">!</span> <span class=\"token comment\"># Service의 namespace와 통일해주자!</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">terminationGracePeriodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n        <span class=\"token comment\"># Any image is permissable as long as:</span>\n        <span class=\"token comment\"># 1. It serves a 404 page at /</span>\n        <span class=\"token comment\"># 2. It serves 200 on a /healthz endpoint</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> gcr.io/google_containers/defaultbackend<span class=\"token punctuation\">:</span><span class=\"token number\">1.4</span>\n        <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /healthz\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n            <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n          <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n        <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 10m\n            <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 20Mi\n          <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 10m\n            <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 20Mi\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> customize this<span class=\"token tag\">!</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>http<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre></div>\n<br />\n<h2 id=\"4-마치며\" style=\"position:relative;\"><a href=\"#4-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"4 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 마치며</h2>\n<p>지금까지 설명한 것을 초보 개발자가 한번에 이해하기에는 무리가 있다. 다시 간단히 요약해보면, Kubenetes 엔진에서 선호하는 HTTP(S) Load Balancing 방식의 배포를 하기 위해 여러 서브도메인으로의 라우팅이 가능한 <code class=\"language-text\">Ingress</code>를 사용했고, 이 <code class=\"language-text\">Ingress</code>를 동작하도록 하기 위해 <code class=\"language-text\">Nginx-Ingress-Controller</code>를 사용했다. 그리고 <code class=\"language-text\">Nginx-Ingress-Controller</code>를 사용하기에  <code class=\"language-text\">Default-http-backend</code> 설정을  해주었다.</p>\n<p>지금까지는 기본적으로 <code class=\"language-text\">Ingress</code>를 사용한 배포 설정을 설명한 것이다. 다음 포스트에서는 <code class=\"language-text\">TLS/SSL 인증서</code>에 대한 개념설명과 <code class=\"language-text\">kube-lego</code>라는 멋진 라이브러리를 소개하고자 한다.</p>\n<hr>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://medium.com/@cashisclay/kubernetes-ingress-82aa960f658e\" target=\"_blank\">Ingress에 대해 잘 설명해놓은 Jay Gorrell의 문서</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","excerpt":"웹앱을 배포할 때 웹 개발자가 반드시 준수해야 하는 사항이 있다. 바로 TLS/SSL 인증서를 발급받는 일이다. 이번 포스트에서는 인증서에 대한 개념을 뒤로 하고, 쿠버네트 엔진에서 인증서를 발급받기 위해 반드시 이해해야 하는 배포 동작원리\n에 대해…","tableOfContents":"<ul>\n<li><a href=\"/ggcloudDeploy-6_01/#1-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8A%B8%EB%8A%94-https-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%9C%EB%8B%A4\">1. 쿠버네트는 HTTP(S) 로드밸런싱을 선호한다.</a></li>\n<li><a href=\"/ggcloudDeploy-6_01/#2-ingress-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">2. Ingress 이해하기</a></li>\n<li><a href=\"/ggcloudDeploy-6_01/#3-default-http-backend\">3. Default-http-backend?</a></li>\n<li><a href=\"/ggcloudDeploy-6_01/#4-%EB%A7%88%EC%B9%98%EB%A9%B0\">4. 마치며</a></li>\n</ul>","fields":{"slug":"/ggcloudDeploy-6_01/"},"frontmatter":{"title":"Google News Lab > 6. SSL 인증서 발급 <1편> 배포방식에 대한 고찰","date":"Feb 11, 2018","tags":["Google News Lab","Kubernetes","Django","SSL","Let's Encrypt"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/ggcloudDeploy-6_01/","series":[{"slug":"/ggcloudDeploy-6_01/","title":"Google News Lab > 6. SSL 인증서 발급 <1편> 배포방식에 대한 고찰","num":1},{"slug":"/ggcloudDeploy-6_02/","title":"Google News Lab > 6. SSL 인증서 발급 <2편> kube-lego 이해하기","num":2}],"lastmod":"2018-02-11"}},"staticQueryHashes":["2027115977","694178885"]}