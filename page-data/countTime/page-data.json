{"componentChunkName":"component---src-templates-post-tsx","path":"/countTime/","result":{"data":{"markdownRemark":{"html":"<p>아직 알고리즘을 작성하는 것에 익숙하지 않은 개발자들은 먼저 자신이 만든 코드가 정상적으로 작동되는지를 신경쓴다. 이 단계를 넘어서면 기본적으로 고려해야할 것이 바로 성능인데, 성능을 측정하는 방법 중의 하나가 하나의 알고리즘 문제를 여러 방식으로 풀어보고 그 <code class=\"language-text\">실행시간</code>을 측정해보는 것이다.</p>\n<p>해당 포스트는 파이썬으로 작성한 알고리즘 코드의 실행시간을 측정하는 방법에 대해 소개한다.</p>\n<br>\n<h2 id=\"파이썬으로-코드실행시간-측정하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%93%9C%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"파이썬으로 코드실행시간 측정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬으로 코드실행시간 측정하기</h2>\n<p>먼저 시간을 측정하는 파이썬 내장모듈 중에  <code class=\"language-text\">timeit</code>를 살펴보자. <code class=\"language-text\">timeit</code>는 작은 파이썬 코드들의 실행시간을 측정할 목적으로 만들어놓은 모듈이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span>stmt<span class=\"token operator\">=</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">,</span> setup<span class=\"token operator\">=</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">,</span> timer<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>default timer<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">=</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>해당 모듈은 실행시 <code class=\"language-text\">Timer</code>의 객체를 생성한다. 매개변수를 살펴보면 <code class=\"language-text\">stmt</code>에는 실행할 코드를 스트링으로 줄 수 있고, <code class=\"language-text\">setup</code>키워드인자에는 임포트나 실행문을, <code class=\"language-text\">timer</code>키워드인자에는 타이머 함수를, 그리고 <code class=\"language-text\">number</code>키워드인자에는 <code class=\"language-text\">timeit()</code>가 실행될 때의 시간단위를 입력한다.</p>\n<p>시간은 주어진 코드의 실행 횟수를 카운트한다. 실행되는 동안 <code class=\"language-text\">setup</code>은 한번만 실행되며 코드의 실행시간을 여러 번 측정하여 초 단위의 실수형으로 리턴한다. 인자는 루프를 몇 번 돌 것인지 그 횟수를 주면 되며, 주지 않을 경우 기본값은 <code class=\"language-text\">1,000,000</code>으로 설정되어 있다. 모듈이 사용되면 코드, <code class=\"language-text\">setup</code>값, 그리고 <code class=\"language-text\">timer</code> 함수는 <code class=\"language-text\">Timer</code>의 생성자에 전달된다.</p>\n<br>\n<p>위의 모듈을 사용하여 다음과 같이 <code class=\"language-text\">runtime</code> 메서드를 정의해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> timeit\n    start <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>default_timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    f  <span class=\"token comment\"># 시간 측정할 메서드</span>\n    end <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>default_timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">runtime</code> 함수가 실행되면 바로 <code class=\"language-text\">timeit</code> 모듈을 임포트해온 후 <code class=\"language-text\">default_timer</code>를 사용하여 측정할 코드의 실행 직전, 실행 직후 시간을 각각 측정한다. 그리고 시간 값의 차를 구하면 이것이 바로 매개번수로 받은 코드(함수, 메서드, 스트링)의 실행시간이 된다.</p>\n<p>사용예는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"1부터 {n}까지 홀수의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nruntime<span class=\"token punctuation\">(</span>odd_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nodd_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># 5.299807526171207e-07</span>\n<span class=\"token comment\"># input the number : 10</span>\n<span class=\"token comment\"># '1부터 10까지 홀수의 합 : 25'</span></code></pre></div>\n<br>\n<h2 id=\"실행시간-측정-데코레이터\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"실행시간 측정 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정 데코레이터</h2>\n<p>위의 코드는 실행시간을 출력하는 작은 모듈이 되었다. 좀 더 파이써닉하게 해당 메서드를 사용하고 싶다면 파이썬의 <code class=\"language-text\">데코레이터(Decorator)</code>화 하는 것이 좋다.</p>\n<p>위의 <code class=\"language-text\">runtime</code> 메서드를 조금 더 고쳐보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">import</span> timeit\n        start <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>default_timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f\n        end <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>default_timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n<p><strong>+추가</strong></p>\n<p><code class=\"language-text\">runtime</code> 메서드에서 <code class=\"language-text\">time.process_time()</code>을 사용하면 CPU 실행시간도 측정할 수 있다.</p>\n<p>파이썬에서 데코레이터를 정의할 경우에는 위처럼 내부에 <code class=\"language-text\">wrapper</code> 메서드를 넣어 기존 메서드를 내부함수로 정의하고 외부함수에서 내부함수 자체를 리턴하면 된다.</p>\n<br>\n<p>위의 데코레이터를 활용하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token decorator annotation punctuation\">@runtime</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"1부터 {n}까지 홀수의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\n<span class=\"token comment\"># runtime(odd_sum_for()) - 따로 실행해주지 않아도 데코레이터가 알아서 출력해준다.</span>\nodd_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># 5.299807526171207e-07</span>\n<span class=\"token comment\"># input the number : 10</span>\n<span class=\"token comment\"># '1부터 10까지 홀수의 합 : 25'</span></code></pre></div>\n<br>\n<h2 id=\"커멘드-라인에서-코드실행시간-측정하기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A9%98%EB%93%9C-%EB%9D%BC%EC%9D%B8%EC%97%90%EC%84%9C-%EC%BD%94%EB%93%9C%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"커멘드 라인에서 코드실행시간 측정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커멘드-라인에서 코드실행시간 측정하기</h2>\n<p>위의 <code class=\"language-text\">timeit</code>를 그대로 사용하여 커멘드-라인에서도 코드조각, 메서드, 함수 등 작은 파이썬 코드의 실행시간을 측정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">$ python <span class=\"token operator\">-</span>m timeit <span class=\"token namespace\">[statement ...]</span></code></pre></div>\n<p>자세한 명령어 옵션은 다음 링크(<a href=\"https://docs.python.org/3/library/timeit.html\" target=\"_blank\">파이썬 3.6.2 <code class=\"language-text\">timeit</code></a>)를 참고하기 바란다.</p>\n<br>","excerpt":"아직 알고리즘을 작성하는 것에 익숙하지 않은 개발자들은 먼저 자신이 만든 코드가 정상적으로 작동되는지를 신경쓴다. 이 단계를 넘어서면 기본적으로 고려해야할 것이 바로 성능인데, 성능을 측정하는 방법 중의 하나가 하나의 알고리즘 문제를 여러 방식으로 …","tableOfContents":"<ul>\n<li><a href=\"/countTime/#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%93%9C%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\">파이썬으로 코드실행시간 측정하기</a></li>\n<li><a href=\"/countTime/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\">실행시간 측정 데코레이터</a></li>\n<li><a href=\"/countTime/#%EC%BB%A4%EB%A9%98%EB%93%9C-%EB%9D%BC%EC%9D%B8%EC%97%90%EC%84%9C-%EC%BD%94%EB%93%9C%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\">커멘드-라인에서 코드실행시간 측정하기</a></li>\n</ul>","fields":{"slug":"/countTime/"},"frontmatter":{"title":"Python _ 파이썬에서 코드실행시간 측정하기","date":"Sep 12, 2017","tags":["algorithm","python"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/countTime/","series":[],"lastmod":"2017-09-12"}},"staticQueryHashes":["2027115977","694178885"]}