{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-1-코딩스타일/","result":{"data":{"markdownRemark":{"html":"<p>이번 포스트에서는 초심으로 돌아가서 장고 프레임워크를 사용하기 전에 꼭 숙지해야하는 <code class=\"language-text\">표준 코딩 스타일</code>에 대해 알아보고자 한다.</p>\n<br>\n<h1 id=\"읽기-쉬운-코드는-어떤-것인가\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"읽기 쉬운 코드는 어떤 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기 쉬운 코드는 어떤 것인가?</h1>\n<p>가독성이 좋은 코드는 로직이 한 눈에 보이고 유지 관리가 쉬우며 리펙터링이 용이한 코드다. 이러한 코드는 다음의 규칙을 따른다.</p>\n<ul>\n<li>축약되어 있거나 함축적인 함수명은 사용하지 않는다.</li>\n<li>함수 인자의 이름을 작성한다.</li>\n<li>클래스와 메서드를 문서화해놓는다.</li>\n<li>코드에 주석이 포함되어 있다.</li>\n<li>재사용 가능한 메서드는 반드시 리펙터링을 한다.</li>\n<li>함수와 메서드는 스크롤 없이 읽을 수 있을 정도의 길이로 작성한다.</li>\n</ul>\n<p>코드는 언제든지 재사용될 수 있다. 그 때 함수명을 난해하게 축약해놓았다면 함수를 구별하는 데의 <code class=\"language-text\">기술적 부채</code>가 긴 코드를 작성하는 것보다 더 클 수 있다. 위와 같은 규칙을 따르는 것이 다소 귀찮을지라도 예전에 작성한 코드라도 다시 열어봤을 때 바로 식별할 수 있도록 하기 위한 것이니 시간을 투자해도 아깝지 않을 것이다.</p>\n<br>\n<h2 id=\"1-pep-8\" style=\"position:relative;\"><a href=\"#1-pep-8\" aria-label=\"1 pep 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. PEP 8</h2>\n<p><code class=\"language-text\">PEP 8</code>은 파이썬 공식 스타일 가이드이다. 파이썬의 대표적인 스타일 가이드는 다음과 같다.</p>\n<ul>\n<li>들여쓰기는<code class=\"language-text\">스페이스 4칸</code></li>\n<li>최상위 함수와 클래스 선언 사이에는 <code class=\"language-text\">2 줄</code>을 띄운다.</li>\n<li>클래스 안에서의 메서드 간 간격은 <code class=\"language-text\">1 줄</code>을 띄운다.</li>\n</ul>\n<p>PEP 8을 직접 찾아보고 일일히 지킬 자신이 없다면 코드를 작성하면서 가이드를 확인해주는 PEP 8 패키지를 설치하자.</p>\n<p><a href=\"https://pypi.python.org/pypi/pep8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 8 Python style guide checker</a></p>\n<br>\n<h3 id=\"진행중인-프로젝트의-관례를-먼저-생각하자\" style=\"position:relative;\"><a href=\"#%EC%A7%84%ED%96%89%EC%A4%91%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EA%B4%80%EB%A1%80%EB%A5%BC-%EB%A8%BC%EC%A0%80-%EC%83%9D%EA%B0%81%ED%95%98%EC%9E%90\" aria-label=\"진행중인 프로젝트의 관례를 먼저 생각하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>진행중인 프로젝트의 관례를 먼저 생각하자</h3>\n<p>이미 진행중인 프로젝트가 PEP 8 가이드를 따르고 있지 않다면 기존에 지키고 있는 관례를 따르는 것이 좋다.</p>\n<br>\n<h3 id=\"코드품질-관리도구-code-classlanguage-textflake8code\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%ED%92%88%EC%A7%88-%EA%B4%80%EB%A6%AC%EB%8F%84%EA%B5%AC-code-classlanguage-textflake8code\" aria-label=\"코드품질 관리도구 code classlanguage textflake8code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드품질 관리도구, <code class=\"language-text\">flake8</code></h3>\n<p><code class=\"language-text\">flake8</code>은 코딩 스타일과 코드 품질, 논리적 에러를 점검하는 데 매우 유용한 도구로 알려져 있다. 해당 도구는 파이썬 패키지 관리자인 <code class=\"language-text\">pip</code>으로 설치하여 사용한다. 프로젝트 작업 중 대화형 인터프리터를 열고<code class=\"language-text\">check.py</code>를 실행하면 표준 코딩스타일에 어긋나는 에러를 검사해주며, 에러를 고치거나 무시할 수 있는 기능이 있다.</p>\n<p><a href=\"https://pypi.python.org/pypi/flake8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flake8 소개페이지 바로가기</a>\n<a href=\"http://flake8.pycqa.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flake8 문서</a></p>\n<br>\n<h3 id=\"한-줄의-글자-수는-79자-이내로\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A4%84%EC%9D%98-%EA%B8%80%EC%9E%90-%EC%88%98%EB%8A%94-79%EC%9E%90-%EC%9D%B4%EB%82%B4%EB%A1%9C\" aria-label=\"한 줄의 글자 수는 79자 이내로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 줄의 글자 수는 79자 이내로</h3>\n<p><code class=\"language-text\">PEP 8</code>에서는 한 줄의 코드가 79자를 넘지 않도록 제한하고 있다. 이는 텍스트 줄바꿈을 지원하는 텍스트 편집기나 개발 관례상 <strong>코드의 이해도를 떨어뜨리지 않는 수준의 줄 길이</strong>이기 때문이다.</p>\n<p>특히 오픈소스 프로젝트처럼 많은 사람들이 코드를 건드릴 수 있는 경우에는 더더욱 이 규칙을 지키는 것이 좋다. 개인 및 비공개 프로젝트의 경우에는 최대 99자까지 사용해도 무방하다.</p>\n<p>앞서 설명한 표준 코딩스타일 가이드에서는 함수명을 축약하지 않는 것이 좋다고 했다. 하지만 긴 함수명 때문에 글자수가 79자를 넘길 경우에는 어떻게 해야할까 고민했던 사람들이 많을 것이다. 장고 코어 개발자인 애머릭은 이에 대해 <strong>\"수십 년 전 하드웨어를 기준으로 만들어진 말도 안되는 숫자를 지키기보다는 읽기 쉽고 의미있는 변수명을 만드는 것이 더 중요하다\"</strong>라고 말한 바 있다. 가독성의 측면에서 봤을 때 어떤 규칙을 지키는 것이 더 효율적인지 판단해보면 답은 이미 알고 있을 것이다.</p>\n<br>\n<h2 id=\"2-임포트\" style=\"position:relative;\"><a href=\"#2-%EC%9E%84%ED%8F%AC%ED%8A%B8\" aria-label=\"2 임포트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 임포트</h2>\n<p><code class=\"language-text\">PEP 8</code>에서는 리소스를 임포트할 때 다음과 같은 순서로 그룹을 지으라고 권장한다.</p>\n<ol>\n<li>표준 라이브러리 임포트</li>\n<li>연관 외부 라이브러리 임포트</li>\n<li>로컬 앱 또는 로컬 라이브러리에 한정된 임포트</li>\n</ol>\n<p>이를 장고 프로젝트에 대입해보면 다음 예제와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 표준 라이브러리 임포트 - 장고에 내장되어 있는 라이브러리들</span>\n<span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> absolute_import\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> sqrt\n<span class=\"token keyword\">from</span> os<span class=\"token punctuation\">.</span>path <span class=\"token keyword\">import</span> abspath\n\n<span class=\"token comment\"># 코어 장고 임포트 - 장고의 코어 파일들</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>translation <span class=\"token keyword\">import</span> ugettext_lazy <span class=\"token keyword\">as</span> _\n\n<span class=\"token comment\"># 서드파티(외부) 앱 임포트 - pip, brew 등으로 설치한 (장고와 무관한) 라이브러리들</span>\n<span class=\"token keyword\">from</span> django_extensions<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> TimeStampedModel\n\n<span class=\"token comment\"># 프로젝트 앱 임포트 - 프로젝트 내에 직접 생성한 파일들</span>\n<span class=\"token keyword\">from</span> flavors <span class=\"token keyword\">import</span> FlavorListCreateView</code></pre></div>\n<br>\n<h3 id=\"파이썬-임포트-유형\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9E%84%ED%8F%AC%ED%8A%B8-%EC%9C%A0%ED%98%95\" aria-label=\"파이썬 임포트 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 임포트 유형</h3>\n<p>파이썬에서 모듈을 임포트하는 방식은 다음 3가지가 있다. 각각 목적에 맞게 사용한다.</p>\n<p><code class=\"language-text\">from core.views import FlavorMixin</code></p>\n<ul>\n<li>절대 임포트 방식. 외부에서 임포트해서 현재 앱에서 이용할 때</li>\n</ul>\n<br>\n<p><code class=\"language-text\">from .models import Flavor</code></p>\n<ul>\n<li>명시적 상대 임포트 방식. 다른 모듈에서 임포트해서 현재 앱에서 이용할 때</li>\n</ul>\n<br>\n<p><code class=\"language-text\">from models import Flavor</code></p>\n<ul>\n<li>암묵적 상대 임포트 방식. 종종 다른 모듈에서 임포트해서 현재 앱에서 이용할 때 쓰지만 추천하지 않는 방식이다.</li>\n</ul>\n<br>\n<h3 id=\"명시적-성격의-상대-임포트를-사용하라\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%84%B1%EA%B2%A9%EC%9D%98-%EC%83%81%EB%8C%80-%EC%9E%84%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"명시적 성격의 상대 임포트를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 성격의 상대 임포트를 사용하라</h3>\n<p>프로젝트 작업을 하다보면 점점 구조를 갖춰갈수록 코드 간의 연결관계가 복잡해진다. 이 때 코드를 옮기거나 이름을 변경하거나 버전을 나눌 경우 임포트해준 파일명을 일일이 수정해줘야하는 불상사가 발생한다. 이를 대비하여 파이썬에서는 <code class=\"language-text\">명시적 성격의 상대 임포트``(Explicit Relative Import)</code>를 사용하여 패키지명을 하드코딩하지 않고도 원하는 소스를 임포트할 수 있다.</p>\n<p>다음 예제를 보면 <code class=\"language-text\">하드코딩</code>된 임포트 스타일(위)은 <code class=\"language-text\">flavors</code>를 <code class=\"language-text\">flavor</code>로 변경할 경우 일일이 수정을 해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># flavors/views.py</span>\n\n<span class=\"token keyword\">from</span> flavors<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> FlavorListCreateView\n<span class=\"token keyword\">from</span> flavors<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> FlavorForm\n<span class=\"token keyword\">from</span> flavors<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> FlavorMixin</code></pre></div>\n<p>이는 <code class=\"language-text\">코드의 재사용성</code> 측면에서 문제가 되므로 <code class=\"language-text\">명시적 성격의 상대 임포트</code> 스타일로 바꿔보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># flavors/views.py</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> FlavorListCreateView\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> FlavorForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> FlavorMixin</code></pre></div>\n<p>여기서 <code class=\"language-text\">.</code>은 파일이 위치한 폴더를 가리킨다. 따라서 앱 이름을 굳이 명시하지 않아도 폴더 내의 모듈들을 알아서 찾아준다. 이러한 방식은 파이썬 패키지를 하나의 코드로 유닛화해주기도 한다.</p>\n<br>\n<h3 id=\"code-classlanguage-textfrom-__future__-import-absolute_importcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfrom-__future__-import-absolute_importcode\" aria-label=\"code classlanguage textfrom __future__ import absolute_importcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">from __future__ import absolute_import</code></h3>\n<p><code class=\"language-text\">__future__</code> 모듈에서 임포트한 <code class=\"language-text\">absolute_import</code>는 항상 최상위 패키지명을 찾아 임포트해준다. 만약 현재 해당 임포트문을 사용하고 있는 파일 내에 <code class=\"language-text\">flavor</code> 모듈을 임포트할 경우에는 최상위 패키지에 같은 이름의 모듈이 있는지 먼저 살피고 없으면 해당 모듈을 임포트해준다.</p>\n<br>\n<h3 id=\"code-classlanguage-textimport-code을-지양하자\" style=\"position:relative;\"><a href=\"#code-classlanguage-textimport-code%EC%9D%84-%EC%A7%80%EC%96%91%ED%95%98%EC%9E%90\" aria-label=\"code classlanguage textimport code을 지양하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">import *</code>을 지양하자</h3>\n<p><code class=\"language-text\">import *</code>은 해당 패키지에 있는 모든 네임스페이스를 불러온다. 이 방법이 위험한 이유는 다른 파이썬 모듈의 네임스페이스들이 임포트해온 파일의 네임스페이스에 추가로 로딩되거나 기존 것들을 덮어쓸 수 있기 때문이다.</p>\n<p><code class=\"language-text\">네임스페이스(namespace)</code>란?</p>\n<ul>\n<li>개체를 구분할 수 있는 범위를 나타내는 말로 일반적으로 하나의 이름 공간에서는 하나의 이름이 단 하나의 개체만을 가리키게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token comment\"># 위의 임포트문은 아래의 상황을 유발할 수 있다.</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> CharField\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> CharField</code></pre></div>\n<p>즉, form의 CharField를 models의 CharField로 덮어쓸 수 있기 때문에 필요한 부분만 임포트하는 습관이 필요하다.</p>\n<br>\n<h2 id=\"3-장고-코딩-스타일\" style=\"position:relative;\"><a href=\"#3-%EC%9E%A5%EA%B3%A0-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"3 장고 코딩 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 장고 코딩 스타일</h2>\n<p>장고는 내부적으로 PEP 8을 확장한 장고만의 스타일 가이드라인을 가지고 있다. 장고의 표준 스타일은 앞서 소개한 <code class=\"language-text\">flake8</code> 플러그인으로 따를 수 있다. 다음은 대표적인 가이드라인이다.</p>\n<p>장고는 기본적으로 파이썬 스타일을 따른다.</p>\n<ul>\n<li>들여쓰기는 <code class=\"language-text\">스페이스 4칸</code>으로 표시한다.</li>\n<li>camelCase를 지양하고 <code class=\"language-text\">언더스코어</code>로 변수, 함수, 메서드 이름을 표기한다. \tex<em>`hello</em>world()`</li>\n<li>클래스명에는 <code class=\"language-text\">첫 글자를 대문자</code>로 표기한다.</li>\n<li>가능하다면 편의 임포트를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> View  <span class=\"token comment\"># (o)</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span>base <span class=\"token keyword\">import</span> View  <span class=\"token comment\"># (x)</span></code></pre></div>\n<ul>\n<li>docstring에는 동사를 쓴다.</li>\n<li>장고의 템플릿 스타일은 중괄호와 변수명 사이에 띄어쓰기를 준수한다.</li>\n<li>장고의 view 메서드에 첫번째 매개변수는 반드시 <code class=\"language-text\">request</code>로 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">my_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># (o)</span>\n\t<span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_view</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># (x)</span>\n\t<span class=\"token keyword\">pass</span></code></pre></div>\n<ul>\n<li>장고의 모델 필드명은 반드시 <code class=\"language-text\">소문자</code>로 작성하고 띄어쓰기는 <code class=\"language-text\">언더스코어</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tfirst_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (o)</span>\n\tFirstName <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (x)</span>\n\tFirst_Name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (x)</span></code></pre></div>\n<ul>\n<li>클래스 내의 메타클래스는 반드시 필드 선언 후에 한 줄 띄우고 작성한다.</li>\n<li>추가로, 모델 내의 내부 클래스와 표준 메서드는 다음 예제의 순서를 따른다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># 데이터베이스 필드들</span>\n\tfirst_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tlast_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># 커스텀 매니저 속성 정의</span>\n\tobjects <span class=\"token operator\">=</span> UserManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># 메타클래스 정의</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">pass</span>\n\n\t<span class=\"token comment\"># 객체 출력용 표준 메서드 정의</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>first_name\n\n\t<span class=\"token comment\"># 오버라이드 메서드 및 커스텀 메서드 정의</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">pass</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">pass</span></code></pre></div>\n<ul>\n<li>코드 작성을 완료한 후 사용하지 않는 임포트문은 모두 지워준다. 개인적으로 장고 내의 키바인딩에서 <code class=\"language-text\">cmd+L</code>로 단축키를 설정하여 지워주면 편리하다.</li>\n<li>URL 패턴명은 <code class=\"language-text\">언더스코어(_)</code>를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\turl<span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\"># 주소 URL에는 대시를 사용해도 무관하다.</span>\n\t<span class=\"token string\">r'^add-flavor/$'</span><span class=\"token punctuation\">,</span>   \n\tviews<span class=\"token punctuation\">.</span>add_flavor<span class=\"token punctuation\">,</span>\n\tname<span class=\"token operator\">=</span><span class=\"token string\">'add_flavor'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>더 자세한 가이드는 <a href=\"https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code/coding-style/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크-장고문서</a>를 참고하기 바란다.</p>\n<br>\n<h2 id=\"4-자바스크립트-마크업-코딩-스타일\" style=\"position:relative;\"><a href=\"#4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%88%ED%81%AC%EC%97%85-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"4 자바스크립트 마크업 코딩 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 자바스크립트, 마크업 코딩 스타일</h2>\n<p>자바스크립트는 공식 스타일가이드가 따로 없다. 따라서 비공식 스타일을 따르거나, 자바스크립트 프레임워크에서 제공하는 스타일가이드를 따르면 된다.</p>\n<p>HTML과 CSS 같은 마크업 언어의 스타일가이드는 다음 링크를 참고하여 작성하면 된다. 특히 CSS의 경우에는 <code class=\"language-text\">CSScomb</code>라는 CSS용 코딩스타일 포맷도구가 있어 사용자 지정 스타일에 따라 가이드를 제공해준다.</p>\n<p><a href=\"http://codeguide.co\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mdo가 쓴 HTML과 CSS 코드 가이드</a></p>\n<p><a href=\"http://csscomb.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSScomb 살펴보기</a></p>\n<br>\n<h2 id=\"5-현업에서-코딩하기\" style=\"position:relative;\"><a href=\"#5-%ED%98%84%EC%97%85%EC%97%90%EC%84%9C-%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"5 현업에서 코딩하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 현업에서 코딩하기</h2>\n<p>항상 주변의 개발자들이 다른 도구를 사용한다고 생각하고 가이드를 선택할 줄 알아야한다. 즉, 열린 자세로 코드 스타일을 받아들여야 한다는 이야기다. 아무리 작은 코드를 작성하더라도 작업내용과 코드 위치를 금방 찾을 수 있게 프로젝트 구조를 명료히 작성해야 한다.</p>","excerpt":"이번 포스트에서는 초심으로 돌아가서 장고 프레임워크를 사용하기 전에 꼭 숙지해야하는 에 대해 알아보고자 한다. 읽기 쉬운 코드는 어떤 것인가? 가독성이 좋은 코드는 로직이 한 눈에 보이고 유지 관리가 쉬우며 리펙터링이 용이한 코드다. 이러한 코드는 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%EC%9D%BD%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B8%EA%B0%80\">읽기 쉬운 코드는 어떤 것인가?</a></p>\n<ul>\n<li>\n<p><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#1-pep-8\">1. PEP 8</a></p>\n<ul>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%EC%A7%84%ED%96%89%EC%A4%91%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EA%B4%80%EB%A1%80%EB%A5%BC-%EB%A8%BC%EC%A0%80-%EC%83%9D%EA%B0%81%ED%95%98%EC%9E%90\">진행중인 프로젝트의 관례를 먼저 생각하자</a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%EC%BD%94%EB%93%9C%ED%92%88%EC%A7%88-%EA%B4%80%EB%A6%AC%EB%8F%84%EA%B5%AC-code-classlanguage-textflake8code\">코드품질 관리도구, <code class=\"language-text\">flake8</code></a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%ED%95%9C-%EC%A4%84%EC%9D%98-%EA%B8%80%EC%9E%90-%EC%88%98%EB%8A%94-79%EC%9E%90-%EC%9D%B4%EB%82%B4%EB%A1%9C\">한 줄의 글자 수는 79자 이내로</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#2-%EC%9E%84%ED%8F%AC%ED%8A%B8\">2. 임포트</a></p>\n<ul>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9E%84%ED%8F%AC%ED%8A%B8-%EC%9C%A0%ED%98%95\">파이썬 임포트 유형</a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%84%B1%EA%B2%A9%EC%9D%98-%EC%83%81%EB%8C%80-%EC%9E%84%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">명시적 성격의 상대 임포트를 사용하라</a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#code-classlanguage-textfrom-__future__-import-absolute_importcode\"><code class=\"language-text\">from __future__ import absolute_import</code></a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#code-classlanguage-textimport-code%EC%9D%84-%EC%A7%80%EC%96%91%ED%95%98%EC%9E%90\"><code class=\"language-text\">import *</code>을 지양하자</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#3-%EC%9E%A5%EA%B3%A0-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\">3. 장고 코딩 스타일</a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%88%ED%81%AC%EC%97%85-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\">4. 자바스크립트, 마크업 코딩 스타일</a></li>\n<li><a href=\"/2scoops-1-%EC%BD%94%EB%94%A9%EC%8A%A4%ED%83%80%EC%9D%BC/#5-%ED%98%84%EC%97%85%EC%97%90%EC%84%9C-%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0\">5. 현업에서 코딩하기</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/2scoops-1-코딩스타일/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _ 1장. 코딩 스타일","date":"Sep 05, 2017","tags":["book review","Django","REST api"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-1-코딩스타일/","series":[],"lastmod":"2017-09-05"}},"staticQueryHashes":["2027115977","694178885"]}