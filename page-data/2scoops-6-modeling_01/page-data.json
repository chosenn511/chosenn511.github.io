{"componentChunkName":"component---src-templates-post-tsx","path":"/2scoops-6-modeling_01/","result":{"data":{"markdownRemark":{"html":"<p>장고 프레임워크에서 모델은 서비스의 기본 구조이자 뼈대이다. 따라서 초기 모델링이 매우매우 중요하다.(<del>아무리 강조해도 모자란다</del>) 프로젝트를 진행하다가 새로운 모델을 추가하거나 기존 모델을 수정할 때도 전체 디자인을 고려하여 설계해야한다. 이번 포스트에서는 장고의 모델을 이용하는 방법과 주의할 점들에 대하여 알지 못했던 내용들을 정리해보고자 한다. 기본적인 모델에 대한 설명은 <a href=\"https://docs.djangoproject.com/en/1.11/topics/db/models/\" target=\"_blank\">장고 문서</a>를 참고하기 바란다.</p>\n<br>\n<h2 id=\"1-모델의-상속-스타일\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%83%81%EC%86%8D-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"1 모델의 상속 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 모델의 상속 스타일</h2>\n<p>장고에서는 세 가지 모델 상속방식을 제공하고 있다. 모델에서 중복되는 필드가 별로 없다면 상속은 굳이 사용하지 않아도 된다. 한두 개의 필드만 겹치는 경우에는 그냥 모델 두 개에 따로 필드를 각각 선언해주는 것이 낫다.</p>\n<br>\n<h3 id=\"1-추상화-기초-클래스-abstract-base-class\" style=\"position:relative;\"><a href=\"#1-%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4-abstract-base-class\" aria-label=\"1 추상화 기초 클래스 abstract base class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 추상화 기초 클래스 (abstract base class)</h3>\n<blockquote>\n<p>참고. 장고의 추상화 기초 클래스는 파이썬의 추상화 기초 클래스와 사용 목적이 다르다.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>파이썬의 <code class=\"language-text\">abc</code> 모듈(Abstract Base Class)에서 제공하는 추상화 클래스의 이용목적은 부모 클래스에서 상속을 받는 서브 클래스를 인스턴스화 했을 때 부모 클래스의 메서드들이 서브클래스에도 구현이 되었는지 점검해주는 데에 있다. 특히 클래스의 크기가 크고 선언해준 메서드들이 많을 때 버그를 미연에 방지하고 클래스 계층을 쉽게 관리할 수 있도록 해준다. <a href=\"https://dbader.org/blog/abstract-base-classes-in-python\" target=\"_blank\">파이썬 abc 모듈의 목적에 대해 더 읽어보기</a></p>\n</blockquote>\n</blockquote>\n<br>\n<p>장고의 추상화 기본 클래스는 오직 상속받아 생성된 모델의 테이블만 데이터베이스에 생성된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">장점</th>\n<th align=\"center\">단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">추상화 클래스에서 공통적인 필드를 제공하므로 불러와 사용하면 된다.</td>\n<td align=\"center\">부모 클래스를 여러 모델에서 상속받을 수 있기 때문에 특정 모델에서만 독립적으로 사용할 수 없다.</td>\n</tr>\n<tr>\n<td align=\"center\">추가적인 테이블이 생성되지 않으므로 성능에 영향을 미치지 않는다.</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"2-멀티-테이블-상속-multi-table-inheritance\" style=\"position:relative;\"><a href=\"#2-%EB%A9%80%ED%8B%B0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%81%EC%86%8D-multi-table-inheritance\" aria-label=\"2 멀티 테이블 상속 multi table inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 멀티 테이블 상속 (Multi-Table Inheritance)</h3>\n<p><code class=\"language-text\">접합 상속</code>(Concrete Inheritance)이라고도 부른다. 부모 모델 클래스와 자식 모델 클래스 모두 테이블을 생성한다.</p>\n<p>멀티 테이블 상속을 사용하여 여러 모델을 직접 연결하기 보다는 <code class=\"language-text\">OneToOneField</code>를 사용하거나 <code class=\"language-text\">ForeignKey</code>를 사용하여 조인을 해주는 것이 성능과 관리 측면에서 훨씬 효율적이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">장점</th>\n<th align=\"center\">단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">부모와 자식 모두 테이블을 생성하므로<br> 쿼리가 용이하다.</td>\n<td align=\"center\">상속받은 필드들 모두 부모 클래스의 필드로<br> 조인이 필요하므로 성능저하가 생길 수 있다.</td>\n</tr>\n<tr>\n<td align=\"center\">부모 객체에서 자식 객체를<br> 호출할 수 있다.</td>\n<td align=\"center\">성능에 대한 문제때문에 거의 사용하지 않는다.</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"3-프록시-모델-proxy-model\" style=\"position:relative;\"><a href=\"#3-%ED%94%84%EB%A1%9D%EC%8B%9C-%EB%AA%A8%EB%8D%B8-proxy-model\" aria-label=\"3 프록시 모델 proxy model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 프록시 모델 (Proxy Model)</h3>\n<p>기존 모델에 대해서만 테이블이 생성되고, 프록시모델 자체는 테이블을 생성하지 않는다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">장점</th>\n<th align=\"center\">단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">각기 다른 행위(behavior)를 하는<br> 모델을 생성하고 별칭을 붙일 수 있다.</td>\n<td align=\"center\">모델 필드를 변경할 수 없다.</td>\n</tr>\n</tbody>\n</table>\n<br>\n<p>모델에서 중복된 필드가 대부분이거나 계속에서 사용할 필드가 있는 모델을 생성해야한다면 보통 추상화 기초 클래스를 사용하여 공통 필드를 상속받아 사용한다.</p>\n<br>\n<h2 id=\"2-추상화-기본-클래스-상속해보기---code-classlanguage-texttimestampedmodelcode\" style=\"position:relative;\"><a href=\"#2-%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EB%B3%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D%ED%95%B4%EB%B3%B4%EA%B8%B0---code-classlanguage-texttimestampedmodelcode\" aria-label=\"2 추상화 기본 클래스 상속해보기   code classlanguage texttimestampedmodelcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 추상화 기본 클래스 상속해보기 - <code class=\"language-text\">TimeStampedModel</code></h2>\n<p>모델마다 중복되는 생성일/수정일 필드를 <code class=\"language-text\">TimeStampedModel</code>이라는 하나의 추상클래스로 선언하여 여러 모델에서 각 필드를 일일히 선언해주지 않고 상속받아 사용할 수 있게끔 해주려고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># core/models.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeStampedModel</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    상속받으면 'created와 modified 필드를 자동으로 업데이트해주는 추상화 클래스\n    \"\"\"</span>\n    created <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    modified <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 해당 모델을 추상화 기본 클래스로 선언</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract<span class=\"token operator\">=</span><span class=\"token boolean\">True</span></code></pre></div>\n<br>\n<p>위의 추상클래스는 다음 모델 클래스에서 상속받기만 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># flavors/models.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> TimeStampedModel\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flavor</span><span class=\"token punctuation\">(</span>TimeStampedModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Flavor</code> 모델은 <code class=\"language-text\">TimeStampedModel</code>을 상속받았기 때문에  <code class=\"language-text\">created</code>와 <code class=\"language-text\">modified</code> 필드가 자동 생성 및 관리된다.</p>\n<p>만약 <code class=\"language-text\">TimeStampedModel</code>을 멀티 테이블 상속으로 관리해야했다면 해당 테이블이 추가로 생성될 뿐만 아니라 필드의 데이터를 외부키로 쿼리하여 가져와야 하는 불편함이 있었을 것이다.  </p>\n<br>\n<h2 id=\"3-장고의-모델-관련-패키지-소개\" style=\"position:relative;\"><a href=\"#3-%EC%9E%A5%EA%B3%A0%EC%9D%98-%EB%AA%A8%EB%8D%B8-%EA%B4%80%EB%A0%A8-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%86%8C%EA%B0%9C\" aria-label=\"3 장고의 모델 관련 패키지 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 장고의 모델 관련 패키지 소개</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><code class=\"language-text\">django-model-utils</code></th>\n<th align=\"center\"><code class=\"language-text\">django-extensions</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">역할</td>\n<td align=\"center\">각 모델에서 공통적으로 필요로 하는<br> 일반적인 패턴을 상속받아 사용할 수 있게 <br>해주는 모델 관련 패키지</td>\n<td align=\"center\">모든 앱에 모델 클래스를 자동으로<br> 로드해주는<code class=\"language-text\">shell_plus</code> 관리명령어 제공</td>\n</tr>\n<tr>\n<td align=\"center\">단점</td>\n<td align=\"center\">-</td>\n<td align=\"center\"><code class=\"language-text\">작지만 분명한 앱</code>에 맞지 않게<br> 너무 다양한 기능을 포함하고 있음</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2 id=\"4-db-마이그레이션\" style=\"position:relative;\"><a href=\"#4-db-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"4 db 마이그레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. DB 마이그레이션</h2>\n<p>마이그레이션은 장고에서 제공하는 <code class=\"language-text\">django.db.migration</code> 모듈을 통해  ORM 과정을 거쳐 모델 별로 데이터베이스에  테이블을 생성하는 것을 말한다.</p>\n<p>마이그레이션에 필요한 유용한 명령어들을 소개한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 새로운 앱 및 모델에 대해 django.db.migration을 실행하는 명령.</span>\n<span class=\"token comment\"># 마이그레이션 파일을 생성한다.</span>\n$ python manage<span class=\"token punctuation\">.</span>py makemigrations\n\n<span class=\"token comment\"># 마이그레이션 파일을 토대로 DB에 테이블 생성하는 명령</span>\n$ python manage<span class=\"token punctuation\">.</span>py migrate\n\n<span class=\"token comment\"># DB에 마이그레이션을 실행하기 전에 생성된 코드를 살펴볼 수 있는 명령</span>\n$ python manage<span class=\"token punctuation\">.</span>py sqlmigrate\n\n<span class=\"token comment\"># 마이그레이션 생성 개수를 압축해주는 명령</span>\n$ python manage<span class=\"token punctuation\">.</span>py squashmigrations\n\n<span class=\"token comment\"># 외부 앱 마이그레이션</span>\n$ export MIGRATION_MODULES=&lt;장고 마이그레이션 스타일로 이루어지지 않는 외부 앱의 클래스></code></pre></div>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 모델 설계에서의 가장 중요한 개념인 상속에 대해 알아보았다. 또 데이터베이스로의 마이그레이션에 대해서도 유용한 명령어들을 배울 수 있었다. 2부에서는 장고 모델 디자인과 모델 매니저에 대해 알아볼 것이다.</p>\n<br>","excerpt":"장고 프레임워크에서 모델은 서비스의 기본 구조이자 뼈대이다. 따라서 초기 모델링이 매우매우 중요하다.(아무리 강조해도 모자란다) 프로젝트를 진행하다가 새로운 모델을 추가하거나 기존 모델을 수정할 때도 전체 디자인을 고려하여 설계해야한다. 이번 포스트…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2scoops-6-modeling_01/#1-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%83%81%EC%86%8D-%EC%8A%A4%ED%83%80%EC%9D%BC\">1. 모델의 상속 스타일</a></p>\n<ul>\n<li><a href=\"/2scoops-6-modeling_01/#1-%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4-abstract-base-class\">(1) 추상화 기초 클래스 (abstract base class)</a></li>\n<li><a href=\"/2scoops-6-modeling_01/#2-%EB%A9%80%ED%8B%B0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%81%EC%86%8D-multi-table-inheritance\">(2) 멀티 테이블 상속 (Multi-Table Inheritance)</a></li>\n<li><a href=\"/2scoops-6-modeling_01/#3-%ED%94%84%EB%A1%9D%EC%8B%9C-%EB%AA%A8%EB%8D%B8-proxy-model\">(3) 프록시 모델 (Proxy Model)</a></li>\n</ul>\n</li>\n<li><a href=\"/2scoops-6-modeling_01/#2-%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EB%B3%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D%ED%95%B4%EB%B3%B4%EA%B8%B0---code-classlanguage-texttimestampedmodelcode\">2. 추상화 기본 클래스 상속해보기 - <code class=\"language-text\">TimeStampedModel</code></a></li>\n<li><a href=\"/2scoops-6-modeling_01/#3-%EC%9E%A5%EA%B3%A0%EC%9D%98-%EB%AA%A8%EB%8D%B8-%EA%B4%80%EB%A0%A8-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%86%8C%EA%B0%9C\">3. 장고의 모델 관련 패키지 소개</a></li>\n<li><a href=\"/2scoops-6-modeling_01/#4-db-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\">4. DB 마이그레이션</a></li>\n<li><a href=\"/2scoops-6-modeling_01/#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>","fields":{"slug":"/2scoops-6-modeling_01/"},"frontmatter":{"title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <1부>","date":"Oct 14, 2017","tags":["book review","Django"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/2scoops-6-modeling_01/","series":[{"slug":"/2scoops-6-modeling_01/","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <1부>","num":1},{"slug":"/2scoops-6-modeling_02/","title":"BookReview > Two Scoops of Django _ 6장. 장고에서 모델 이용하기 <2부>","num":2},{"slug":"/2scoops-6-modeling_03/","title":"BookReview > Two Scoops of Django _  6장. 장고에서 모델 이용하기 <3부>","num":3}],"lastmod":"2017-10-14"}},"staticQueryHashes":["2027115977","694178885"]}