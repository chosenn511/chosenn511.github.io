{"componentChunkName":"component---src-templates-post-tsx","path":"/web-2-인증API제작하기_02/","result":{"data":{"markdownRemark":{"html":"<p>REST 프레임워크를 이용하여 로그인을 구현하는 방식에는 2가지가 있다. 바로 토큰과 세션 기반인데, 프로젝트에서는 토큰 기반 인증을 사용하여 다음과 같은 로직에 따라 구현하였다.</p>\n<br>\n<h2 id=\"장고의-rest-로그인---token-인증\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%9D%98-rest-%EB%A1%9C%EA%B7%B8%EC%9D%B8---token-%EC%9D%B8%EC%A6%9D\" aria-label=\"장고의 rest 로그인   token 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고의 REST 로그인 - Token 인증</h2>\n<ul>\n<li>사용자에게서 User Credential 정보를 받아 <code class=\"language-text\">authenticate</code>를 진행한다. User Credential은 로그인할 때 입력받을 정보로, 보통 <code class=\"language-text\">username</code>과 <code class=\"language-text\">password</code>를 생각하면 된다. 프로젝트 내 <code class=\"language-text\">username</code>은 이메일 형식으로 받았다.</li>\n<li>해당 유저를 특정할 수 있는 Hash 값을 데이터베이스에 저장한다.</li>\n<li>세션에 저장된 Hash 값을 특정할 수 있는 <code class=\"language-text\">token</code>를 생성한다.</li>\n<li>생성된 <code class=\"language-text\">token</code>을 로그인 요청이 왔을 때 <code class=\"language-text\">response</code>로 돌려준다.</li>\n<li>이후 요청에서, 전달해준 <code class=\"language-text\">token</code>값이 <code class=\"language-text\">request</code>의 <code class=\"language-text\">Header</code>에 담겨올 경우 해당 <code class=\"language-text\">request</code>는 전달받은 <code class=\"language-text\">token</code>값에 해당하는 사용자를 인증된(=로그인된) 상태로 간주한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">[Header] Authorization: Token &quot;토큰값(문자열)&quot;</code></pre></div>\n<br>\n<h2 id=\"필요한-것들\" style=\"position:relative;\"><a href=\"#%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83%EB%93%A4\" aria-label=\"필요한 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필요한 것들</h2>\n<h3 id=\"설정\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95\" aria-label=\"설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정</h3>\n<p><code class=\"language-text\">base.py</code>에 레스트 프레임워크에서 제공하는 토큰 기반 인증을 사용하겠다는 설정을 넣어주고 <code class=\"language-text\">migrate</code>를 통해 <code class=\"language-text\">Token</code> 테이블을 생성해준다. 테이블을 생성하기 위해서는 반드시 <code class=\"language-text\">INSTALLED_APPS</code>에 토큰 앱을 표기하여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># config/base.py</span>\n\n<span class=\"token comment\"># REST_API 설정</span>\nREST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'rest_framework.authentication.TokenAuthentication'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">'rest_framework.authtoken'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>이 때 <code class=\"language-text\">BasicAuthentication</code>은 보안이 취약하므로 사용하지 않는다.</p>\n<br>\n<h3 id=\"토큰-생성하기\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"토큰 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 생성하기</h3>\n<p>토큰 테이블이 생성되었다면 인터프리터를 실행하여 토큰을 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>authtoken<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Token\n\nuser <span class=\"token operator\">=</span> MyUser<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntoken <span class=\"token operator\">=</span> Token<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span></code></pre></div>\n<br>\n<p>이미 유저가 생성되어 있는 경우에는 <code class=\"language-text\">get_or_create()</code> 메서드를 사용하여 토큰이 없을 경우 해당 사용자에 대한 토큰을 생성해주고 있는 경우 그대로 가져오는 방식으로 메서드를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> MyUser<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tToken<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get_or_create<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">)</span></code></pre></div>\n<p>같은 방식으로 유저 모델 아래에 토큰을 생성하는 메서드를 정의해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>signals <span class=\"token keyword\">import</span> post_save\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>dispatch <span class=\"token keyword\">import</span> receiver\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>authtoken<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Token\n\n<span class=\"token decorator annotation punctuation\">@receiver</span><span class=\"token punctuation\">(</span>post_save<span class=\"token punctuation\">,</span> sender<span class=\"token operator\">=</span>settings<span class=\"token punctuation\">.</span>AUTH_USER_MODEL<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_auth_token</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> instance<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> created<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> created<span class=\"token punctuation\">:</span>\n        Token<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>해당 메서드는 REST 프레임워크 문서에 자세하게 기술되어 있다. <a href=\"http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication\" target=\"_blank\">(문서 보러가기)</a></p>\n<br>\n<h2 id=\"로그인-api\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\" aria-label=\"로그인 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 API</h2>\n<p>토큰기반 인증을 사용할 경우 이미 토큰을 보내는 API 또한 불러와 바로 사용할 수 있게 되어 있다. 바로 <code class=\"language-text\">rest_framework.authtoken.views</code> 내 <code class=\"language-text\">ObtainAuthToken</code> 클래스이다. 또, 해당 뷰에서 사용자 인증에 필요한 시리얼라이저도 제공하고 있어 그대로 사용할 수 있다.</p>\n<p>해당 클래스는 <code class=\"language-text\">APIView</code>를 상속받아 <code class=\"language-text\">post</code> 메서드를 정의하고 있다. 이 <code class=\"language-text\">post</code> 메서드는 위의 로그인 로직대로 인증을 거친 후 토큰을 반환해준다. 프로젝트에서는 해당 메서드를 참고하여 따로 <code class=\"language-text\">post</code> 메서드를 정의하고 사용하고 있다.</p>\n<br>\n<h2 id=\"로그아웃-api\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-api\" aria-label=\"로그아웃 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃 API</h2>\n<p>토큰 기반 인증에서는 해당 토큰을 클라이언트 측에 넘겨주고 이후 요청이 올 때 넘겨받는 토큰값이 일치하면 로그인한 상태로 간주한다. 즉, 상태를 계속해서 체크하지 않고 요청이 올 때만 인증을 확인하는 stateless 방식의 인증이라 할 수 있다.</p>\n<p>그렇다면 로그아웃을 하는 경우에는 해당 토큰값이 더이상 유효하지 않도록 처리해주어야 한다. 그 방식에는 2가지가 있는데, 바로 넘겨준 토큰값을 지우는 것과 토큰 자체에 유효기간을 설정하는 방법이다.</p>\n<p>첫번째 방식으로는 로그아웃 요청이 왔을 때 데이터베이스에 저장되어 있는 토큰 값을 삭제하면 된다. 두번째 방식은 유효기간을 정한 뒤 그 시간을 넘길 경우 데이터베이스에서 토큰을 지우는 방식이다.</p>\n<br>","excerpt":"REST 프레임워크를 이용하여 로그인을 구현하는 방식에는 2가지가 있다. 바로 토큰과 세션 기반인데, 프로젝트에서는 토큰 기반 인증을 사용하여 다음과 같은 로직에 따라 구현하였다. 장고의 REST 로그인 - Token 인증 사용자에게서 User Cr…","tableOfContents":"<ul>\n<li><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%EC%9E%A5%EA%B3%A0%EC%9D%98-rest-%EB%A1%9C%EA%B7%B8%EC%9D%B8---token-%EC%9D%B8%EC%A6%9D\">장고의 REST 로그인 - Token 인증</a></li>\n<li>\n<p><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83%EB%93%A4\">필요한 것들</a></p>\n<ul>\n<li><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%EC%84%A4%EC%A0%95\">설정</a></li>\n<li><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%ED%86%A0%ED%81%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">토큰 생성하기</a></li>\n</ul>\n</li>\n<li><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\">로그인 API</a></li>\n<li><a href=\"/web-2-%EC%9D%B8%EC%A6%9DAPI%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0_02/#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-api\">로그아웃 API</a></li>\n</ul>","fields":{"slug":"/web-2-인증API제작하기_02/"},"frontmatter":{"title":"Web _ 2.1 인증 API <2부> - REST의 토큰기반 인증","date":"Sep 29, 2017","tags":["Django","Project","Web development"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/web-2-인증API제작하기_02/","series":[{"slug":"/web-2-인증API제작하기_01/","title":"Web _ 2.1 인증 API <1부> - 유저 모델과 매니저","num":1},{"slug":"/web-2-인증API제작하기_02/","title":"Web _ 2.1 인증 API <2부> - REST의 토큰기반 인증","num":2}],"lastmod":"2017-09-29"}},"staticQueryHashes":["2027115977","694178885"]}