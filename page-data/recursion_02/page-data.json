{"componentChunkName":"component---src-templates-post-tsx","path":"/recursion_02/","result":{"data":{"markdownRemark":{"html":"<p>두번째 문제는 첫번째 문제인 <a href=\"http://bbrubidev.github.io/recursion_01.html\" target=\"_blank\">재귀 - 1부터 n까지 연속된 수의 합</a>을 응용한 문제이다.</p>\n<br>\n<h2 id=\"문제-2-주어진-범위-내-홀수의-합-출력\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-2-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%B2%94%EC%9C%84-%EB%82%B4-%ED%99%80%EC%88%98%EC%9D%98-%ED%95%A9-%EC%B6%9C%EB%A0%A5\" aria-label=\"문제 2 주어진 범위 내 홀수의 합 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 2) 주어진 범위 내 홀수의 합 출력</h2>\n<p>이 문제에서는 매개변수의 범위가 정해져있는 가운데 매개변수보다 작은 홀수의 합만 재귀로 구하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 2. 홀수의 합 출력\n1부터 N(0 &lt; N &lt;= 1000)까지 홀수의 합을 출력하는 프로그램을 재귀함수로 구현\n1. input the number = 999\n    1부터 999까지의 합 : 250000\n2. input the number = 725\n    1부터 725까지의 합 : 131769\n3. input the number = 527\n    1부터 527까지의 합 : 69696\n4. input the number = 406\n    406까지의 합 : 41209    </code></pre></div>\n<br>\n<h2 id=\"코드-및-풀이\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\" aria-label=\"코드 및 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 및 풀이</h2>\n<h3 id=\"1-while\" style=\"position:relative;\"><a href=\"#1-while\" aria-label=\"1 while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) while</h3>\n<p>해당 문제 역시 재귀를 생각하기 전에 <code class=\"language-text\">while</code>과 <code class=\"language-text\">for</code>를 사용하여 풀어보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># while 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">import</span> copy\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">elif</span> a <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> a\n        a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"1부터 {n}까지 홀수의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>    \n\n<span class=\"token comment\">### 실행 ###</span>\nodd_sum_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input the number : 1000</span>\n<span class=\"token comment\"># '1부터 1000까지 홀수의 합 : 250000'</span></code></pre></div>\n<p><code class=\"language-text\">while</code>문을 사용할 경우 <code class=\"language-text\">n</code>의 값이 1000보다 작아야하는 예외처리를 해준 후 <code class=\"language-text\">n</code>보다 작거나 같은 <code class=\"language-text\">a</code>값 중 <code class=\"language-text\">1</code>씩 더하면서 <code class=\"language-text\">2</code>로 나누어지지 않는 값(=홀수)만 리턴값인 <code class=\"language-text\">result</code>에 더해준다. <code class=\"language-text\">a</code>는 n보다 커지는 순간 반복문을 종료하게 된다.</p>\n<br>\n<h3 id=\"2-for\" style=\"position:relative;\"><a href=\"#2-for\" aria-label=\"2 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) for</h3>\n<p><code class=\"language-text\">for</code>문을 사용하여 작성한 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># for 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">import</span> copy\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"1부터 {n}까지 홀수의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###</span>\nodd_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input the number : 1000</span>\n<span class=\"token comment\"># '1부터 1000까지 홀수의 합 : 250000'</span></code></pre></div>\n<p>역시 <code class=\"language-text\">range()</code>함수를 사용하여 범위를 정해주고 반복문을 실행하면서 <code class=\"language-text\">2</code>로 나누어지지 않는 <code class=\"language-text\">i</code>값만 리턴값인 <code class=\"language-text\">result</code>에 더해주었다. 또, <code class=\"language-text\">0 &lt; N &lt;=1000</code> 에 대한 예외처리도 추가하였다.</p>\n<br>\n<h3 id=\"3-recursive-function\" style=\"position:relative;\"><a href=\"#3-recursive-function\" aria-label=\"3 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) recursive function</h3>\n<p>다음은 재귀로 푼 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 재귀 사용</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> copy\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">elif</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> odd_sum_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> odd_sum_recursive<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1부터 {n}까지의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>odd_sum_recursive<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">### 실행 ###</span>\nrecursive02<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input the number : 999</span>\n<span class=\"token comment\"># 1부터 999까지의 합 : 250000</span></code></pre></div>\n<p>먼저 입력받은 <code class=\"language-text\">input</code>이 1000 이하인지 검사한 후, 주어진 범위값이 짝수인지 판별하여 그에 따른 재귀식을 작성하였다. <strong>탈출조건은 n의 값이 0보다 작을 경우 더할 값을 0으로 반환하여 종료한다.</strong></p>\n<br>\n<h2 id=\"실행시간-측정해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행시간 측정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행시간 측정해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># n = 1000일 때</span>\n\n<span class=\"token comment\"># (1) while</span>\nruntime<span class=\"token punctuation\">(</span>odd_sum_while<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7.859780453145504e-07</span>\n\n<span class=\"token comment\"># (2) for</span>\nruntime<span class=\"token punctuation\">(</span>odd_sum_for<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1.7050188034772873e-06</span>\n\n<span class=\"token comment\"># (3) recursive</span>\nruntime<span class=\"token punctuation\">(</span>add_sum_recursive<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8.179922588169575e-07</span></code></pre></div>\n<br>\n<h2 id=\"완료-코드\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C-%EC%BD%94%EB%93%9C\" aria-label=\"완료 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 완료 코드</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> copy\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the number : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    num <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_while02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n            <span class=\"token keyword\">elif</span> a <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">+=</span> a\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> result  \n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_for02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n            <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">+=</span> i\n        <span class=\"token keyword\">return</span> result\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">odd_sum_recursive02</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"1000과 같거나 작은 수를 입력하세요!\"</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 논리연산자(&amp;)를 사용하여 홀수인 값만 판별한다.</span>\n        <span class=\"token keyword\">elif</span> n <span class=\"token operator\">%</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> odd_sum_recursive02<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> odd_sum_recursive02<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while - 1부터 {n}까지의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>odd_sum_while02<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for - 1부터 {n}까지의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>odd_sum_for02<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recursive - 1부터 {n}까지의 합 : {result}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>num<span class=\"token punctuation\">,</span> result<span class=\"token operator\">=</span>odd_sum_recursive02<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 실행 ###  </span>\nadd02<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### 출력 ###</span>\n<span class=\"token comment\"># input the number : 1000</span>\n<span class=\"token comment\"># while - 1부터 1000까지의 합 : 250000</span>\n<span class=\"token comment\"># for - 1부터 1000까지의 합 : 250000</span>\n<span class=\"token comment\"># recursive - 1부터 1000까지의 합 : 250000</span></code></pre></div>\n<br>","excerpt":"두번째 문제는 첫번째 문제인 재귀 - 1부터 n까지 연속된 수의 합을 응용한 문제이다. 문제 2) 주어진 범위 내 홀수의 합 출력 이 문제에서는 매개변수의 범위가 정해져있는 가운데 매개변수보다 작은 홀수의 합만 재귀로 구하면 된다. 코드 및 풀이 (…","tableOfContents":"<ul>\n<li><a href=\"/recursion_02/#%EB%AC%B8%EC%A0%9C-2-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%B2%94%EC%9C%84-%EB%82%B4-%ED%99%80%EC%88%98%EC%9D%98-%ED%95%A9-%EC%B6%9C%EB%A0%A5\">문제 2) 주어진 범위 내 홀수의 합 출력</a></li>\n<li>\n<p><a href=\"/recursion_02/#%EC%BD%94%EB%93%9C-%EB%B0%8F-%ED%92%80%EC%9D%B4\">코드 및 풀이</a></p>\n<ul>\n<li><a href=\"/recursion_02/#1-while\">(1) while</a></li>\n<li><a href=\"/recursion_02/#2-for\">(2) for</a></li>\n<li><a href=\"/recursion_02/#3-recursive-function\">(3) recursive function</a></li>\n</ul>\n</li>\n<li><a href=\"/recursion_02/#%EC%8B%A4%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\">실행시간 측정해보기</a></li>\n<li><a href=\"/recursion_02/#%EC%99%84%EB%A3%8C-%EC%BD%94%EB%93%9C\">완료 코드</a></li>\n</ul>","fields":{"slug":"/recursion_02/"},"frontmatter":{"title":"Python _ Recursion2. 홀수의 합 출력","date":"Sep 11, 2017","tags":["algorithm","python","recursion"],"keywords":["Development Note","Julia"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/recursion_02/","series":[{"slug":"/recursion_01/","title":"Python _ Recursion1. 1부터 n까지 연속된 수의 합","num":1},{"slug":"/recursion_02/","title":"Python _ Recursion2. 홀수의 합 출력","num":2},{"slug":"/recursion_03/","title":"Python _ Recursion3. 2 ** n 출력","num":3},{"slug":"/recursion_04/","title":"Python _ Recursion4. 피보나치 수열 출력","num":4},{"slug":"/recursion_05/","title":"Python _ Recursion5. 숫자를 거꾸로 출력","num":5},{"slug":"/recursion_06/","title":"Python _ Recursion6. 숫자의 자릿수의 합","num":6},{"slug":"/recursion_07/","title":"Python _ Recursion7. 이진수의 1의 개수 출력","num":7},{"slug":"/recursion_08/","title":"Python _ Recursion8. 계단 오르기","num":8},{"slug":"/recursion_09/","title":"Python _ Recursion9. 이항계수 계산하기","num":9}],"lastmod":"2017-09-11"}},"staticQueryHashes":["2027115977","694178885"]}